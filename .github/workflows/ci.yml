name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  LC_ALL: C
  LANG: C
  COLUMNS: 80

jobs:
  lint:  
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Official Rust toolchain; we need clippy+rustfmt for this job
      - name: Setup Rust (1.87)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: clippy,rustfmt
          target: x86_64-apple-darwin,x86_64-pc-windows-msvc
          cache: true

      - name: Install system dependencies (Linux only)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev

      - name: Lint
        run: make lint

      - name: Verify comments
        run: make verify-comments

      - name: Validate interop matrix docs
        run: scripts/check-run-matrix-docs.sh

      - name: Cargo check (cross targets)
        if: runner.os == 'Linux' && env.MACOS_SDK_PATH != ''
        run: |
          cargo check --workspace --target x86_64-apple-darwin
          cargo check --workspace --target x86_64-pc-windows-msvc

  test-linux:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (1.87 + llvm-tools)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          components: llvm-tools-preview,clippy,rustfmt
          cache: true

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev

      - name: Pre-flight check
        run: scripts/preflight.sh

      - name: Install cargo-llvm-cov
        id: install_llvm_cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Install cargo-nextest
        id: install_nextest
        run: cargo install cargo-nextest --locked

      - name: Run tests
        if: steps.install_nextest.outcome == 'success'
        run: cargo nextest run --workspace --no-fail-fast
      - name: Run tests (extended features)
        if: steps.install_nextest.outcome == 'success'
        run: cargo nextest run --workspace --no-fail-fast --features "cli nightly"
      - name: Test with coverage (95% lines & functions)
        if: steps.install_nextest.outcome == 'success' && steps.install_llvm_cov.outcome == 'success'
        run: cargo llvm-cov nextest --workspace --features "cli nightly" --fail-under-lines 95 --fail-under-functions 95 --html -- --no-fail-fast

      - name: Upload coverage report
        if: steps.install_nextest.outcome == 'success' && steps.install_llvm_cov.outcome == 'success'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: coverage-report
          files: coverage.lcov

  interop:
    needs: test-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (1.87)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev acl attr openssh-server rsync

      - name: Build oc-rsync (release)
        run: |
          cargo build --release --bin oc-rsync --features="acl xattr"
          mkdir -p target/debug
          cp target/release/oc-rsync target/debug/oc-rsync

      - name: Build upstream rsync 3.4.1
        run: echo "UPSTREAM_RSYNC=$(tests/interop/build_upstream.sh)" >> $GITHUB_ENV

      - name: Run interop matrix
        env:
          UPSTREAM_RSYNC: ${{ env.UPSTREAM_RSYNC }}
        run: tests/interop/run_matrix.sh

      - name: Install cargo-nextest
        run: cargo install cargo-nextest --locked

      - name: Run interop tests
        run: cargo nextest run --workspace --no-fail-fast --features "cli nightly interop" --run-ignored=only-tests
  build-matrix:
    needs: [lint, test-linux]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - name: macos-x86_64
            os: macos-13
            target: x86_64-apple-darwin
          - name: macos-aarch64
            os: macos-14
            target: aarch64-apple-darwin
          - name: windows-x86_64
            os: windows-2022
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (targeted)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          target: ${{ matrix.target }}
          cache: true

      - name: Install system dependencies (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --bin oc-rsync

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p dist
          BIN="target/${{ matrix.target }}/release/oc-rsync"
          OUT="dist/oc-rsync-${{ matrix.name }}"
          # Windows exe name
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BIN="target\\${{ matrix.target }}\\release\\oc-rsync.exe"
            OUT="dist/oc-rsync-${{ matrix.name }}.exe"
            mkdir -p dist
            cp "$BIN" "$OUT"
            certutil -hashfile "$OUT" SHA256 > "dist/oc-rsync-${{ matrix.name }}.sha256"
          else
            cp "$BIN" "$OUT"
            (sha256sum "$OUT" || shasum -a 256 "$OUT") > "dist/oc-rsync-${{ matrix.name }}.sha256"
          fi

          # SBOM (CycloneDX)
          cargo install cyclonedx-rust-cargo || true
          cyclonedx-rust-cargo --output "dist/oc-rsync-${{ matrix.name }}-sbom.json"

      - uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.name }}
          path: dist

  package-linux:
    needs: [test-linux, build-matrix]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust (1.87)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87
          cache: true

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libzstd-dev zlib1g-dev libacl1-dev

      - name: Install packaging tools
        run: cargo install cargo-deb cargo-rpm || true

      - name: Install cyclonedx-rust-cargo
        run: cargo install cyclonedx-rust-cargo || true

      - name: Display workspace metadata
        run: cargo metadata --format-version 1 --no-deps | jq '.workspace_metadata.oc_rsync'

      - name: Build packages
        run: |
          cargo deb -p oc-rsync
          cargo rpm build --release

      - name: Generate SBOM
        run: |
          mkdir -p target/sbom
          cyclonedx-rust-cargo --output target/sbom/oc-rsync.cdx.json

      - uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-packages
          path: |
            target/debian/*.deb
            target/release/rpms/*.rpm
            target/sbom/oc-rsync.cdx.json
            
