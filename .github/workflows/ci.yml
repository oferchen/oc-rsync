name: CI

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      long-fuzz:
        description: "Run longer fuzzing"
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use-cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            use-cross: true
          - os: macos-latest
            use-cross: false
          - os: windows-latest
            use-cross: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
        if: matrix.use-cross == true
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
        if: matrix.use-cross == false
      - run: rustup component add rustfmt clippy
      - name: Install cross
        if: matrix.use-cross == true
        run: cargo install cross --locked
      - name: Install cargo-fuzz
        if: matrix.os != 'windows-latest' && matrix.use-cross == false
        run: |
          cargo install cargo-fuzz --locked
          rustup toolchain install nightly
      - name: Generate flag matrix
        run: |
          cargo run --bin flag_matrix
          git diff --exit-code tools/flag_matrix.md tools/flag_matrix.json
      - name: Install pandoc
        if: matrix.os == 'ubuntu-latest' && matrix.use-cross == false
        run: sudo apt-get update && sudo apt-get install -y pandoc
      - name: Generate manpages
        if: matrix.os == 'ubuntu-latest' && matrix.use-cross == false
        run: |
          bash scripts/generate-manpages.sh
          git diff --exit-code man
      - name: Verify comments
        if: matrix.use-cross == false
        run: make verify-comments
      - name: Format
        run: cargo fmt --all --check
      - name: Clippy
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross clippy --all-targets --all-features --target ${{ matrix.target }} -- -D warnings
          else
            cargo clippy --all-targets --all-features -- -D warnings
          fi
      - name: Tests
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross test --all --features blake3 --target ${{ matrix.target }}
          else
            cargo test --all --features blake3
          fi
      - name: Golden parity tests
        if: matrix.use-cross == false && matrix.os != 'windows-latest'
        run: make test-golden
      - name: Interop tests
        if: matrix.os == 'ubuntu-latest' && matrix.use-cross == false
        run: bash scripts/interop.sh
      - name: Fuzz smoke test
        if: matrix.os != 'windows-latest' && matrix.use-cross == false
        run: |
          timeout 60s cargo +nightly fuzz run protocol_frame_decode_fuzz -- -max_total_time=30
          timeout 60s cargo +nightly fuzz run filter_parser -- -max_total_time=30
          timeout 60s cargo +nightly fuzz run filters_parse_fuzz -- -max_total_time=30
          timeout 60s cargo +nightly fuzz run filters -- -max_total_time=30
          timeout 60s cargo +nightly fuzz run dirent_parser -- -max_total_time=30
          timeout 60s cargo +nightly fuzz run daemon_auth_token_parser -- -max_total_time=30

      - name: Compression negotiation tests
        if: matrix.os == 'ubuntu-latest' && matrix.use-cross == false
        run: bash tests/compression_negotiation.sh

      - name: Daemon authentication tests
        if: matrix.os == 'ubuntu-latest' && matrix.use-cross == false
        run: bash tests/daemon_auth.sh

      - name: Advanced filter tests
        if: matrix.use-cross == false && matrix.os != 'windows-latest'
        run: bash tests/filter_rule_precedence.sh

      - name: Remote-to-remote tests
        if: matrix.use-cross == false && matrix.os != 'windows-latest'
        run: cargo test --test remote_remote --features blake3

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use-cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            use-cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install cross
        if: matrix.use-cross == true
        run: cargo install cross --locked
      - name: Build release binary
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --bin oc-rsync --features blake3
          else
            cargo build --release --target ${{ matrix.target }} --bin oc-rsync --features blake3
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: oc-rsync-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/oc-rsync

  fuzz:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: cargo install cargo-fuzz --locked
      - name: Run fuzzers
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event.inputs.long-fuzz }}" = "true" ]; then
            FUZZ_TIME=3600
          else
            FUZZ_TIME=600
          fi
          for target in $(cargo +nightly fuzz list); do
            cargo +nightly fuzz run "$target" -- -max_total_time=$FUZZ_TIME
          done

  interop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Remote-to-remote tests
        run: cargo test --test remote_remote --features blake3
      - name: Modern mode interop
        run: cargo test --test modern --features blake3
      - name: Run interop matrix
        run: bash tests/interop/run_matrix.sh
