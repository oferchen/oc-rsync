.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.SH Daemon Mode
.PP
\f[V]oc-rsync\f[R] can act as a standalone daemon that listens on TCP
port 873 and serves one or more exported modules.
The daemon is started with \f[V]--daemon\f[R] and at least one
\f[V]--module\f[R] declaration of the form \f[V]name=path\f[R].
.PP
The default listener binds to all IPv4 interfaces on port 873.
Supply \f[V]--port\f[R] to choose a different port.
The \f[V]-4\f[R] and \f[V]-6\f[R] flags restrict the listener to IPv4 or
IPv6 addresses respectively.
These can be combined with \f[V]--address\f[R] to bind a specific
interface.
.SS \f[V]oc-rsyncd\f[R]
.PP
A dedicated \f[V]oc-rsyncd\f[R] binary ships alongside the main CLI and
enables daemon mode without remembering \f[V]--daemon\f[R].
It is functionally equivalent to invoking \f[V]oc-rsync --daemon\f[R]
and exposes the same flags.
.IP
.nf
\f[C]
$ oc-rsyncd --help
Usage: oc-rsyncd [OPTIONS] --module NAME=PATH...

Options:
  --config <FILE>        Load daemon configuration
  --module <NAME=PATH>   Export a module (repeatable)
  --address <ADDRESS>    Bind to a specific interface
  --port <PORT>          Listen on a custom TCP port
  --secrets-file <FILE>  Authentication tokens
  --no-detach            Stay in the foreground
\f[R]
.fi
.PP
Common invocations:
.IP
.nf
\f[C]
# Inline module definition
oc-rsyncd --module \[aq]data=/srv/export\[aq]

# Load modules from a config file
oc-rsyncd --config /etc/oc-rsyncd.conf
\f[R]
.fi
.PP
The configuration syntax is documented in \f[V]oc-rsyncd.conf(5)\f[R].
A hardened systemd unit is available under
\f[V]packaging/systemd/oc-rsyncd.service\f[R].
.PP
The \f[V]oc-rsync\f[R] client can also launch the daemon directly:
.IP
.nf
\f[C]
oc-rsync --daemon --module \[aq]data=/srv/export\[aq]
\f[R]
.fi
.SS Configuration file
.PP
\f[V]oc-rsync\f[R] understands a configuration file that mirrors
\f[V]rsyncd.conf(5)\f[R] (https://download.samba.org/pub/rsync/rsyncd.conf.html).
Pass \f[V]--config /path/to/rsyncd.conf\f[R] to the daemon and declare
global options and modules inside.
Keys are case insensitive and accept spaces, dashes, or underscores
interchangeably:
.IP
.nf
\f[C]
port = 8730
motd-file = /etc/oc-rsyncd.motd

[data]
    path = /srv/export
    hosts-allow = 192.0.2.1
\f[R]
.fi
.PP
Each module requires a \f[V]path\f[R] directive which is resolved and
canonicalised at startup.
Unknown directives are ignored for now but using the canonical names
from \f[V]rsyncd.conf(5)\f[R] ensures forward compatibility.
.SS Example packaging
.PP
Sample files for running the daemon are provided under
\f[V]packaging/\f[R] and are included in release artifacts:
.IP \[bu] 2
\f[V]packaging/examples/oc-rsyncd.conf\f[R] \[en] example configuration
file
.IP \[bu] 2
\f[V]packaging/systemd/oc-rsyncd.service\f[R] \[en] systemd service unit
.SS systemd hardening
.PP
The bundled \f[V]oc-rsyncd.service\f[R] applies systemd sandboxing
features to reduce attack surface.
It enables \f[V]NoNewPrivileges=yes\f[R], mounts the host filesystem
read-only with \f[V]ProtectSystem=strict\f[R], hides user home
directories via \f[V]ProtectHome=true\f[R], and restarts on failure
after a short delay with \f[V]Restart=on-failure\f[R] and
\f[V]RestartSec=2s\f[R].
The unit grants only the \f[V]CAP_NET_BIND_SERVICE\f[R] capability via
\f[V]CapabilityBoundingSet\f[R]/\f[V]AmbientCapabilities\f[R] and writes
its PID and log to \f[V]/run/oc-rsyncd.pid\f[R] and
\f[V]/var/log/oc-rsyncd.log\f[R].
These settings may be relaxed if the daemon requires additional
privileges.
.SS Module setup
.PP
Modules map a name to a directory on disk.
Each module is supplied on the command line:
.IP
.nf
\f[C]
oc-rsync --daemon --module \[aq]data=/srv/export\[aq]
\f[R]
.fi
.PP
The integration tests spawn a daemon in exactly this manner when
negotiating protocol versions.
.SS Secrets-file authentication
.PP
If the daemon finds an \f[V]auth\f[R] file in its working directory,
clients must supply a matching token.
The secrets file path can be overridden with \f[V]--secrets-file\f[R].
The file must be readable only by the daemon user (mode \f[V]0600\f[R]
on Unix) and may list optional modules a token is permitted to access:
.IP
.nf
\f[C]
$ cat auth
s3cr3t data backups
\f[R]
.fi
.PP
During the handshake the client sends the token followed by a newline.
The test suite demonstrates that an invalid token is rejected with an
\f[V]\[at]ERROR\f[R] message.
Tokens without an explicit module list allow access to any module.
.SS Numeric ID handling
.PP
By default \f[V]oc-rsync\f[R] maps user and group names when
transferring ownership metadata.
Supplying \f[V]--numeric-ids\f[R] disables this mapping and preserves
raw UID and GID values during synchronization.
This flag applies equally in daemon mode and when invoking a client:
.IP
.nf
\f[C]
oc-rsync --daemon --numeric-ids --module \[aq]data=/srv/export\[aq]
\f[R]
.fi
.SS Ownership and permissions
.PP
Setting file ownership or groups requires elevated privileges.
The daemon must run as \f[V]root\f[R] or possess the \f[V]CAP_CHOWN\f[R]
capability in order to honor the \f[V]--owner\f[R], \f[V]--group\f[R],
or \f[V]--chown\f[R] flags from clients.
Without these capabilities the daemon will silently retain its current
UID and GID when creating files, and ownership requests from clients
will be ignored.
.SS Chroot and privilege drop
.PP
Before serving files the daemon confines itself to the module root.
On Unix platforms it performs a \f[V]chroot\f[R] to the module path,
changes its working directory to \f[V]/\f[R], and drops privileges to a
less privileged user and group (UID/GID 65534 by default).
The \f[V]uid\f[R] and \f[V]gid\f[R] module directives may override the
default IDs for specific exports.
.PP
Unit tests exercising this chroot and privilege-dropping behavior
require root privileges.
When run as an unprivileged user these tests are skipped, so CI
environments must provide sufficient permissions to execute them.
.SS Hosts allow/deny lists
.PP
The daemon can restrict connections based on client address.
The \f[V]--hosts-allow\f[R] and \f[V]--hosts-deny\f[R] flags accept
comma separated IP addresses.
A client must match the allow list (if supplied) and must not match the
deny list:
.IP
.nf
\f[C]
oc-rsync --daemon \[rs]
    --module \[aq]logs=/srv/logs\[aq] \[rs]
    --hosts-allow=127.0.0.1 \[rs]
    --hosts-deny=*
\f[R]
.fi
.PP
Clients whose address does not satisfy these rules are disconnected
before any authentication takes place.
.PP
Per-module allow and deny lists may also be specified in a configuration
file:
.IP
.nf
\f[C]
[data]
path = /srv/data
hosts allow = 192.0.2.10
hosts deny = 192.0.2.20
\f[R]
.fi
.PP
These rules are evaluated after the global lists.
Module entries allow fine grained control when different exports require
distinct access policies.
.SS Logging
.PP
Supply \f[V]--log-file\f[R] to record daemon activity.
The optional \f[V]--log-file-format\f[R] flag controls the line format
and supports \f[V]%h\f[R] for the client host and \f[V]%m\f[R] for the
requested module:
.IP
.nf
\f[C]
oc-rsync --daemon --module \[aq]data=/srv/export\[aq] \[rs]
    --log-file=/var/log/rsyncd.log \[rs]
    --log-file-format=\[dq]%h %m\[dq]
\f[R]
.fi
.SS Message of the day
.PP
Use \f[V]--motd\f[R] to display a message of the day to connecting
clients.
Each line in the file is sent with the \f[V]\[at]RSYNCD:\f[R] prefix
during the handshake.
Clients can suppress this output with the \f[V]--no-motd\f[R] flag:
.IP
.nf
\f[C]
oc-rsync --no-motd \[aq]rsync://host/module\[aq] \[aq]dest/\[aq]
\f[R]
.fi
