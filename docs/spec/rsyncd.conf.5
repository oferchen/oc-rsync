.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.SS NAME
.PP
rsyncd.conf - configuration file for rsync in daemon mode
.SS SYNOPSIS
.PP
rsyncd.conf
.PP
The online version of this manpage (that includes cross-linking of
topics) is available at
<https://download.samba.org/pub/rsync/rsyncd.conf.5>.
.SS DESCRIPTION
.PP
The rsyncd.conf file is the runtime configuration file for rsync when
run as an rsync daemon.
.PP
The rsyncd.conf file controls authentication, access, logging and
available modules.
.SS FILE FORMAT
.PP
The file consists of modules and parameters.
A module begins with the name of the module in square brackets and
continues until the next module begins.
Modules contain parameters of the form \f[V]name = value\f[R].
.PP
The file is line-based \[en] that is, each newline-terminated line
represents either a comment, a module name or a parameter.
.PP
Only the first equals sign in a parameter is significant.
Whitespace before or after the first equals sign is discarded.
Leading, trailing and internal whitespace in module and parameter names
is irrelevant.
Leading and trailing whitespace in a parameter value is discarded.
Internal whitespace within a parameter value is retained verbatim.
.PP
Any line \f[B]beginning\f[R] with a hash (\f[V]#\f[R]) is ignored, as
are lines containing only whitespace.
(If a hash occurs after anything other than leading whitespace, it is
considered a part of the line\[cq]s content.)
.PP
Any line ending in a \f[V]\[rs]\f[R] is \[lq]continued\[rq] on the next
line in the customary UNIX fashion.
.PP
The values following the equals sign in parameters are all either a
string (no quotes needed) or a boolean, which may be given as yes/no,
0/1 or true/false.
Case is not significant in boolean values, but is preserved in string
values.
.SS LAUNCHING THE RSYNC DAEMON
.PP
The rsync daemon is launched by specifying the \f[V]--daemon\f[R] option
to rsync.
.PP
The daemon must run with root privileges if you wish to use chroot, to
bind to a port numbered under 1024 (as is the default 873), or to set
file ownership.
Otherwise, it must just have permission to read and write the
appropriate data, log, and lock files.
.PP
You can launch it either via inetd, as a stand-alone daemon, or from an
rsync client via a remote shell.
If run as a stand-alone daemon then just run the command
\[lq]\f[V]rsync --daemon\f[R]\[rq] from a suitable startup script.
.PP
When run via inetd you should add a line like this to /etc/services:
.RS
.IP
.nf
\f[C]
rsync           873/tcp
\f[R]
.fi
.RE
.PP
and a single line something like this to /etc/inetd.conf:
.RS
.IP
.nf
\f[C]
rsync   stream  tcp     nowait  root   \[at]BINDIR\[at]/rsync rsyncd --daemon
\f[R]
.fi
.RE
.PP
Replace \[lq]\[at]BINDIR\[at]/rsync\[rq] with the path to where you have
rsync installed on your system.
You will then need to send inetd a HUP signal to tell it to reread its
config file.
.PP
Note that you should \f[B]not\f[R] send the rsync daemon a HUP signal to
force it to reread the \f[V]rsyncd.conf\f[R] file.
The file is re-read on each client connection.
.SS GLOBAL PARAMETERS
.PP
The first parameters in the file (before a [module] header) are the
global parameters:
.IP "0." 3
\f[V]motd file\f[R]
.RS 4
.PP
This parameter allows you to specify a \[lq]message of the day\[rq]
(MOTD) to display to clients on each connect.
This usually contains site information and any legal notices.
The default is no MOTD file.
This can be overridden by the \f[V]--dparam=motdfile=FILE\f[R]
command-line option when starting the daemon.
.RE
.IP "1." 3
\f[V]pid file\f[R]
.RS 4
.PP
This parameter tells the rsync daemon to write its process ID to that
file.
The rsync keeps the file locked so that it can know when it is safe to
overwrite an existing file.
.PP
The filename can be overridden by the \f[V]--dparam=pidfile=FILE\f[R]
command-line option when starting the daemon.
.RE
.IP "2." 3
\f[V]port\f[R]
.RS 4
.PP
You can override the default port the daemon will listen on by
specifying this value (defaults to 873).
This is ignored if the daemon is being run by inetd, and is superseded
by the \f[V]--port\f[R] command-line option.
.RE
.IP "3." 3
\f[V]address\f[R]
.RS 4
.PP
You can override the default IP address the daemon will listen on by
specifying this value.
This is ignored if the daemon is being run by inetd, and is superseded
by the \f[V]--address\f[R] command-line option.
.RE
.IP "4." 3
\f[V]socket options\f[R]
.RS 4
.PP
This parameter can provide endless fun for people who like to tune their
systems to the utmost degree.
You can set all sorts of socket options which may make transfers faster
(or slower!).
Read the manpage for the \f[B]setsockopt()\f[R] system call for details
on some of the options you may be able to set.
By default no special socket options are set.
These settings can also be specified via the \f[V]--sockopts\f[R]
command-line option.
.RE
.IP "5." 3
\f[V]listen backlog\f[R]
.RS 4
.PP
You can override the default backlog value when the daemon listens for
connections.
It defaults to 5.
.RE
.PP
You may also include any MODULE PARAMETERS in the global part of the
config file, in which case the supplied value will override the default
for that parameter.
.PP
You may use references to environment variables in the values of
parameters.
String parameters will have %VAR% references expanded as late as
possible (when the string is first used in the program), allowing for
the use of variables that rsync sets at connection time, such as
RSYNC_USER_NAME.
Non-string parameters (such as true/false settings) are expanded when
read from the config file.
If a variable does not exist in the environment, or if a sequence of
characters is not a valid reference (such as an un-paired percent sign),
the raw characters are passed through unchanged.
This helps with backward compatibility and safety (e.g.\ expanding a
non-existent %VAR% to an empty string in a path could result in a very
unsafe path).
The safest way to insert a literal % into a value is to use %%.
.SS MODULE PARAMETERS
.PP
After the global parameters you should define a number of modules, each
module exports a directory tree as a symbolic name.
Modules are exported by specifying a module name in square brackets
[module] followed by the parameters for that module.
The module name cannot contain a slash or a closing square bracket.
If the name contains whitespace, each internal sequence of whitespace
will be changed into a single space, while leading or trailing
whitespace will be discarded.
.PP
There is also a special module name of \[lq][global]\[rq] that does not
define a module but instead switches back to the global settings context
where default parameters can be specified.
Because each defined module gets its full set of parameters as a
combination of the default values that are set at that position in the
config file plus its own parameter list, the use of a \[lq][global]\[rq]
section can help to maintain shared config values for multiple modules.
.PP
As with GLOBAL PARAMETERS, you may use references to environment
variables in the values of parameters.
See that section for details.
.IP " 0." 4
\f[V]comment\f[R]
.RS 4
.PP
This parameter specifies a description string that is displayed next to
the module name when clients obtain a list of available modules.
The default is no comment.
.RE
.IP " 1." 4
\f[V]path\f[R]
.RS 4
.PP
This parameter specifies the directory in the daemon\[cq]s filesystem to
make available in this module.
You must specify this parameter for each module in
\f[V]rsyncd.conf\f[R].
.PP
If the value contains a \[lq]/./\[rq] element then the path will be
divided at that point into a chroot dir and an inner-chroot subdir.
If \f[V]use chroot\f[R] is set to false, though, the extraneous dot dir
is just cleaned out of the path.
An example of this idiom is:
.RS
.IP
.nf
\f[C]
path = /var/rsync/./module1
\f[R]
.fi
.RE
.PP
This will (when chrooting) chroot to \[lq]/var/rsync\[rq] and set the
inside-chroot path to \[lq]/module1\[rq].
.PP
You may base the path\[cq]s value off of an environment variable by
surrounding the variable name with percent signs.
You can even reference a variable that is set by rsync when the user
connects.
For example, this would use the authorizing user\[cq]s name in the path:
.RS
.IP
.nf
\f[C]
path = /home/%RSYNC_USER_NAME%
\f[R]
.fi
.RE
.PP
It is fine if the path includes internal spaces \[en] they will be
retained verbatim (which means that you shouldn\[cq]t try to escape
them).
If your final directory has a trailing space (and this is somehow not
something you wish to fix), append a trailing slash to the path to avoid
losing the trailing whitespace.
.RE
.IP " 2." 4
\f[V]use chroot\f[R]
.RS 4
.PP
If \[lq]use chroot\[rq] is true, the rsync daemon will chroot to the
\[lq]path\[rq] before starting the file transfer with the client.
This has the advantage of extra protection against possible
implementation security holes, but it has the disadvantages of requiring
super-user privileges, of not being able to follow symbolic links that
are either absolute or outside of the new root path, and of complicating
the preservation of users and groups by name (see below).
.PP
If \f[V]use chroot\f[R] is not set, it defaults to trying to enable a
chroot but allows the daemon to continue (after logging a warning) if it
fails.
The one exception to this is when a module\[cq]s \f[V]path\f[R] has a
\[lq]/./\[rq] chroot divider in it \[en] this causes an unset value to
be treated as true for that module.
.PP
Prior to rsync 3.2.7, the default value was \[lq]true\[rq].
The new \[lq]unset\[rq] default makes it easier to setup an rsync daemon
as a non-root user or to run a daemon on a system where chroot fails.
Explicitly setting the value to \[lq]true\[rq] in rsyncd.conf will
always require the chroot to succeed.
.PP
It is also possible to specify a dot-dir in the module\[cq]s
\[lq]path\[rq] to indicate that you want to chdir to the earlier part of
the path and then serve files from inside the latter part of the path
(with sanitizing and default symlink munging).
This can be useful if you need some library dirs inside the chroot
(typically for uid & gid lookups) but don\[cq]t want to put the lib dir
into the top of the served path (even though they can be hidden with an
\f[V]exclude\f[R] directive).
However, a better choice for a modern rsync setup is to use a
\f[V]name converter\f[R]\[rq] and try to avoid inner lib dirs
altogether.
See also the \f[V]daemon chroot\f[R] parameter, which causes rsync to
chroot into its own chroot area before doing any path-related chrooting.
.PP
If the daemon is serving the \[lq]/\[rq] dir (either directly or due to
being chrooted to the module\[cq]s path), rsync does not do any path
sanitizing or (default) munging.
.PP
When it has to limit access to a particular subdir (either due to chroot
being disabled or having an inside-chroot path set), rsync will munge
symlinks (by default) and sanitize paths.
Those that dislike munged symlinks (and really, really trust their users
to not break out of the subdir) can disable the symlink munging via the
\[lq]munge symlinks\[rq] parameter.
.PP
When rsync is sanitizing paths, it trims \[lq]..\[rq] path elements from
args that it believes would escape the module hierarchy.
It also substitutes leading slashes in absolute paths with the
module\[cq]s path (so that options such as \f[V]--backup-dir\f[R] &
\f[V]--compare-dest\f[R] interpret an absolute path as rooted in the
module\[cq]s \[lq]path\[rq] dir).
.PP
When a chroot is in effect \f[I]and\f[R] the \[lq]name converter\[rq]
parameter is \f[I]not\f[R] set, the \[lq]numeric ids\[rq] parameter will
default to being enabled (disabling name lookups).
This means that if you manually setup name-lookup libraries in your
chroot (instead of using a name converter) that you need to explicitly
set \f[V]numeric ids = false\f[R] for rsync to do name lookups.
.PP
If you copy library resources into the module\[cq]s chroot area, you
should protect them through your OS\[cq]s normal user/group or ACL
settings (to prevent the rsync module\[cq]s user from being able to
change them), and then hide them from the user\[cq]s view via
\[lq]exclude\[rq] (see how in the discussion of that parameter).
However, it\[cq]s easier and safer to setup a name converter.
.RE
.IP " 3." 4
\f[V]daemon chroot\f[R]
.RS 4
.PP
This parameter specifies a path to which the daemon will chroot before
beginning communication with clients.
Module paths (and any \[lq]use chroot\[rq] settings) will then be
related to this one.
This lets you choose if you want the whole daemon to be chrooted (with
this setting), just the transfers to be chrooted (with \[lq]use
chroot\[rq]), or both.
Keep in mind that the \[lq]daemon chroot\[rq] area may need various
OS/lib/etc files installed to allow the daemon to function.
By default the daemon runs without any chrooting.
.RE
.IP " 4." 4
\f[V]proxy protocol\f[R]
.RS 4
.PP
When this parameter is enabled, all incoming connections must start with
a V1 or V2 proxy protocol header.
If the header is not found, the connection is closed.
.PP
Setting this to \f[V]true\f[R] requires a proxy server to forward source
IP information to rsync, allowing you to log proper IP/host info and
make use of client-oriented IP restrictions.
The default of \f[V]false\f[R] means that the IP information comes
directly from the socket\[cq]s metadata.
If rsync is not behind a proxy, this should be disabled.
.PP
\f[I]CAUTION\f[R]: using this option can be dangerous if you do not
ensure that only the proxy is allowed to connect to the rsync port.
If any non-proxied connections are allowed through, the client will be
able to use a modified rsync to spoof any remote IP address that they
desire.
You can lock this down using something like iptables
\f[V]-uid-owner root\f[R] rules (for strict localhost access), various
firewall rules, or you can require password authorization so that any
spoofing by users will not grant extra access.
.PP
This setting is global.
If you need some modules to require this and not others, then you will
need to setup multiple rsync daemon processes on different ports.
.RE
.IP " 5." 4
\f[V]name converter\f[R]
.RS 4
.PP
This parameter lets you specify a program that will be run by the rsync
daemon to do user & group conversions between names & ids.
This script is started prior to any chroot being setup, and runs as the
daemon user (not the transfer user).
You can specify a fully qualified pathname or a program name that is on
the $PATH.
.PP
The program can be used to do normal user & group lookups without having
to put any extra files into the chroot area of the module \f[I]or\f[R]
you can do customized conversions.
.PP
The nameconvert program has access to all of the environment variables
that are described in the section on \f[V]pre-xfer exec\f[R].
This is useful if you want to customize the conversion using information
about the module and/or the copy request.
.PP
There is a sample python script in the support dir named
\[lq]nameconvert\[rq] that implements the normal user & group lookups.
Feel free to customize it or just use it as documentation to implement
your own.
.RE
.IP " 6." 4
\f[V]numeric ids\f[R]
.RS 4
.PP
Enabling this parameter disables the mapping of users and groups by name
for the current daemon module.
This prevents the daemon from trying to load any user/group-related
files or libraries.
This enabling makes the transfer behave as if the client had passed the
\f[V]--numeric-ids\f[R] command-line option.
By default, this parameter is enabled for chroot modules and disabled
for non-chroot modules.
Also keep in mind that uid/gid preservation requires the module to be
running as root (see \[lq]uid\[rq]) or for \[lq]fake super\[rq] to be
configured.
.PP
A chroot-enabled module should not have this parameter set to false
unless you\[cq]re using a \[lq]name converter\[rq] program \f[I]or\f[R]
you\[cq]ve taken steps to ensure that the module has the necessary
resources it needs to translate names and that it is not possible for a
user to change those resources.
.RE
.IP " 7." 4
\f[V]munge symlinks\f[R]
.RS 4
.PP
This parameter tells rsync to modify all symlinks in the same way as the
(non-daemon-affecting) \f[V]--munge-links\f[R] command-line option
(using a method described below).
This should help protect your files from user trickery when your daemon
module is writable.
The default is disabled when \[lq]use chroot\[rq] is on with an
inside-chroot path of \[lq]/\[rq], OR if \[lq]daemon chroot\[rq] is on,
otherwise it is enabled.
.PP
If you disable this parameter on a daemon that is not read-only, there
are tricks that a user can play with uploaded symlinks to access
daemon-excluded items (if your module has any), and, if \[lq]use
chroot\[rq] is off, rsync can even be tricked into showing or changing
data that is outside the module\[cq]s path (as access-permissions
allow).
.PP
The way rsync disables the use of symlinks is to prefix each one with
the string \[lq]/rsyncd-munged/\[rq].
This prevents the links from being used as long as that directory does
not exist.
When this parameter is enabled, rsync will refuse to run if that path is
a directory or a symlink to a directory.
When using the \[lq]munge symlinks\[rq] parameter in a chroot area that
has an inside-chroot path of \[lq]/\[rq], you should add
\[lq]/rsyncd-munged/\[rq] to the exclude setting for the module so that
a user can\[cq]t try to create it.
.PP
Note: rsync makes no attempt to verify that any pre-existing symlinks in
the module\[cq]s hierarchy are as safe as you want them to be (unless,
of course, it just copied in the whole hierarchy).
If you setup an rsync daemon on a new area or locally add symlinks, you
can manually protect your symlinks from being abused by prefixing
\[lq]/rsyncd-munged/\[rq] to the start of every symlink\[cq]s value.
There is a perl script in the support directory of the source code named
\[lq]munge-symlinks\[rq] that can be used to add or remove this prefix
from your symlinks.
.PP
When this parameter is disabled on a writable module and \[lq]use
chroot\[rq] is off (or the inside-chroot path is not \[lq]/\[rq]),
incoming symlinks will be modified to drop a leading slash and to remove
\[lq]..\[rq] path elements that rsync believes will allow a symlink to
escape the module\[cq]s hierarchy.
There are tricky ways to work around this, though, so you had better
trust your users if you choose this combination of parameters.
.RE
.IP " 8." 4
\f[V]charset\f[R]
.RS 4
.PP
This specifies the name of the character set in which the module\[cq]s
filenames are stored.
If the client uses an \f[V]--iconv\f[R] option, the daemon will use the
value of the \[lq]charset\[rq] parameter regardless of the character set
the client actually passed.
This allows the daemon to support charset conversion in a chroot module
without extra files in the chroot area, and also ensures that
name-translation is done in a consistent manner.
If the \[lq]charset\[rq] parameter is not set, the \f[V]--iconv\f[R]
option is refused, just as if \[lq]iconv\[rq] had been specified via
\[lq]refuse options\[rq].
.PP
If you wish to force users to always use \f[V]--iconv\f[R] for a
particular module, add \[lq]no-iconv\[rq] to the \[lq]refuse
options\[rq] parameter.
Keep in mind that this will restrict access to your module to very new
rsync clients.
.RE
.IP " 9." 4
\f[V]max connections\f[R]
.RS 4
.PP
This parameter allows you to specify the maximum number of simultaneous
connections you will allow.
Any clients connecting when the maximum has been reached will receive a
message telling them to try later.
The default is 0, which means no limit.
A negative value disables the module.
See also the \[lq]lock file\[rq] parameter.
.RE
.IP "10." 4
\f[V]log file\f[R]
.RS 4
.PP
When the \[lq]log file\[rq] parameter is set to a non-empty string, the
rsync daemon will log messages to the indicated file rather than using
syslog.
This is particularly useful on systems (such as AIX) where
\f[B]syslog()\f[R] doesn\[cq]t work for chrooted programs.
The file is opened before \f[B]chroot()\f[R] is called, allowing it to
be placed outside the transfer.
If this value is set on a per-module basis instead of globally, the
global log will still contain any authorization failures or config-file
error messages.
.PP
If the daemon fails to open the specified file, it will fall back to
using syslog and output an error about the failure.
(Note that the failure to open the specified log file used to be a fatal
error.)
.PP
This setting can be overridden by using the \f[V]--log-file=FILE\f[R] or
\f[V]--dparam=logfile=FILE\f[R] command-line options.
The former overrides all the log-file parameters of the daemon and all
module settings.
The latter sets the daemon\[cq]s log file and the default for all the
modules, which still allows modules to override the default setting.
.RE
.IP "11." 4
\f[V]syslog facility\f[R]
.RS 4
.PP
This parameter allows you to specify the syslog facility name to use
when logging messages from the rsync daemon.
You may use any standard syslog facility name which is defined on your
system.
Common names are auth, authpriv, cron, daemon, ftp, kern, lpr, mail,
news, security, syslog, user, uucp, local0, local1, local2, local3,
local4, local5, local6 and local7.
The default is daemon.
This setting has no effect if the \[lq]log file\[rq] setting is a
non-empty string (either set in the per-modules settings, or inherited
from the global settings).
.RE
.IP "12." 4
\f[V]syslog tag\f[R]
.RS 4
.PP
This parameter allows you to specify the syslog tag to use when logging
messages from the rsync daemon.
The default is \[lq]rsyncd\[rq].
This setting has no effect if the \[lq]log file\[rq] setting is a
non-empty string (either set in the per-modules settings, or inherited
from the global settings).
.PP
For example, if you wanted each authenticated user\[cq]s name to be
included in the syslog tag, you could do something like this:
.RS
.IP
.nf
\f[C]
syslog tag = rsyncd.%RSYNC_USER_NAME%
\f[R]
.fi
.RE
.RE
.IP "13." 4
\f[V]max verbosity\f[R]
.RS 4
.PP
This parameter allows you to control the maximum amount of verbose
information that you\[cq]ll allow the daemon to generate (since the
information goes into the log file).
The default is 1, which allows the client to request one level of
verbosity.
.PP
This also affects the user\[cq]s ability to request higher levels of
\f[V]--info\f[R] and \f[V]--debug\f[R] logging.
If the max value is 2, then no info and/or debug value that is higher
than what would be set by \f[V]-vv\f[R] will be honored by the daemon in
its logging.
To see how high of a verbosity level you need to accept for a particular
info/debug level, refer to \f[V]rsync --info=help\f[R] and
\f[V]rsync --debug=help\f[R].
For instance, it takes max-verbosity 4 to be able to output debug TIME2
and FLIST3.
.RE
.IP "14." 4
\f[V]lock file\f[R]
.RS 4
.PP
This parameter specifies the file to use to support the \[lq]max
connections\[rq] parameter.
The rsync daemon uses record locking on this file to ensure that the max
connections limit is not exceeded for the modules sharing the lock file.
The default is \f[V]/var/run/rsyncd.lock\f[R].
.RE
.IP "15." 4
\f[V]read only\f[R]
.RS 4
.PP
This parameter determines whether clients will be able to upload files
or not.
If \[lq]read only\[rq] is true then any attempted uploads will fail.
If \[lq]read only\[rq] is false then uploads will be possible if file
permissions on the daemon side allow them.
The default is for all modules to be read only.
.PP
Note that \[lq]auth users\[rq] can override this setting on a per-user
basis.
.RE
.IP "16." 4
\f[V]write only\f[R]
.RS 4
.PP
This parameter determines whether clients will be able to download files
or not.
If \[lq]write only\[rq] is true then any attempted downloads will fail.
If \[lq]write only\[rq] is false then downloads will be possible if file
permissions on the daemon side allow them.
The default is for this parameter to be disabled.
.PP
Helpful hint: you probably want to specify \[lq]refuse options =
delete\[rq] for a write-only module.
.RE
.IP "17." 4
\f[V]open noatime\f[R]
.RS 4
.PP
When set to True, this parameter tells the rsync daemon to open files
with the O_NOATIME flag (on systems that support it) to avoid changing
the access time of the files that are being transferred.
If your OS does not support the O_NOATIME flag then rsync will silently
ignore this option.
Note also that some filesystems are mounted to avoid updating the atime
on read access even without the O_NOATIME flag being set.
.PP
When set to False, this parameters ensures that files on the server are
not opened with O_NOATIME.
.PP
When set to Unset (the default) the user controls the setting via
\f[V]--open-noatime\f[R].
.RE
.IP "18." 4
\f[V]list\f[R]
.RS 4
.PP
This parameter determines whether this module is listed when the client
asks for a listing of available modules.
In addition, if this is false, the daemon will pretend the module does
not exist when a client denied by \[lq]hosts allow\[rq] or \[lq]hosts
deny\[rq] attempts to access it.
Realize that if \[lq]reverse lookup\[rq] is disabled globally but
enabled for the module, the resulting reverse lookup to a potentially
client-controlled DNS server may still reveal to the client that it hit
an existing module.
The default is for modules to be listable.
.RE
.IP "19." 4
\f[V]uid\f[R]
.RS 4
.PP
This parameter specifies the user name or user ID that file transfers to
and from that module should take place as when the daemon was run as
root.
In combination with the \[lq]gid\[rq] parameter this determines what
file permissions are available.
The default when run by a super-user is to switch to the system\[cq]s
\[lq]nobody\[rq] user.
The default for a non-super-user is to not try to change the user.
See also the \[lq]gid\[rq] parameter.
.PP
The RSYNC_USER_NAME environment variable may be used to request that
rsync run as the authorizing user.
For example, if you want a rsync to run as the same user that was
received for the rsync authentication, this setup is useful:
.RS
.IP
.nf
\f[C]
uid = %RSYNC_USER_NAME%
gid = *
\f[R]
.fi
.RE
.RE
.IP "20." 4
\f[V]gid\f[R]
.RS 4
.PP
This parameter specifies one or more group names/IDs that will be used
when accessing the module.
The first one will be the default group, and any extra ones be set as
supplemental groups.
You may also specify a \[lq]\f[V]*\f[R]\[rq] as the first gid in the
list, which will be replaced by all the normal groups for the
transfer\[cq]s user (see \[lq]uid\[rq]).
The default when run by a super-user is to switch to your OS\[cq]s
\[lq]nobody\[rq] (or perhaps \[lq]nogroup\[rq]) group with no other
supplementary groups.
The default for a non-super-user is to not change any group attributes
(and indeed, your OS may not allow a non-super-user to try to change
their group settings).
.PP
The specified list is normally split into tokens based on spaces and
commas.
However, if the list starts with a comma, then the list is only split on
commas, which allows a group name to contain a space.
In either case any leading and/or trailing whitespace is removed from
the tokens and empty tokens are ignored.
.RE
.IP "21." 4
\f[V]daemon uid\f[R]
.RS 4
.PP
This parameter specifies a uid under which the daemon will run.
The daemon usually runs as user root, and when this is left unset the
user is left unchanged.
See also the \[lq]uid\[rq] parameter.
.RE
.IP "22." 4
\f[V]daemon gid\f[R]
.RS 4
.PP
This parameter specifies a gid under which the daemon will run.
The daemon usually runs as group root, and when this is left unset, the
group is left unchanged.
See also the \[lq]gid\[rq] parameter.
.RE
.IP "23." 4
\f[V]fake super\f[R]
.RS 4
.PP
Setting \[lq]fake super = yes\[rq] for a module causes the daemon side
to behave as if the \f[V]--fake-super\f[R] command-line option had been
specified.
This allows the full attributes of a file to be stored without having to
have the daemon actually running as root.
.RE
.IP "24." 4
\f[V]filter\f[R]
.RS 4
.PP
The daemon has its own filter chain that determines what files it will
let the client access.
This chain is not sent to the client and is independent of any filters
the client may have specified.
Files excluded by the daemon filter chain (\f[V]daemon-excluded\f[R]
files) are treated as non-existent if the client tries to pull them, are
skipped with an error message if the client tries to push them
(triggering exit code 23), and are never deleted from the module.
You can use daemon filters to prevent clients from downloading or
tampering with private administrative files, such as files you may add
to support uid/gid name translations.
.PP
The daemon filter chain is built from the \[lq]filter\[rq], \[lq]include
from\[rq], \[lq]include\[rq], \[lq]exclude from\[rq], and
\[lq]exclude\[rq] parameters, in that order of priority.
Anchored patterns are anchored at the root of the module.
To prevent access to an entire subtree, for example,
\[lq]\f[V]/secret\f[R]\[rq], you \f[B]must\f[R] exclude everything in
the subtree; the easiest way to do this is with a triple-star pattern
like \[lq]\f[V]/secret/***\f[R]\[rq].
.PP
The \[lq]filter\[rq] parameter takes a space-separated list of daemon
filter rules, though it is smart enough to know not to split a token at
an internal space in a rule (e.g.\ \[lq]\f[V]- /foo  - /bar\f[R]\[rq] is
parsed as two rules).
You may specify one or more merge-file rules using the normal syntax.
Only one \[lq]filter\[rq] parameter can apply to a given module in the
config file, so put all the rules you want in a single parameter.
Note that per-directory merge-file rules do not provide as much
protection as global rules, but they can be used to make
\f[V]--delete\f[R] work better during a client download operation if the
per-dir merge files are included in the transfer and the client requests
that they be used.
.RE
.IP "25." 4
\f[V]exclude\f[R]
.RS 4
.PP
This parameter takes a space-separated list of daemon exclude patterns.
As with the client \f[V]--exclude\f[R] option, patterns can be qualified
with \[lq]\f[V]-\f[R]\[rq] or \[lq]\f[V]+\f[R]\[rq] to explicitly
indicate exclude/include.
Only one \[lq]exclude\[rq] parameter can apply to a given module.
See the \[lq]filter\[rq] parameter for a description of how excluded
files affect the daemon.
.RE
.IP "26." 4
\f[V]include\f[R]
.RS 4
.PP
Use an \[lq]include\[rq] to override the effects of the
\[lq]exclude\[rq] parameter.
Only one \[lq]include\[rq] parameter can apply to a given module.
See the \[lq]filter\[rq] parameter for a description of how excluded
files affect the daemon.
.RE
.IP "27." 4
\f[V]exclude from\f[R]
.RS 4
.PP
This parameter specifies the name of a file on the daemon that contains
daemon exclude patterns, one per line.
Only one \[lq]exclude from\[rq] parameter can apply to a given module;
if you have multiple exclude-from files, you can specify them as a merge
file in the \[lq]filter\[rq] parameter.
See the \[lq]filter\[rq] parameter for a description of how excluded
files affect the daemon.
.RE
.IP "28." 4
\f[V]include from\f[R]
.RS 4
.PP
Analogue of \[lq]exclude from\[rq] for a file of daemon include
patterns.
Only one \[lq]include from\[rq] parameter can apply to a given module.
See the \[lq]filter\[rq] parameter for a description of how excluded
files affect the daemon.
.RE
.IP "29." 4
\f[V]incoming chmod\f[R]
.RS 4
.PP
This parameter allows you to specify a set of comma-separated chmod
strings that will affect the permissions of all incoming files (files
that are being received by the daemon).
These changes happen after all other permission calculations, and this
will even override destination-default and/or existing permissions when
the client does not specify \f[V]--perms\f[R].
See the description of the \f[V]--chmod\f[R] rsync option and the
\f[B]chmod\f[R](1) manpage for information on the format of this string.
.RE
.IP "30." 4
\f[V]outgoing chmod\f[R]
.RS 4
.PP
This parameter allows you to specify a set of comma-separated chmod
strings that will affect the permissions of all outgoing files (files
that are being sent out from the daemon).
These changes happen first, making the sent permissions appear to be
different than those stored in the filesystem itself.
For instance, you could disable group write permissions on the server
while having it appear to be on to the clients.
See the description of the \f[V]--chmod\f[R] rsync option and the
\f[B]chmod\f[R](1) manpage for information on the format of this string.
.RE
.IP "31." 4
\f[V]auth users\f[R]
.RS 4
.PP
This parameter specifies a comma and/or space-separated list of
authorization rules.
In its simplest form, you list the usernames that will be allowed to
connect to this module.
The usernames do not need to exist on the local system.
The rules may contain shell wildcard characters that will be matched
against the username provided by the client for authentication.
If \[lq]auth users\[rq] is set then the client will be challenged to
supply a username and password to connect to the module.
A challenge response authentication protocol is used for this exchange.
The plain text usernames and passwords are stored in the file specified
by the \[lq]secrets file\[rq] parameter.
The default is for all users to be able to connect without a password
(this is called \[lq]anonymous rsync\[rq]).
.PP
In addition to username matching, you can specify groupname matching via
a `\[at]' prefix.
When using groupname matching, the authenticating username must be a
real user on the system, or it will be assumed to be a member of no
groups.
For example, specifying \[lq]\[at]rsync\[rq] will match the
authenticating user if the named user is a member of the rsync group.
.PP
Finally, options may be specified after a colon (:).
The options allow you to \[lq]deny\[rq] a user or a group, set the
access to \[lq]ro\[rq] (read-only), or set the access to \[lq]rw\[rq]
(read/write).
Setting an auth-rule-specific ro/rw setting overrides the module\[cq]s
\[lq]read only\[rq] setting.
.PP
Be sure to put the rules in the order you want them to be matched,
because the checking stops at the first matching user or group, and that
is the only auth that is checked.
For example:
.RS
.IP
.nf
\f[C]
auth users = joe:deny \[at]guest:deny admin:rw \[at]rsync:ro susan joe sam
\f[R]
.fi
.RE
.PP
In the above rule, user joe will be denied access no matter what.
Any user that is in the group \[lq]guest\[rq] is also denied access.
The user \[lq]admin\[rq] gets access in read/write mode, but only if the
admin user is not in group \[lq]guest\[rq] (because the admin
user-matching rule would never be reached if the user is in group
\[lq]guest\[rq]).
Any other user who is in group \[lq]rsync\[rq] will get read-only
access.
Finally, users susan, joe, and sam get the ro/rw setting of the module,
but only if the user didn\[cq]t match an earlier group-matching rule.
.PP
If you need to specify a user or group name with a space in it, start
your list with a comma to indicate that the list should only be split on
commas (though leading and trailing whitespace will also be removed, and
empty entries are just ignored).
For example:
.RS
.IP
.nf
\f[C]
auth users = , joe:deny, \[at]Some Group:deny, admin:rw, \[at]RO Group:ro
\f[R]
.fi
.RE
.PP
See the description of the secrets file for how you can have per-user
passwords as well as per-group passwords.
It also explains how a user can authenticate using their user password
or (when applicable) a group password, depending on what rule is being
authenticated.
.PP
See also the section entitled \[lq]USING RSYNC-DAEMON FEATURES VIA A
REMOTE SHELL CONNECTION\[rq] in \f[B]rsync\f[R](1) for information on
how handle an rsyncd.conf-level username that differs from the
remote-shell-level username when using a remote shell to connect to an
rsync daemon.
.RE
.IP "32." 4
\f[V]secrets file\f[R]
.RS 4
.PP
This parameter specifies the name of a file that contains the
username:password and/or \[at]groupname:password pairs used for
authenticating this module.
This file is only consulted if the \[lq]auth users\[rq] parameter is
specified.
The file is line-based and contains one name:password pair per line.
Any line has a hash (#) as the very first character on the line is
considered a comment and is skipped.
The passwords can contain any characters but be warned that many
operating systems limit the length of passwords that can be typed at the
client end, so you may find that passwords longer than 8 characters
don\[cq]t work.
.PP
The use of group-specific lines are only relevant when the module is
being authorized using a matching \[lq]\[at]groupname\[rq] rule.
When that happens, the user can be authorized via either their
\[lq]username:password\[rq] line or the
\[lq]\[at]groupname:password\[rq] line for the group that triggered the
authentication.
.PP
It is up to you what kind of password entries you want to include,
either users, groups, or both.
The use of group rules in \[lq]auth users\[rq] does not require that you
specify a group password if you do not want to use shared passwords.
.PP
There is no default for the \[lq]secrets file\[rq] parameter, you must
choose a name (such as \f[V]/etc/rsyncd.secrets\f[R]).
The file must normally not be readable by \[lq]other\[rq]; see
\[lq]strict modes\[rq].
If the file is not found or is rejected, no logins for an \[lq]auth
users\[rq] module will be possible.
.RE
.IP "33." 4
\f[V]strict modes\f[R]
.RS 4
.PP
This parameter determines whether or not the permissions on the secrets
file will be checked.
If \[lq]strict modes\[rq] is true, then the secrets file must not be
readable by any user ID other than the one that the rsync daemon is
running under.
If \[lq]strict modes\[rq] is false, the check is not performed.
The default is true.
This parameter was added to accommodate rsync running on the Windows
operating system.
.RE
.IP "34." 4
\f[V]hosts allow\f[R]
.RS 4
.PP
This parameter allows you to specify a list of comma- and/or
whitespace-separated patterns that are matched against a connecting
client\[cq]s hostname and IP address.
If none of the patterns match, then the connection is rejected.
.PP
Each pattern can be in one of six forms:
.IP \[bu] 2
a dotted decimal IPv4 address of the form a.b.c.d, or an IPv6 address of
the form a:b:c::d:e:f.\ In this case the incoming machine\[cq]s IP
address must match exactly.
.IP \[bu] 2
an address/mask in the form ipaddr/n where ipaddr is the IP address and
n is the number of one bits in the netmask.
All IP addresses which match the masked IP address will be allowed in.
.IP \[bu] 2
an address/mask in the form ipaddr/maskaddr where ipaddr is the IP
address and maskaddr is the netmask in dotted decimal notation for IPv4,
or similar for IPv6, e.g.\ ffff:ffff:ffff:ffff:: instead of /64.
All IP addresses which match the masked IP address will be allowed in.
.IP \[bu] 2
a hostname pattern using wildcards.
If the hostname of the connecting IP (as determined by a reverse lookup)
matches the wildcarded name (using the same rules as normal Unix
filename matching), the client is allowed in.
This only works if \[lq]reverse lookup\[rq] is enabled (the default).
.IP \[bu] 2
a hostname.
A plain hostname is matched against the reverse DNS of the connecting IP
(if \[lq]reverse lookup\[rq] is enabled), and/or the IP of the given
hostname is matched against the connecting IP (if \[lq]forward
lookup\[rq] is enabled, as it is by default).
Any match will be allowed in.
.IP \[bu] 2
an `\[at]' followed by a netgroup name, which will match if the reverse
DNS of the connecting IP is in the specified netgroup.
.PP
Note IPv6 link-local addresses can have a scope in the address
specification:
.RS
.IP
.nf
\f[C]
fe80::1%link1
fe80::%link1/64
fe80::%link1/ffff:ffff:ffff:ffff::
\f[R]
.fi
.RE
.PP
You can also combine \[lq]hosts allow\[rq] with \[lq]hosts deny\[rq] as
a way to add exceptions to your deny list.
When both parameters are specified, the \[lq]hosts allow\[rq] parameter
is checked first and a match results in the client being able to
connect.
A non-allowed host is then matched against the \[lq]hosts deny\[rq] list
to see if it should be rejected.
A host that does not match either list is allowed to connect.
.PP
The default is no \[lq]hosts allow\[rq] parameter, which means all hosts
can connect.
.RE
.IP "35." 4
\f[V]hosts deny\f[R]
.RS 4
.PP
This parameter allows you to specify a list of comma- and/or
whitespace-separated patterns that are matched against a connecting
clients hostname and IP address.
If the pattern matches then the connection is rejected.
See the \[lq]hosts allow\[rq] parameter for more information.
.PP
The default is no \[lq]hosts deny\[rq] parameter, which means all hosts
can connect.
.RE
.IP "36." 4
\f[V]reverse lookup\f[R]
.RS 4
.PP
Controls whether the daemon performs a reverse lookup on the
client\[cq]s IP address to determine its hostname, which is used for
\[lq]hosts allow\[rq] & \[lq]hosts deny\[rq] checks and the \[lq]%h\[rq]
log escape.
This is enabled by default, but you may wish to disable it to save time
if you know the lookup will not return a useful result, in which case
the daemon will use the name \[lq]UNDETERMINED\[rq] instead.
.PP
If this parameter is enabled globally (even by default), rsync performs
the lookup as soon as a client connects, so disabling it for a module
will not avoid the lookup.
Thus, you probably want to disable it globally and then enable it for
modules that need the information.
.RE
.IP "37." 4
\f[V]forward lookup\f[R]
.RS 4
.PP
Controls whether the daemon performs a forward lookup on any hostname
specified in an hosts allow/deny setting.
By default this is enabled, allowing the use of an explicit hostname
that would not be returned by reverse DNS of the connecting IP.
.RE
.IP "38." 4
\f[V]ignore errors\f[R]
.RS 4
.PP
This parameter tells rsyncd to ignore I/O errors on the daemon when
deciding whether to run the delete phase of the transfer.
Normally rsync skips the \f[V]--delete\f[R] step if any I/O errors have
occurred in order to prevent disastrous deletion due to a temporary
resource shortage or other I/O error.
In some cases this test is counter productive so you can use this
parameter to turn off this behavior.
.RE
.IP "39." 4
\f[V]ignore nonreadable\f[R]
.RS 4
.PP
This tells the rsync daemon to completely ignore files that are not
readable by the user.
This is useful for public archives that may have some non-readable files
among the directories, and the sysadmin doesn\[cq]t want those files to
be seen at all.
.RE
.IP "40." 4
\f[V]transfer logging\f[R]
.RS 4
.PP
This parameter enables per-file logging of downloads and uploads in a
format somewhat similar to that used by ftp daemons.
The daemon always logs the transfer at the end, so if a transfer is
aborted, no mention will be made in the log file.
.PP
If you want to customize the log lines, see the \[lq]log format\[rq]
parameter.
.RE
.IP "41." 4
\f[V]log format\f[R]
.RS 4
.PP
This parameter allows you to specify the format used for logging file
transfers when transfer logging is enabled.
The format is a text string containing embedded single-character escape
sequences prefixed with a percent (%) character.
An optional numeric field width may also be specified between the
percent and the escape letter (e.g.
\[lq]\f[V]%-50n %8l %07p\f[R]\[rq]).
In addition, one or more apostrophes may be specified prior to a
numerical escape to indicate that the numerical value should be made
more human-readable.
The 3 supported levels are the same as for the
\f[V]--human-readable\f[R] command-line option, though the default is
for human-readability to be off.
Each added apostrophe increases the level
(e.g.\ \[lq]\f[V]%\[aq]\[aq]l %\[aq]b %f\f[R]\[rq]).
.PP
The default log format is \[lq]\f[V]%o %h [%a] %m (%u) %f %l\f[R]\[rq],
and a \[lq]\f[V]%t [%p]\f[R]\[rq] is always prefixed when using the
\[lq]log file\[rq] parameter.
(A perl script that will summarize this default log format is included
in the rsync source code distribution in the \[lq]support\[rq]
subdirectory: rsyncstats.)
.PP
The single-character escapes that are understood are as follows:
.IP \[bu] 2
%a the remote IP address (only available for a daemon)
.IP \[bu] 2
%b the number of bytes actually transferred
.IP \[bu] 2
%B the permission bits of the file (e.g.\ rwxrwxrwt)
.IP \[bu] 2
%c the total size of the block checksums received for the basis file
(only when sending)
.IP \[bu] 2
%C the full-file checksum if it is known for the file.
For older rsync protocols/versions, the checksum was salted, and is thus
not a useful value (and is not displayed when that is the case).
For the checksum to output for a file, either the \f[V]--checksum\f[R]
option must be in-effect or the file must have been transferred without
a salted checksum being used.
See the \f[V]--checksum-choice\f[R] option for a way to choose the
algorithm.
.IP \[bu] 2
%f the filename (long form on sender; no trailing \[lq]/\[rq])
.IP \[bu] 2
%G the gid of the file (decimal) or \[lq]DEFAULT\[rq]
.IP \[bu] 2
%h the remote host name (only available for a daemon)
.IP \[bu] 2
%i an itemized list of what is being updated
.IP \[bu] 2
%l the length of the file in bytes
.IP \[bu] 2
%L the string \[lq]\f[V]-> SYMLINK\f[R]\[rq],
\[lq]\f[V]=> HARDLINK\f[R]\[rq], or \[lq]\[rq] (where \f[V]SYMLINK\f[R]
or \f[V]HARDLINK\f[R] is a filename)
.IP \[bu] 2
%m the module name
.IP \[bu] 2
%M the last-modified time of the file
.IP \[bu] 2
%n the filename (short form; trailing \[lq]/\[rq] on dir)
.IP \[bu] 2
%o the operation, which is \[lq]send\[rq], \[lq]recv\[rq], or
\[lq]del.\[rq] (the latter includes the trailing period)
.IP \[bu] 2
%p the process ID of this rsync session
.IP \[bu] 2
%P the module path
.IP \[bu] 2
%t the current date time
.IP \[bu] 2
%u the authenticated username or an empty string
.IP \[bu] 2
%U the uid of the file (decimal)
.PP
For a list of what the characters mean that are output by \[lq]%i\[rq],
see the \f[V]--itemize-changes\f[R] option in the rsync manpage.
.PP
Note that some of the logged output changes when talking with older
rsync versions.
For instance, deleted files were only output as verbose messages prior
to rsync 2.6.4.
.RE
.IP "42." 4
\f[V]timeout\f[R]
.RS 4
.PP
This parameter allows you to override the clients choice for I/O timeout
for this module.
Using this parameter you can ensure that rsync won\[cq]t wait on a dead
client forever.
The timeout is specified in seconds.
A value of zero means no timeout and is the default.
A good choice for anonymous rsync daemons may be 600 (giving a 10 minute
timeout).
.RE
.IP "43." 4
\f[V]refuse options\f[R]
.RS 4
.PP
This parameter allows you to specify a space-separated list of rsync
command-line options that will be refused by your rsync daemon.
You may specify the full option name, its one-letter abbreviation, or a
wild-card string that matches multiple options.
Beginning in 3.2.0, you can also negate a match term by starting it with
a \[lq]!\[rq].
.PP
When an option is refused, the daemon prints an error message and exits.
.PP
For example, this would refuse \f[V]--checksum\f[R] (\f[V]-c\f[R]) and
all the various delete options:
.RS
.IP
.nf
\f[C]
refuse options = c delete
\f[R]
.fi
.RE
.PP
The reason the above refuses all delete options is that the options
imply \f[V]--delete\f[R], and implied options are refused just like
explicit options.
.PP
The use of a negated match allows you to fine-tune your refusals after a
wild-card, such as this:
.RS
.IP
.nf
\f[C]
refuse options = delete-* !delete-during
\f[R]
.fi
.RE
.PP
Negated matching can also turn your list of refused options into a list
of accepted options.
To do this, begin the list with a \[lq]\f[V]*\f[R]\[rq] (to refuse all
options) and then specify one or more negated matches to accept.
For example:
.RS
.IP
.nf
\f[C]
refuse options = * !a !v !compress*
\f[R]
.fi
.RE
.PP
Don\[cq]t worry that the \[lq]\f[V]*\f[R]\[rq] will refuse certain vital
options such as \f[V]--dry-run\f[R], \f[V]--server\f[R],
\f[V]--no-iconv\f[R], \f[V]--seclude-args\f[R], etc.
These important options are not matched by wild-card, so they must be
overridden by their exact name.
For instance, if you\[cq]re forcing iconv transfers you could use
something like this:
.RS
.IP
.nf
\f[C]
refuse options = * no-iconv !a !v
\f[R]
.fi
.RE
.PP
As an additional aid (beginning in 3.2.0), refusing (or
\[lq]\f[V]!refusing\f[R]\[rq]) the \[lq]a\[rq] or \[lq]archive\[rq]
option also affects all the options that the \f[V]--archive\f[R] option
implies (\f[V]-rdlptgoD\f[R]), but only if the option is matched
explicitly (not using a wildcard).
If you want to do something tricky, you can use
\[lq]\f[V]archive*\f[R]\[rq] to avoid this side-effect, but keep in mind
that no normal rsync client ever sends the actual archive option to the
server.
.PP
As an additional safety feature, the refusal of \[lq]delete\[rq] also
refuses \f[V]remove-source-files\f[R] when the daemon is the sender; if
you want the latter without the former, instead refuse
\[lq]\f[V]delete-*\f[R]\[rq] as that refuses all the delete modes
without affecting \f[V]--remove-source-files\f[R].
(Keep in mind that the client\[cq]s \f[V]--delete\f[R] option typically
results in \f[V]--delete-during\f[R].)
.PP
When un-refusing delete options, you should either specify
\[lq]\f[V]!delete*\f[R]\[rq] (to accept all delete options) or specify a
limited set that includes \[lq]delete\[rq], such as:
.RS
.IP
.nf
\f[C]
refuse options = * !a !delete !delete-during
\f[R]
.fi
.RE
.PP
\&...
whereas this accepts any delete option except \f[V]--delete-after\f[R]:
.RS
.IP
.nf
\f[C]
refuse options = * !a !delete* delete-after
\f[R]
.fi
.RE
.PP
A note on refusing \[lq]compress\[rq]: it may be better to set the
\[lq]dont compress\[rq] daemon parameter to \[lq]\f[V]*\f[R]\[rq] and
ensure that \f[V]RSYNC_COMPRESS_LIST=zlib\f[R] is set in the environment
of the daemon in order to disable compression silently instead of
returning an error that forces the client to remove the \f[V]-z\f[R]
option.
.PP
If you are un-refusing the compress option, you may want to match
\[lq]\f[V]!compress*\f[R]\[rq] if you also want to allow the
\f[V]--compress-level\f[R] option.
.PP
Note that the \[lq]copy-devices\[rq] & \[lq]write-devices\[rq] options
are refused by default, but they can be explicitly accepted with
\[lq]\f[V]!copy-devices\f[R]\[rq] and/or
\[lq]\f[V]!write-devices\f[R]\[rq].
The options \[lq]log-file\[rq] and \[lq]log-file-format\[rq] are
forcibly refused and cannot be accepted.
.PP
Here are all the options that are not matched by wild-cards:
.IP \[bu] 2
\f[V]--server\f[R]: Required for rsync to even work.
.IP \[bu] 2
\f[V]--rsh\f[R], \f[V]-e\f[R]: Required to convey compatibility flags to
the server.
.IP \[bu] 2
\f[V]--out-format\f[R]: This is required to convey output behavior to a
remote receiver.
.IP \[bu] 2
\f[V]--sender\f[R]: Use \[lq]write only\[rq] parameter instead of
refusing this.
.IP \[bu] 2
\f[V]--dry-run\f[R], \f[V]-n\f[R]: Who would want to disable this?
.IP \[bu] 2
\f[V]--seclude-args\f[R], \f[V]-s\f[R]: Is the oldest arg-protection
method.
.IP \[bu] 2
\f[V]--from0\f[R], \f[V]-0\f[R]: Makes it easier to accept/refuse
\f[V]--files-from\f[R] without affecting this helpful modifier.
.IP \[bu] 2
\f[V]--iconv\f[R]: This is auto-disabled based on \[lq]charset\[rq]
parameter.
.IP \[bu] 2
\f[V]--no-iconv\f[R]: Most transfers use this option.
.IP \[bu] 2
\f[V]--checksum-seed\f[R]: Is a fairly rare, safe option.
.IP \[bu] 2
\f[V]--write-devices\f[R]: Is non-wild but also auto-disabled.
.RE
.IP "44." 4
\f[V]dont compress\f[R]
.RS 4
.PP
\f[B]NOTE:\f[R] This parameter currently has no effect except in one
instance: if it is set to \[lq]\f[V]*\f[R]\[rq] then it minimizes or
disables compression for all files (for those that don\[cq]t want to
refuse the \f[V]--compress\f[R] option completely).
.PP
This parameter allows you to select filenames based on wildcard patterns
that should not be compressed when pulling files from the daemon (no
analogous parameter exists to govern the pushing of files to a daemon).
Compression can be expensive in terms of CPU usage, so it is usually
good to not try to compress files that won\[cq]t compress well, such as
already compressed files.
.PP
The \[lq]dont compress\[rq] parameter takes a space-separated list of
case-insensitive wildcard patterns.
Any source filename matching one of the patterns will be compressed as
little as possible during the transfer.
If the compression algorithm has an \[lq]off\[rq] level, then no
compression occurs for those files.
If an algorithms has the ability to change the level in mid-stream, it
will be minimized to reduce the CPU usage as much as possible.
.PP
See the \f[V]--skip-compress\f[R] parameter in the \f[B]rsync\f[R](1)
manpage for the list of file suffixes that are skipped by default if
this parameter is not set.
.RE
.IP "45." 4
\f[V]early exec\f[R], \f[V]pre-xfer exec\f[R], \f[V]post-xfer exec\f[R]
.RS 4
.PP
You may specify a command to be run in the early stages of the
connection, or right before and/or after the transfer.
If the \f[V]early exec\f[R] or \f[V]pre-xfer exec\f[R] command returns
an error code, the transfer is aborted before it begins.
Any output from the \f[V]pre-xfer exec\f[R] command on stdout (up to
several KB) will be displayed to the user when aborting, but is
\f[I]not\f[R] displayed if the script returns success.
The other programs cannot send any text to the user.
All output except for the \f[V]pre-xfer exec\f[R] stdout goes to the
corresponding daemon\[cq]s stdout/stderr, which is typically discarded.
See the \f[V]--no-detach\f[R] option for a way to see the daemon\[cq]s
output, which can assist with debugging.
.PP
Note that the \f[V]early exec\f[R] command runs before any part of the
transfer request is known except for the module name.
This helper script can be used to setup a disk mount or decrypt some
data into a module dir, but you may need to use \f[V]lock file\f[R] and
\f[V]max connections\f[R] to avoid concurrency issues.
If the client rsync specified the \f[V]--early-input=FILE\f[R] option,
it can send up to about 5K of data to the stdin of the early script.
The stdin will otherwise be empty.
.PP
Note that the \f[V]post-xfer exec\f[R] command is still run even if one
of the other scripts returns an error code.
The \f[V]pre-xfer exec\f[R] command will \f[I]not\f[R] be run, however,
if the \f[V]early exec\f[R] command fails.
.PP
The following environment variables will be set, though some are
specific to the pre-xfer or the post-xfer environment:
.IP \[bu] 2
\f[V]RSYNC_MODULE_NAME\f[R]: The name of the module being accessed.
.IP \[bu] 2
\f[V]RSYNC_MODULE_PATH\f[R]: The path configured for the module.
.IP \[bu] 2
\f[V]RSYNC_HOST_ADDR\f[R]: The accessing host\[cq]s IP address.
.IP \[bu] 2
\f[V]RSYNC_HOST_NAME\f[R]: The accessing host\[cq]s name.
.IP \[bu] 2
\f[V]RSYNC_USER_NAME\f[R]: The accessing user\[cq]s name (empty if no
user).
.IP \[bu] 2
\f[V]RSYNC_PID\f[R]: A unique number for this transfer.
.IP \[bu] 2
\f[V]RSYNC_REQUEST\f[R]: (pre-xfer only) The module/path info specified
by the user.
Note that the user can specify multiple source files, so the request can
be something like \[lq]mod/path1 mod/path2\[rq], etc.
.IP \[bu] 2
\f[V]RSYNC_ARG#\f[R]: (pre-xfer only) The pre-request arguments are set
in these numbered values.
RSYNC_ARG0 is always \[lq]rsyncd\[rq], followed by the options that were
used in RSYNC_ARG1, and so on.
There will be a value of \[lq].\[rq] indicating that the options are
done and the path args are beginning \[en] these contain similar
information to RSYNC_REQUEST, but with values separated and the module
name stripped off.
.IP \[bu] 2
\f[V]RSYNC_EXIT_STATUS\f[R]: (post-xfer only) the server side\[cq]s exit
value.
This will be 0 for a successful run, a positive value for an error that
the server generated, or a -1 if rsync failed to exit properly.
Note that an error that occurs on the client side does not currently get
sent to the server side, so this is not the final exit status for the
whole transfer.
.IP \[bu] 2
\f[V]RSYNC_RAW_STATUS\f[R]: (post-xfer only) the raw exit value from
\f[B]waitpid()\f[R].
.PP
Even though the commands can be associated with a particular module,
they are run using the permissions of the user that started the daemon
(not the module\[cq]s uid/gid setting) without any chroot restrictions.
.PP
These settings honor 2 environment variables: use RSYNC_SHELL to set a
shell to use when running the command (which otherwise uses your
\f[B]system()\f[R] call\[cq]s default shell), and use RSYNC_NO_XFER_EXEC
to disable both options completely.
.RE
.SS CONFIG DIRECTIVES
.PP
There are currently two config directives available that allow a config
file to incorporate the contents of other files: \f[V]&include\f[R] and
\f[V]&merge\f[R].
Both allow a reference to either a file or a directory.
They differ in how segregated the file\[cq]s contents are considered to
be.
.PP
The \f[V]&include\f[R] directive treats each file as more distinct, with
each one inheriting the defaults of the parent file, starting the
parameter parsing as globals/defaults, and leaving the defaults
unchanged for the parsing of the rest of the parent file.
.PP
The \f[V]&merge\f[R] directive, on the other hand, treats the file\[cq]s
contents as if it were simply inserted in place of the directive, and
thus it can set parameters in a module started in another file, can
affect the defaults for other files, etc.
.PP
When an \f[V]&include\f[R] or \f[V]&merge\f[R] directive refers to a
directory, it will read in all the \f[V]*.conf\f[R] or \f[V]*.inc\f[R]
files (respectively) that are contained inside that directory (without
any recursive scanning), with the files sorted into alpha order.
So, if you have a directory named \[lq]rsyncd.d\[rq] with the files
\[lq]foo.conf\[rq], \[lq]bar.conf\[rq], and \[lq]baz.conf\[rq] inside
it, this directive:
.RS
.IP
.nf
\f[C]
&include /path/rsyncd.d
\f[R]
.fi
.RE
.PP
would be the same as this set of directives:
.RS
.IP
.nf
\f[C]
&include /path/rsyncd.d/bar.conf
&include /path/rsyncd.d/baz.conf
&include /path/rsyncd.d/foo.conf
\f[R]
.fi
.RE
.PP
except that it adjusts as files are added and removed from the
directory.
.PP
The advantage of the \f[V]&include\f[R] directive is that you can define
one or more modules in a separate file without worrying about unintended
side-effects between the self-contained module files.
.PP
The advantage of the \f[V]&merge\f[R] directive is that you can load
config snippets that can be included into multiple module definitions,
and you can also set global values that will affect connections (such as
\f[V]motd file\f[R]), or globals that will affect other include files.
.PP
For example, this is a useful /etc/rsyncd.conf file:
.RS
.IP
.nf
\f[C]
port = 873
log file = /var/log/rsync.log
pid file = /var/lock/rsync.lock

&merge /etc/rsyncd.d
&include /etc/rsyncd.d
\f[R]
.fi
.RE
.PP
This would merge any \f[V]/etc/rsyncd.d/*.inc\f[R] files (for global
values that should stay in effect), and then include any
\f[V]/etc/rsyncd.d/*.conf\f[R] files (defining modules without any
global-value cross-talk).
.SS AUTHENTICATION STRENGTH
.PP
The authentication protocol used in rsync is a 128 bit MD4 based
challenge response system.
This is fairly weak protection, though (with at least one brute-force
hash-finding algorithm publicly available), so if you want really
top-quality security, then I recommend that you run rsync over ssh.
(Yes, a future version of rsync will switch over to a stronger hashing
method.)
.PP
Also note that the rsync daemon protocol does not currently provide any
encryption of the data that is transferred over the connection.
Only authentication is provided.
Use ssh as the transport if you want encryption.
.PP
You can also make use of SSL/TLS encryption if you put rsync behind an
SSL proxy.
.SS SSL/TLS Daemon Setup
.PP
When setting up an rsync daemon for access via SSL/TLS, you will need to
configure a TCP proxy (such as haproxy or nginx) as the front-end that
handles the encryption.
.IP \[bu] 2
You should limit the access to the backend-rsyncd port to only allow the
proxy to connect.
If it is on the same host as the proxy, then configuring it to only
listen on localhost is a good idea.
.IP \[bu] 2
You should consider turning on the \f[V]proxy protocol\f[R] rsync-daemon
parameter if your proxy supports sending that information.
The examples below assume that this is enabled.
.PP
An example haproxy setup is as follows:
.RS
.IP
.nf
\f[C]
frontend fe_rsync-ssl
   bind :::874 ssl crt /etc/letsencrypt/example.com/combined.pem
   mode tcp
   use_backend be_rsync

backend be_rsync
   mode tcp
   server local-rsync 127.0.0.1:873 check send-proxy
\f[R]
.fi
.RE
.PP
An example nginx proxy setup is as follows:
.RS
.IP
.nf
\f[C]
stream {
   server {
       listen 874 ssl;
       listen [::]:874 ssl;

       ssl_certificate /etc/letsencrypt/example.com/fullchain.pem;
       ssl_certificate_key /etc/letsencrypt/example.com/privkey.pem;

       proxy_pass localhost:873;
       proxy_protocol on; # Requires rsyncd.conf \[dq]proxy protocol = true\[dq]
       proxy_timeout 1m;
       proxy_connect_timeout 5s;
   }
}
\f[R]
.fi
.RE
.PP
If rsyncd should be accessible encrypted and unencrypted at the same
time make the proxy listen on port 873 as well and let it handle both
streams.
.SS DAEMON CONFIG EXAMPLES
.PP
A simple rsyncd.conf file that allow anonymous rsync to a ftp area at
\f[V]/home/ftp\f[R] would be:
.RS
.IP
.nf
\f[C]
[ftp]
        path = /home/ftp
        comment = ftp export area
\f[R]
.fi
.RE
.PP
A more sophisticated example would be:
.RS
.IP
.nf
\f[C]
uid = nobody
gid = nobody
use chroot = yes
max connections = 4
syslog facility = local5
pid file = /var/run/rsyncd.pid

[ftp]
        path = /var/ftp/./pub
        comment = whole ftp area (approx 6.1 GB)

[sambaftp]
        path = /var/ftp/./pub/samba
        comment = Samba ftp area (approx 300 MB)

[rsyncftp]
        path = /var/ftp/./pub/rsync
        comment = rsync ftp area (approx 6 MB)

[sambawww]
        path = /public_html/samba
        comment = Samba WWW pages (approx 240 MB)

[cvs]
        path = /data/cvs
        comment = CVS repository (requires authentication)
        auth users = tridge, susan
        secrets file = /etc/rsyncd.secrets
\f[R]
.fi
.RE
.PP
The /etc/rsyncd.secrets file would look something like this:
.RS
.IP
.nf
\f[C]
tridge:mypass
susan:herpass
\f[R]
.fi
.RE
.SS FILES
.PP
/etc/rsyncd.conf or rsyncd.conf
.SS SEE ALSO
.PP
\f[B]rsync\f[R](1), \f[B]rsync-ssl\f[R](1)
.SS BUGS
.PP
Please report bugs!
The rsync bug tracking system is online at <https://rsync.samba.org/>.
.SS VERSION
.PP
This manpage is current for version \[at]VERSION\[at] of rsync.
.SS CREDITS
.PP
Rsync is distributed under the GNU General Public License.
See the file COPYING for details.
.PP
An rsync web site is available at <https://rsync.samba.org/> and its
github project is <https://github.com/RsyncProject/rsync>.
.SS THANKS
.PP
Thanks to Warren Stanley for his original idea and patch for the rsync
daemon.
Thanks to Karsten Thygesen for his many suggestions and documentation!
.SS AUTHOR
.PP
Rsync was originally written by Andrew Tridgell and Paul Mackerras.
Many people from around the world have helped to maintain and improve
it.
.PP
Mailing lists for support and development are available at
<https://lists.samba.org/>.
