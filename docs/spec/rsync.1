.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.SS NAME
.PP
rsync - a fast, versatile, remote (and local) file-copying tool
.SS SYNOPSIS
.IP
.nf
\f[C]
Local:
    rsync [OPTION...] SRC... [DEST]

Access via remote shell:
    Pull:
        rsync [OPTION...] [USER\[at]]HOST:SRC... [DEST]
    Push:
        rsync [OPTION...] SRC... [USER\[at]]HOST:DEST

Access via rsync daemon:
    Pull:
        rsync [OPTION...] [USER\[at]]HOST::SRC... [DEST]
        rsync [OPTION...] rsync://[USER\[at]]HOST[:PORT]/SRC... [DEST]
    Push:
        rsync [OPTION...] SRC... [USER\[at]]HOST::DEST
        rsync [OPTION...] SRC... rsync://[USER\[at]]HOST[:PORT]/DEST)
\f[R]
.fi
.PP
Usages with just one SRC arg and no DEST arg will list the source files
instead of copying.
.PP
The online version of this manpage (that includes cross-linking of
topics) is available at <https://download.samba.org/pub/rsync/rsync.1>.
.SS DESCRIPTION
.PP
Rsync is a fast and extraordinarily versatile file copying tool.
It can copy locally, to/from another host over any remote shell, or
to/from a remote rsync daemon.
It offers a large number of options that control every aspect of its
behavior and permit very flexible specification of the set of files to
be copied.
It is famous for its delta-transfer algorithm, which reduces the amount
of data sent over the network by sending only the differences between
the source files and the existing files in the destination.
Rsync is widely used for backups and mirroring and as an improved copy
command for everyday use.
.PP
Rsync finds files that need to be transferred using a \[lq]quick
check\[rq] algorithm (by default) that looks for files that have changed
in size or in last-modified time.
Any changes in the other preserved attributes (as requested by options)
are made on the destination file directly when the quick check indicates
that the file\[cq]s data does not need to be updated.
.PP
Some of the additional features of rsync are:
.IP \[bu] 2
support for copying links, devices, owners, groups, and permissions
.IP \[bu] 2
exclude and exclude-from options similar to GNU tar
.IP \[bu] 2
a CVS exclude mode for ignoring the same files that CVS would ignore
.IP \[bu] 2
can use any transparent remote shell, including ssh or rsh
.IP \[bu] 2
does not require super-user privileges
.IP \[bu] 2
pipelining of file transfers to minimize latency costs
.IP \[bu] 2
support for anonymous or authenticated rsync daemons (ideal for
mirroring)
.SS GENERAL
.PP
Rsync copies files either to or from a remote host, or locally on the
current host (it does not support copying files between two remote
hosts).
.PP
There are two different ways for rsync to contact a remote system: using
a remote-shell program as the transport (such as ssh or rsh) or
contacting an rsync daemon directly via TCP.
The remote-shell transport is used whenever the source or destination
path contains a single colon (:) separator after a host specification.
Contacting an rsync daemon directly happens when the source or
destination path contains a double colon (::) separator after a host
specification, OR when an rsync:// URL is specified (see also the USING
RSYNC-DAEMON FEATURES VIA A REMOTE-SHELL CONNECTION section for an
exception to this latter rule).
.PP
As a special case, if a single source arg is specified without a
destination, the files are listed in an output format similar to
\[lq]\f[V]ls -l\f[R]\[rq].
.PP
As expected, if neither the source or destination path specify a remote
host, the copy occurs locally (see also the \f[V]--list-only\f[R]
option).
.PP
Rsync refers to the local side as the client and the remote side as the
server.
Don\[cq]t confuse server with an rsync daemon.
A daemon is always a server, but a server can be either a daemon or a
remote-shell spawned process.
.SS SETUP
.PP
See the file README.md for installation instructions.
.PP
Once installed, you can use rsync to any machine that you can access via
a remote shell (as well as some that you can access using the rsync
daemon-mode protocol).
For remote transfers, a modern rsync uses ssh for its communications,
but it may have been configured to use a different remote shell by
default, such as rsh or remsh.
.PP
You can also specify any remote shell you like, either by using the
\f[V]-e\f[R] command line option, or by setting the \f[V]RSYNC_RSH\f[R]
environment variable.
.PP
Note that rsync must be installed on both the source and destination
machines.
.SS USAGE
.PP
You use rsync in the same way you use rcp.
You must specify a source and a destination, one of which may be remote.
.PP
Perhaps the best way to explain the syntax is with some examples:
.RS
.IP
.nf
\f[C]
rsync -t *.c foo:src/
\f[R]
.fi
.RE
.PP
This would transfer all files matching the pattern \f[V]*.c\f[R] from
the current directory to the directory src on the machine foo.
If any of the files already exist on the remote system then the rsync
remote-update protocol is used to update the file by sending only the
differences in the data.
Note that the expansion of wildcards on the command-line (\f[V]*.c\f[R])
into a list of files is handled by the shell before it runs rsync and
not by rsync itself (exactly the same as all other Posix-style
programs).
.RS
.IP
.nf
\f[C]
rsync -avz foo:src/bar /data/tmp
\f[R]
.fi
.RE
.PP
This would recursively transfer all files from the directory src/bar on
the machine foo into the /data/tmp/bar directory on the local machine.
The files are transferred in archive mode, which ensures that symbolic
links, devices, attributes, permissions, ownerships, etc.
are preserved in the transfer.
Additionally, compression will be used to reduce the size of data
portions of the transfer.
.RS
.IP
.nf
\f[C]
rsync -avz foo:src/bar/ /data/tmp
\f[R]
.fi
.RE
.PP
A trailing slash on the source changes this behavior to avoid creating
an additional directory level at the destination.
You can think of a trailing / on a source as meaning \[lq]copy the
contents of this directory\[rq] as opposed to \[lq]copy the directory by
name\[rq], but in both cases the attributes of the containing directory
are transferred to the containing directory on the destination.
In other words, each of the following commands copies the files in the
same way, including their setting of the attributes of /dest/foo:
.RS
.IP
.nf
\f[C]
rsync -av /src/foo /dest
rsync -av /src/foo/ /dest/foo
\f[R]
.fi
.RE
.PP
Note also that host and module references don\[cq]t require a trailing
slash to copy the contents of the default directory.
For example, both of these copy the remote directory\[cq]s contents into
\[lq]/dest\[rq]:
.RS
.IP
.nf
\f[C]
rsync -av host: /dest
rsync -av host::module /dest
\f[R]
.fi
.RE
.PP
You can also use rsync in local-only mode, where both the source and
destination don\[cq]t have a `:' in the name.
In this case it behaves like an improved copy command.
.PP
Finally, you can list all the (listable) modules available from a
particular rsync daemon by leaving off the module name:
.RS
.IP
.nf
\f[C]
rsync somehost.mydomain.com::
\f[R]
.fi
.RE
.SS COPYING TO A DIFFERENT NAME
.PP
When you want to copy a directory to a different name, use a trailing
slash on the source directory to put the contents of the directory into
any destination directory you like:
.RS
.IP
.nf
\f[C]
rsync -ai foo/ bar/
\f[R]
.fi
.RE
.PP
Rsync also has the ability to customize a destination file\[cq]s name
when copying a single item.
The rules for this are:
.IP \[bu] 2
The transfer list must consist of a single item (either a file or an
empty directory)
.IP \[bu] 2
The final element of the destination path must not exist as a directory
.IP \[bu] 2
The destination path must not have been specified with a trailing slash
.PP
Under those circumstances, rsync will set the name of the
destination\[cq]s single item to the last element of the destination
path.
Keep in mind that it is best to only use this idiom when copying a file
and use the above trailing-slash idiom when copying a directory.
.PP
The following example copies the \f[V]foo.c\f[R] file as \f[V]bar.c\f[R]
in the \f[V]save\f[R] dir (assuming that \f[V]bar.c\f[R] isn\[cq]t a
directory):
.RS
.IP
.nf
\f[C]
rsync -ai src/foo.c save/bar.c
\f[R]
.fi
.RE
.PP
The single-item copy rule might accidentally bite you if you unknowingly
copy a single item and specify a destination dir that doesn\[cq]t exist
(without using a trailing slash).
For example, if \f[V]src/*.c\f[R] matches one file and
\f[V]save/dir\f[R] doesn\[cq]t exist, this will confuse you by naming
the destination file \f[V]save/dir\f[R]:
.RS
.IP
.nf
\f[C]
rsync -ai src/*.c save/dir
\f[R]
.fi
.RE
.PP
To prevent such an accident, either make sure the destination dir exists
or specify the destination path with a trailing slash:
.RS
.IP
.nf
\f[C]
rsync -ai src/*.c save/dir/
\f[R]
.fi
.RE
.SS SORTED TRANSFER ORDER
.PP
Rsync always sorts the specified filenames into its internal transfer
list.
This handles the merging together of the contents of identically named
directories, makes it easy to remove duplicate filenames.
It can, however, confuse someone when the files are transferred in a
different order than what was given on the command-line.
.PP
If you need a particular file to be transferred prior to another, either
separate the files into different rsync calls, or consider using
\f[V]--delay-updates\f[R] (which doesn\[cq]t affect the sorted transfer
order, but does make the final file-updating phase happen much more
rapidly).
.SS MULTI-HOST SECURITY
.PP
Rsync takes steps to ensure that the file requests that are shared in a
transfer are protected against various security issues.
Most of the potential problems arise on the receiving side where rsync
takes steps to ensure that the list of files being transferred remains
within the bounds of what was requested.
.PP
Toward this end, rsync 3.1.2 and later have aborted when a file list
contains an absolute or relative path that tries to escape out of the
top of the transfer.
Also, beginning with version 3.2.5, rsync does two more safety checks of
the file list to (1) ensure that no extra source arguments were added
into the transfer other than those that the client requested and (2)
ensure that the file list obeys the exclude rules that were sent to the
sender.
.PP
For those that don\[cq]t yet have a 3.2.5 client rsync (or those that
want to be extra careful), it is safest to do a copy into a dedicated
destination directory for the remote files when you don\[cq]t trust the
remote host.
For example, instead of doing an rsync copy into your home directory:
.RS
.IP
.nf
\f[C]
rsync -aiv host1:dir1 \[ti]
\f[R]
.fi
.RE
.PP
Dedicate a \[lq]host1-files\[rq] dir to the remote content:
.RS
.IP
.nf
\f[C]
rsync -aiv host1:dir1 \[ti]/host1-files
\f[R]
.fi
.RE
.PP
See the \f[V]--trust-sender\f[R] option for additional details.
.PP
CAUTION: it is not particularly safe to use rsync to copy files from a
case-preserving filesystem to a case-ignoring filesystem.
If you must perform such a copy, you should either disable symlinks via
\f[V]--no-links\f[R] or enable the munging of symlinks via
\f[V]--munge-links\f[R] (and make sure you use the right local or remote
option).
This will prevent rsync from doing potentially dangerous things if a
symlink name overlaps with a file or directory.
It does not, however, ensure that you get a full copy of all the files
(since that may not be possible when the names overlap).
A potentially better solution is to list all the source files and create
a safe list of filenames that you pass to the \f[V]--files-from\f[R]
option.
Any files that conflict in name would need to be copied to different
destination directories using more than one copy.
.PP
While a copy of a case-ignoring filesystem to a case-ignoring filesystem
can work out fairly well, if no \f[V]--delete-during\f[R] or
\f[V]--delete-before\f[R] option is active, rsync can potentially update
an existing file on the receiving side without noticing that the
upper-/lower-case of the filename should be changed to match the sender.
.SS ADVANCED USAGE
.PP
The syntax for requesting multiple files from a remote host is done by
specifying additional remote-host args in the same style as the first,
or with the hostname omitted.
For instance, all these work:
.RS
.IP
.nf
\f[C]
rsync -aiv host:file1 :file2 host:file{3,4} /dest/
rsync -aiv host::modname/file{1,2} host::modname/extra /dest/
rsync -aiv host::modname/first ::extra-file{1,2} /dest/
\f[R]
.fi
.RE
.PP
Note that a daemon connection only supports accessing one module per
copy command, so if the start of a follow-up path doesn\[cq]t begin with
the modname of the first path, it is assumed to be a path in the module
(such as the extra-file1 & extra-file2 that are grabbed above).
.PP
Really old versions of rsync (2.6.9 and before) only allowed specifying
one remote-source arg, so some people have instead relied on the
remote-shell performing space splitting to break up an arg into multiple
paths.
Such unintuitive behavior is no longer supported by default (though you
can request it, as described below).
.PP
Starting in 3.2.4, filenames are passed to a remote shell in such a way
as to preserve the characters you give it.
Thus, if you ask for a file with spaces in the name, that\[cq]s what the
remote rsync looks for:
.RS
.IP
.nf
\f[C]
rsync -aiv host:\[aq]a simple file.pdf\[aq] /dest/
\f[R]
.fi
.RE
.PP
If you use scripts that have been written to manually apply extra
quoting to the remote rsync args (or to require remote arg splitting),
you can ask rsync to let your script handle the extra escaping.
This is done by either adding the \f[V]--old-args\f[R] option to the
rsync runs in the script (which requires a new rsync) or exporting
RSYNC_OLD_ARGS=1 and RSYNC_PROTECT_ARGS=0 (which works with old or new
rsync versions).
.SS CONNECTING TO AN RSYNC DAEMON
.PP
It is also possible to use rsync without a remote shell as the
transport.
In this case you will directly connect to a remote rsync daemon,
typically using TCP port 873.
(This obviously requires the daemon to be running on the remote system,
so refer to the STARTING AN RSYNC DAEMON TO ACCEPT CONNECTIONS section
below for information on that.)
.PP
Using rsync in this way is the same as using it with a remote shell
except that:
.IP \[bu] 2
Use either double-colon syntax or rsync:// URL syntax instead of the
single-colon (remote shell) syntax.
.IP \[bu] 2
The first element of the \[lq]path\[rq] is actually a module name.
.IP \[bu] 2
Additional remote source args can use an abbreviated syntax that omits
the hostname and/or the module name, as discussed in ADVANCED USAGE.
.IP \[bu] 2
The remote daemon may print a \[lq]message of the day\[rq] when you
connect.
.IP \[bu] 2
If you specify only the host (with no module or path) then a list of
accessible modules on the daemon is output.
.IP \[bu] 2
If you specify a remote source path but no destination, a listing of the
matching files on the remote daemon is output.
.IP \[bu] 2
The \f[V]--rsh\f[R] (\f[V]-e\f[R]) option must be omitted to avoid
changing the connection style from using a socket connection to USING
RSYNC-DAEMON FEATURES VIA A REMOTE-SHELL CONNECTION.
.PP
An example that copies all the files in a remote module named
\[lq]src\[rq]:
.RS
.IP
.nf
\f[C]
rsync -av host::src /dest
\f[R]
.fi
.RE
.PP
Some modules on the remote daemon may require authentication.
If so, you will receive a password prompt when you connect.
You can avoid the password prompt by setting the environment variable
\f[V]RSYNC_PASSWORD\f[R] to the password you want to use or using the
\f[V]--password-file\f[R] option.
This may be useful when scripting rsync.
.PP
WARNING: On some systems environment variables are visible to all users.
On those systems using \f[V]--password-file\f[R] is recommended.
.PP
You may establish the connection via a web proxy by setting the
environment variable \f[V]RSYNC_PROXY\f[R] to a hostname:port pair
pointing to your web proxy.
Note that your web proxy\[cq]s configuration must support proxy
connections to port 873.
.PP
You may also establish a daemon connection using a program as a proxy by
setting the environment variable \f[V]RSYNC_CONNECT_PROG\f[R] to the
commands you wish to run in place of making a direct socket connection.
The string may contain the escape \[lq]%H\[rq] to represent the hostname
specified in the rsync command (so use \[lq]%%\[rq] if you need a single
\[lq]%\[rq] in your string).
For example:
.RS
.IP
.nf
\f[C]
export RSYNC_CONNECT_PROG=\[aq]ssh proxyhost nc %H 873\[aq]
rsync -av targethost1::module/src/ /dest/
rsync -av rsync://targethost2/module/src/ /dest/
\f[R]
.fi
.RE
.PP
The command specified above uses ssh to run nc (netcat) on a proxyhost,
which forwards all data to port 873 (the rsync daemon) on the targethost
(%H).
.PP
Note also that if the \f[V]RSYNC_SHELL\f[R] environment variable is set,
that program will be used to run the \f[V]RSYNC_CONNECT_PROG\f[R]
command instead of using the default shell of the \f[B]system()\f[R]
call.
.SS USING RSYNC-DAEMON FEATURES VIA A REMOTE-SHELL CONNECTION
.PP
It is sometimes useful to use various features of an rsync daemon (such
as named modules) without actually allowing any new socket connections
into a system (other than what is already required to allow remote-shell
access).
Rsync supports connecting to a host using a remote shell and then
spawning a single-use \[lq]daemon\[rq] server that expects to read its
config file in the home dir of the remote user.
This can be useful if you want to encrypt a daemon-style transfer\[cq]s
data, but since the daemon is started up fresh by the remote user, you
may not be able to use features such as chroot or change the uid used by
the daemon.
(For another way to encrypt a daemon transfer, consider using ssh to
tunnel a local port to a remote machine and configure a normal rsync
daemon on that remote host to only allow connections from
\[lq]localhost\[rq].)
.PP
From the user\[cq]s perspective, a daemon transfer via a remote-shell
connection uses nearly the same command-line syntax as a normal
rsync-daemon transfer, with the only exception being that you must
explicitly set the remote shell program on the command-line with the
\f[V]--rsh=COMMAND\f[R] option.
(Setting the RSYNC_RSH in the environment will not turn on this
functionality.)
For example:
.RS
.IP
.nf
\f[C]
rsync -av --rsh=ssh host::module /dest
\f[R]
.fi
.RE
.PP
If you need to specify a different remote-shell user, keep in mind that
the user\[at] prefix in front of the host is specifying the rsync-user
value (for a module that requires user-based authentication).
This means that you must give the `-l user' option to ssh when
specifying the remote-shell, as in this example that uses the short
version of the \f[V]--rsh\f[R] option:
.RS
.IP
.nf
\f[C]
rsync -av -e \[dq]ssh -l ssh-user\[dq] rsync-user\[at]host::module /dest
\f[R]
.fi
.RE
.PP
The \[lq]ssh-user\[rq] will be used at the ssh level; the
\[lq]rsync-user\[rq] will be used to log-in to the \[lq]module\[rq].
.PP
In this setup, the daemon is started by the ssh command that is
accessing the system (which can be forced via the
\f[V]\[ti]/.ssh/authorized_keys\f[R] file, if desired).
However, when accessing a daemon directly, it needs to be started
beforehand.
.SS STARTING AN RSYNC DAEMON TO ACCEPT CONNECTIONS
.PP
In order to connect to an rsync daemon, the remote system needs to have
a daemon already running (or it needs to have configured something like
inetd to spawn an rsync daemon for incoming connections on a particular
port).
For full information on how to start a daemon that will handling
incoming socket connections, see the \f[B]rsyncd.conf\f[R](5) manpage
\[en] that is the config file for the daemon, and it contains the full
details for how to run the daemon (including stand-alone and inetd
configurations).
.PP
If you\[cq]re using one of the remote-shell transports for the transfer,
there is no need to manually start an rsync daemon.
.SS EXAMPLES
.PP
Here are some examples of how rsync can be used.
.PP
To backup a home directory, which consists of large MS Word files and
mail folders, a per-user cron job can be used that runs this each day:
.RS
.IP
.nf
\f[C]
rsync -aiz . bkhost:backup/joe/
\f[R]
.fi
.RE
.PP
To move some files from a remote host to the local host, you could run:
.RS
.IP
.nf
\f[C]
rsync -aiv --remove-source-files rhost:/tmp/{file1,file2}.c \[ti]/src/
\f[R]
.fi
.RE
.SS OPTION SUMMARY
.PP
Here is a short summary of the options available in rsync.
Each option also has its own detailed description later in this manpage.
.IP
.nf
\f[C]
--verbose, -v            increase verbosity
--info=FLAGS             fine-grained informational verbosity
--debug=FLAGS            fine-grained debug verbosity
--stderr=e|a|c           change stderr output mode (default: errors)
--quiet, -q              suppress non-error messages
--no-motd                suppress daemon-mode MOTD
--checksum, -c           skip based on checksum, not mod-time & size
--archive, -a            archive mode is -rlptgoD (no -A,-X,-U,-N,-H)
--no-OPTION              turn off an implied OPTION (e.g. --no-D)
--recursive, -r          recurse into directories
--relative, -R           use relative path names
--no-implied-dirs        don\[aq]t send implied dirs with --relative
--backup, -b             make backups (see --suffix & --backup-dir)
--backup-dir=DIR         make backups into hierarchy based in DIR
--suffix=SUFFIX          backup suffix (default \[ti] w/o --backup-dir)
--update, -u             skip files that are newer on the receiver
--inplace                update destination files in-place
--append                 append data onto shorter files
--append-verify          --append w/old data in file checksum
--dirs, -d               transfer directories without recursing
--old-dirs, --old-d      works like --dirs when talking to old rsync
--mkpath                 create destination\[aq]s missing path components
--links, -l              copy symlinks as symlinks
--copy-links, -L         transform symlink into referent file/dir
--copy-unsafe-links      only \[dq]unsafe\[dq] symlinks are transformed
--safe-links             ignore symlinks that point outside the tree
--munge-links            munge symlinks to make them safe & unusable
--copy-dirlinks, -k      transform symlink to dir into referent dir
--keep-dirlinks, -K      treat symlinked dir on receiver as dir
--hard-links, -H         preserve hard links
--perms, -p              preserve permissions
--executability, -E      preserve executability
--chmod=CHMOD            affect file and/or directory permissions
--acls, -A               preserve ACLs (implies --perms)
--xattrs, -X             preserve extended attributes
--owner, -o              preserve owner (super-user only)
--group, -g              preserve group
--devices                preserve device files (super-user only)
--copy-devices           copy device contents as a regular file
--write-devices          write to devices as files (implies --inplace)
--specials               preserve special files
-D                       same as --devices --specials
--times, -t              preserve modification times
--atimes, -U             preserve access (use) times
--open-noatime           avoid changing the atime on opened files
--crtimes, -N            preserve create times (newness)
--omit-dir-times, -O     omit directories from --times
--omit-link-times, -J    omit symlinks from --times
--super                  receiver attempts super-user activities
--fake-super             store/recover privileged attrs using xattrs
--sparse, -S             turn sequences of nulls into sparse blocks
--preallocate            allocate dest files before writing them
--dry-run, -n            perform a trial run with no changes made
--whole-file, -W         copy files whole (w/o delta-xfer algorithm)
--checksum-choice=STR    choose the checksum algorithm (aka --cc)
--one-file-system, -x    don\[aq]t cross filesystem boundaries
--block-size=SIZE, -B    force a fixed checksum block-size
--rsh=COMMAND, -e        specify the remote shell to use
--rsync-path=PROGRAM     specify the rsync to run on remote machine
--existing               skip creating new files on receiver
--ignore-existing        skip updating files that exist on receiver
--remove-source-files    sender removes synchronized files (non-dir)
--del                    an alias for --delete-during
--delete                 delete extraneous files from dest dirs
--delete-before          receiver deletes before xfer, not during
--delete-during          receiver deletes during the transfer
--delete-delay           find deletions during, delete after
--delete-after           receiver deletes after transfer, not during
--delete-excluded        also delete excluded files from dest dirs
--ignore-missing-args    ignore missing source args without error
--delete-missing-args    delete missing source args from destination
--ignore-errors          delete even if there are I/O errors
--force                  force deletion of dirs even if not empty
--max-delete=NUM         don\[aq]t delete more than NUM files
--max-size=SIZE          don\[aq]t transfer any file larger than SIZE
--min-size=SIZE          don\[aq]t transfer any file smaller than SIZE
--max-alloc=SIZE         change a limit relating to memory alloc
--partial                keep partially transferred files
--partial-dir=DIR        put a partially transferred file into DIR
--delay-updates          put all updated files into place at end
--prune-empty-dirs, -m   prune empty directory chains from file-list
--numeric-ids            don\[aq]t map uid/gid values by user/group name
--usermap=STRING         custom username mapping
--groupmap=STRING        custom groupname mapping
--chown=USER:GROUP       simple username/groupname mapping
--timeout=SECONDS        set I/O timeout in seconds
--contimeout=SECONDS     set daemon connection timeout in seconds
--ignore-times, -I       don\[aq]t skip files that match size and time
--size-only              skip files that match in size
--modify-window=NUM, -\[at]  set the accuracy for mod-time comparisons
--temp-dir=DIR, -T       create temporary files in directory DIR
--fuzzy, -y              find similar file for basis if no dest file
--compare-dest=DIR       also compare destination files relative to DIR
--copy-dest=DIR          ... and include copies of unchanged files
--link-dest=DIR          hardlink to files in DIR when unchanged
--compress, -z           compress file data during the transfer
--compress-choice=STR    choose the compression algorithm (aka --zc)
--compress-level=NUM     explicitly set compression level (aka --zl)
--skip-compress=LIST     skip compressing files with suffix in LIST
--cvs-exclude, -C        auto-ignore files in the same way CVS does
--filter=RULE, -f        add a file-filtering RULE
-F                       same as --filter=\[aq]dir-merge /.rsync-filter\[aq]
                         repeated: --filter=\[aq]- .rsync-filter\[aq]
--exclude=PATTERN        exclude files matching PATTERN
--exclude-from=FILE      read exclude patterns from FILE
--include=PATTERN        don\[aq]t exclude files matching PATTERN
--include-from=FILE      read include patterns from FILE
--files-from=FILE        read list of source-file names from FILE
--from0, -0              all *-from/filter files are delimited by 0s
--old-args               disable the modern arg-protection idiom
--secluded-args, -s      use the protocol to safely send the args
--trust-sender           trust the remote sender\[aq]s file list
--copy-as=USER[:GROUP]   specify user & optional group for the copy
--address=ADDRESS        bind address for outgoing socket to daemon
--port=PORT              specify double-colon alternate port number
--sockopts=OPTIONS       specify custom TCP options
--blocking-io            use blocking I/O for the remote shell
--outbuf=N|L|B           set out buffering to None, Line, or Block
--stats                  give some file-transfer stats
--8-bit-output, -8       leave high-bit chars unescaped in output
--human-readable, -h     output numbers in a human-readable format
--progress               show progress during transfer
-P                       same as --partial --progress
--itemize-changes, -i    output a change-summary for all updates
--remote-option=OPT, -M  send OPTION to the remote side only
--out-format=FORMAT      output updates using the specified FORMAT
--log-file=FILE          log what we\[aq]re doing to the specified FILE
--log-file-format=FMT    log updates using the specified FMT
--password-file=FILE     read daemon-access password from FILE
--early-input=FILE       use FILE for daemon\[aq]s early exec input
--list-only              list the files instead of copying them
--bwlimit=RATE           limit socket I/O bandwidth
--stop-after=MINS        Stop rsync after MINS minutes have elapsed
--stop-at=y-m-dTh:m      Stop rsync at the specified point in time
--fsync                  fsync every written file
--write-batch=FILE       write a batched update to FILE
--only-write-batch=FILE  like --write-batch but w/o updating dest
--read-batch=FILE        read a batched update from FILE
--protocol=NUM           force an older protocol version to be used
--iconv=CONVERT_SPEC     request charset conversion of filenames
--checksum-seed=NUM      set block/file checksum seed (advanced)
--ipv4, -4               prefer IPv4
--ipv6, -6               prefer IPv6
--version, -V            print the version + other info and exit
--help, -h (*)           show this help (* -h is help only on its own)
\f[R]
.fi
.PP
Rsync can also be run as a daemon, in which case the following options
are accepted:
.IP
.nf
\f[C]
--daemon                 run as an rsync daemon
--address=ADDRESS        bind to the specified address
--bwlimit=RATE           limit socket I/O bandwidth
--config=FILE            specify alternate rsyncd.conf file
--dparam=OVERRIDE, -M    override global daemon config parameter
--no-detach              do not detach from the parent
--port=PORT              listen on alternate port number
--log-file=FILE          override the \[dq]log file\[dq] setting
--log-file-format=FMT    override the \[dq]log format\[dq] setting
--sockopts=OPTIONS       specify custom TCP options
--verbose, -v            increase verbosity
--ipv4, -4               prefer IPv4
--ipv6, -6               prefer IPv6
--help, -h               show this help (when used with --daemon)
\f[R]
.fi
.SS OPTIONS
.PP
Rsync accepts both long (double-dash + word) and short (single-dash +
letter) options.
The full list of the available options are described below.
If an option can be specified in more than one way, the choices are
comma-separated.
Some options only have a long variant, not a short.
.PP
If the option takes a parameter, the parameter is only listed after the
long variant, even though it must also be specified for the short.
When specifying a parameter, you can either use the form
\f[V]--option=param\f[R], \f[V]--option param\f[R], \f[V]-o=param\f[R],
\f[V]-o param\f[R], or \f[V]-oparam\f[R] (the latter choices assume that
your option has a short variant).
.PP
The parameter may need to be quoted in some manner for it to survive the
shell\[cq]s command-line parsing.
Also keep in mind that a leading tilde (\f[V]\[ti]\f[R]) in a pathname
is substituted by your shell, so make sure that you separate the option
name from the pathname using a space if you want the local shell to
expand it.
.IP "  0." 5
\f[V]--help\f[R]
.RS 4
.PP
Print a short help page describing the options available in rsync and
exit.
You can also use \f[V]-h\f[R] for \f[V]--help\f[R] when it is used
without any other options (since it normally means
\f[V]--human-readable\f[R]).
.RE
.IP "  1." 5
\f[V]--version\f[R], \f[V]-V\f[R]
.RS 4
.PP
Print the rsync version plus other info and exit.
When repeated, the information is output is a JSON format that is still
fairly readable (client side only).
.PP
The output includes a list of compiled-in capabilities, a list of
optimizations, the default list of checksum algorithms, the default list
of compression algorithms, the default list of daemon auth digests, a
link to the rsync web site, and a few other items.
.RE
.IP "  2." 5
\f[V]--verbose\f[R], \f[V]-v\f[R]
.RS 4
.PP
This option increases the amount of information you are given during the
transfer.
By default, rsync works silently.
A single \f[V]-v\f[R] will give you information about what files are
being transferred and a brief summary at the end.
Two \f[V]-v\f[R] options will give you information on what files are
being skipped and slightly more information at the end.
More than two \f[V]-v\f[R] options should only be used if you are
debugging rsync.
.PP
The end-of-run summary tells you the number of bytes sent to the remote
rsync (which is the receiving side on a local copy), the number of bytes
received from the remote host, and the average bytes per second of the
transferred data computed over the entire length of the rsync run.
The second line shows the total size (in bytes), which is the sum of all
the file sizes that rsync considered transferring.
It also shows a \[lq]speedup\[rq] value, which is a ratio of the total
file size divided by the sum of the sent and received bytes (which is
really just a feel-good bigger-is-better number).
Note that these byte values can be made more (or less) human-readable by
using the \f[V]--human-readable\f[R] (or \f[V]--no-human-readable\f[R])
options.
.PP
In a modern rsync, the \f[V]-v\f[R] option is equivalent to the setting
of groups of \f[V]--info\f[R] and \f[V]--debug\f[R] options.
You can choose to use these newer options in addition to, or in place of
using \f[V]--verbose\f[R], as any fine-grained settings override the
implied settings of \f[V]-v\f[R].
Both \f[V]--info\f[R] and \f[V]--debug\f[R] have a way to ask for help
that tells you exactly what flags are set for each increase in
verbosity.
.PP
However, do keep in mind that a daemon\[cq]s
\[lq]\f[V]max verbosity\f[R]\[rq] setting will limit how high of a level
the various individual flags can be set on the daemon side.
For instance, if the max is 2, then any info and/or debug flag that is
set to a higher value than what would be set by \f[V]-vv\f[R] will be
downgraded to the \f[V]-vv\f[R] level in the daemon\[cq]s logging.
.RE
.IP "  3." 5
\f[V]--info=FLAGS\f[R]
.RS 4
.PP
This option lets you have fine-grained control over the information
output you want to see.
An individual flag name may be followed by a level number, with 0
meaning to silence that output, 1 being the default output level, and
higher numbers increasing the output of that flag (for those that
support higher levels).
Use \f[V]--info=help\f[R] to see all the available flag names, what they
output, and what flag names are added for each increase in the verbose
level.
Some examples:
.RS
.IP
.nf
\f[C]
rsync -a --info=progress2 src/ dest/
rsync -avv --info=stats2,misc1,flist0 src/ dest/
\f[R]
.fi
.RE
.PP
Note that \f[V]--info=name\f[R]\[cq]s output is affected by the
\f[V]--out-format\f[R] and \f[V]--itemize-changes\f[R] (\f[V]-i\f[R])
options.
See those options for more information on what is output and when.
.PP
This option was added to 3.1.0, so an older rsync on the server side
might reject your attempts at fine-grained control (if one or more flags
needed to be send to the server and the server was too old to understand
them).
See also the \[lq]\f[V]max verbosity\f[R]\[rq] caveat above when dealing
with a daemon.
.RE
.IP "  4." 5
\f[V]--debug=FLAGS\f[R]
.RS 4
.PP
This option lets you have fine-grained control over the debug output you
want to see.
An individual flag name may be followed by a level number, with 0
meaning to silence that output, 1 being the default output level, and
higher numbers increasing the output of that flag (for those that
support higher levels).
Use \f[V]--debug=help\f[R] to see all the available flag names, what
they output, and what flag names are added for each increase in the
verbose level.
Some examples:
.RS
.IP
.nf
\f[C]
rsync -avvv --debug=none src/ dest/
rsync -avA --del --debug=del2,acl src/ dest/
\f[R]
.fi
.RE
.PP
Note that some debug messages will only be output when the
\f[V]--stderr=all\f[R] option is specified, especially those pertaining
to I/O and buffer debugging.
.PP
Beginning in 3.2.0, this option is no longer auto-forwarded to the
server side in order to allow you to specify different debug values for
each side of the transfer, as well as to specify a new debug option that
is only present in one of the rsync versions.
If you want to duplicate the same option on both sides, using brace
expansion is an easy way to save you some typing.
This works in zsh and bash:
.RS
.IP
.nf
\f[C]
rsync -aiv {-M,}--debug=del2 src/ dest/
\f[R]
.fi
.RE
.RE
.IP "  5." 5
\f[V]--stderr=errors|all|client\f[R]
.RS 4
.PP
This option controls which processes output to stderr and if info
messages are also changed to stderr.
The mode strings can be abbreviated, so feel free to use a single letter
value.
The 3 possible choices are:
.IP \[bu] 2
\f[V]errors\f[R] - (the default) causes all the rsync processes to send
an error directly to stderr, even if the process is on the remote side
of the transfer.
Info messages are sent to the client side via the protocol stream.
If stderr is not available (i.e.\ when directly connecting with a daemon
via a socket) errors fall back to being sent via the protocol stream.
.IP \[bu] 2
\f[V]all\f[R] - causes all rsync messages (info and error) to get
written directly to stderr from all (possible) processes.
This causes stderr to become line-buffered (instead of raw) and
eliminates the ability to divide up the info and error messages by file
handle.
For those doing debugging or using several levels of verbosity, this
option can help to avoid clogging up the transfer stream (which should
prevent any chance of a deadlock bug hanging things up).
It also allows \f[V]--debug\f[R] to enable some extra I/O related
messages.
.IP \[bu] 2
\f[V]client\f[R] - causes all rsync messages to be sent to the client
side via the protocol stream.
One client process outputs all messages, with errors on stderr and info
messages on stdout.
This \f[B]was\f[R] the default in older rsync versions, but can cause
error delays when a lot of transfer data is ahead of the messages.
If you\[cq]re pushing files to an older rsync, you may want to use
\f[V]--stderr=all\f[R] since that idiom has been around for several
releases.
.PP
This option was added in rsync 3.2.3.
This version also began the forwarding of a non-default setting to the
remote side, though rsync uses the backward-compatible options
\f[V]--msgs2stderr\f[R] and \f[V]--no-msgs2stderr\f[R] to represent the
\f[V]all\f[R] and \f[V]client\f[R] settings, respectively.
A newer rsync will continue to accept these older option names to
maintain compatibility.
.RE
.IP "  6." 5
\f[V]--quiet\f[R], \f[V]-q\f[R]
.RS 4
.PP
This option decreases the amount of information you are given during the
transfer, notably suppressing information messages from the remote
server.
This option is useful when invoking rsync from cron.
.RE
.IP "  7." 5
\f[V]--no-motd\f[R]
.RS 4
.PP
This option affects the information that is output by the client at the
start of a daemon transfer.
This suppresses the message-of-the-day (MOTD) text, but it also affects
the list of modules that the daemon sends in response to the \[lq]rsync
host::\[rq] request (due to a limitation in the rsync protocol), so omit
this option if you want to request the list of modules from the daemon.
.RE
.IP "  8." 5
\f[V]--ignore-times\f[R], \f[V]-I\f[R]
.RS 4
.PP
Normally rsync will skip any files that are already the same size and
have the same modification timestamp.
This option turns off this \[lq]quick check\[rq] behavior, causing all
files to be updated.
.PP
This option can be confusing compared to \f[V]--ignore-existing\f[R] and
\f[V]--ignore-non-existing\f[R] in that that they cause rsync to
transfer fewer files, while this option causes rsync to transfer more
files.
.RE
.IP "  9." 5
\f[V]--size-only\f[R]
.RS 4
.PP
This modifies rsync\[cq]s \[lq]quick check\[rq] algorithm for finding
files that need to be transferred, changing it from the default of
transferring files with either a changed size or a changed last-modified
time to just looking for files that have changed in size.
This is useful when starting to use rsync after using another mirroring
system which may not preserve timestamps exactly.
.RE
.IP " 10." 5
\f[V]--modify-window=NUM\f[R], \f[V]-\[at]\f[R]
.RS 4
.PP
When comparing two timestamps, rsync treats the timestamps as being
equal if they differ by no more than the modify-window value.
The default is 0, which matches just integer seconds.
If you specify a negative value (and the receiver is at least version
3.1.3) then nanoseconds will also be taken into account.
Specifying 1 is useful for copies to/from MS Windows FAT filesystems,
because FAT represents times with a 2-second resolution (allowing times
to differ from the original by up to 1 second).
.PP
If you want all your transfers to default to comparing nanoseconds, you
can create a \f[V]\[ti]/.popt\f[R] file and put these lines in it:
.RS
.IP
.nf
\f[C]
rsync alias -a -a\[at]-1
rsync alias -t -t\[at]-1
\f[R]
.fi
.RE
.PP
With that as the default, you\[cq]d need to specify
\f[V]--modify-window=0\f[R] (aka \f[V]-\[at]0\f[R]) to override it and
ignore nanoseconds, e.g.\ if you\[cq]re copying between ext3 and ext4,
or if the receiving rsync is older than 3.1.3.
.RE
.IP " 11." 5
\f[V]--checksum\f[R], \f[V]-c\f[R]
.RS 4
.PP
This changes the way rsync checks if the files have been changed and are
in need of a transfer.
Without this option, rsync uses a \[lq]quick check\[rq] that (by
default) checks if each file\[cq]s size and time of last modification
match between the sender and receiver.
This option changes this to compare a 128-bit checksum for each file
that has a matching size.
Generating the checksums means that both sides will expend a lot of disk
I/O reading all the data in the files in the transfer, so this can slow
things down significantly (and this is prior to any reading that will be
done to transfer changed files)
.PP
The sending side generates its checksums while it is doing the
file-system scan that builds the list of the available files.
The receiver generates its checksums when it is scanning for changed
files, and will checksum any file that has the same size as the
corresponding sender\[cq]s file: files with either a changed size or a
changed checksum are selected for transfer.
.PP
Note that rsync always verifies that each \f[I]transferred\f[R] file was
correctly reconstructed on the receiving side by checking a whole-file
checksum that is generated as the file is transferred, but that
automatic after-the-transfer verification has nothing to do with this
option\[cq]s before-the-transfer \[lq]Does this file need to be
updated?\[rq] check.
.PP
The checksum used is auto-negotiated between the client and the server,
but can be overridden using either the \f[V]--checksum-choice\f[R]
(\f[V]--cc\f[R]) option or an environment variable that is discussed in
that option\[cq]s section.
.RE
.IP " 12." 5
\f[V]--archive\f[R], \f[V]-a\f[R]
.RS 4
.PP
This is equivalent to \f[V]-rlptgoD\f[R].
It is a quick way of saying you want recursion and want to preserve
almost everything.
Be aware that it does \f[B]not\f[R] include preserving ACLs
(\f[V]-A\f[R]), xattrs (\f[V]-X\f[R]), atimes (\f[V]-U\f[R]), crtimes
(\f[V]-N\f[R]), nor the finding and preserving of hardlinks
(\f[V]-H\f[R]).
.PP
The only exception to the above equivalence is when
\f[V]--files-from\f[R] is specified, in which case \f[V]-r\f[R] is not
implied.
.RE
.IP " 13." 5
\f[V]--no-OPTION\f[R]
.RS 4
.PP
You may turn off one or more implied options by prefixing the option
name with \[lq]no-\[rq].
Not all positive options have a negated opposite, but a lot do,
including those that can be used to disable an implied option (e.g.
\f[V]--no-D\f[R], \f[V]--no-perms\f[R]) or have different defaults in
various circumstances (e.g.\ \f[V]--no-whole-file\f[R],
\f[V]--no-blocking-io\f[R], \f[V]--no-dirs\f[R]).
Every valid negated option accepts both the short and the long option
name after the \[lq]no-\[rq] prefix (e.g.\ \f[V]--no-R\f[R] is the same
as \f[V]--no-relative\f[R]).
.PP
As an example, if you want to use \f[V]--archive\f[R] (\f[V]-a\f[R]) but
don\[cq]t want \f[V]--owner\f[R] (\f[V]-o\f[R]), instead of converting
\f[V]-a\f[R] into \f[V]-rlptgD\f[R], you can specify \f[V]-a --no-o\f[R]
(aka \f[V]--archive --no-owner\f[R]).
.PP
The order of the options is important: if you specify
\f[V]--no-r -a\f[R], the \f[V]-r\f[R] option would end up being turned
on, the opposite of \f[V]-a --no-r\f[R].
Note also that the side-effects of the \f[V]--files-from\f[R] option are
NOT positional, as it affects the default state of several options and
slightly changes the meaning of \f[V]-a\f[R] (see the
\f[V]--files-from\f[R] option for more details).
.RE
.IP " 14." 5
\f[V]--recursive\f[R], \f[V]-r\f[R]
.RS 4
.PP
This tells rsync to copy directories recursively.
See also \f[V]--dirs\f[R] (\f[V]-d\f[R]) for an option that allows the
scanning of a single directory.
.PP
See the \f[V]--inc-recursive\f[R] option for a discussion of the
incremental recursion for creating the list of files to transfer.
.RE
.IP " 15." 5
\f[V]--inc-recursive\f[R], \f[V]--i-r\f[R]
.RS 4
.PP
This option explicitly enables on incremental recursion when scanning
for files, which is enabled by default when using the
\f[V]--recursive\f[R] option and both sides of the transfer are running
rsync 3.0.0 or newer.
.PP
Incremental recursion uses much less memory than non-incremental, while
also beginning the transfer more quickly (since it doesn\[cq]t need to
scan the entire transfer hierarchy before it starts transferring files).
If no recursion is enabled in the source files, this option has no
effect.
.PP
Some options require rsync to know the full file list, so these options
disable the incremental recursion mode.
These include:
.IP \[bu] 2
\f[V]--delete-before\f[R] (the old default of \f[V]--delete\f[R])
.IP \[bu] 2
\f[V]--delete-after\f[R]
.IP \[bu] 2
\f[V]--prune-empty-dirs\f[R]
.IP \[bu] 2
\f[V]--delay-updates\f[R]
.PP
In order to make \f[V]--delete\f[R] compatible with incremental
recursion, rsync 3.0.0 made \f[V]--delete-during\f[R] the default delete
mode (which was first added in 2.6.4).
.PP
One side-effect of incremental recursion is that any missing
sub-directories inside a recursively-scanned directory are (by default)
created prior to recursing into the sub-dirs.
This earlier creation point (compared to a non-incremental recursion)
allows rsync to then set the modify time of the finished directory right
away (without having to delay that until a bunch of recursive copying
has finished).
However, these early directories don\[cq]t yet have their completed
mode, mtime, or ownership set \[en] they have more restrictive rights
until the subdirectory\[cq]s copying actually begins.
This early-creation idiom can be avoided by using the
\f[V]--omit-dir-times\f[R] option.
.PP
Incremental recursion can be disabled using the
\f[V]--no-inc-recursive\f[R] (\f[V]--no-i-r\f[R]) option.
.RE
.IP " 16." 5
\f[V]--no-inc-recursive\f[R], \f[V]--no-i-r\f[R]
.RS 4
.PP
Disables the new incremental recursion algorithm of the
\f[V]--recursive\f[R] option.
This makes rsync scan the full file list before it begins to transfer
files.
See \f[V]--inc-recursive\f[R] for more info.
.RE
.IP " 17." 5
\f[V]--relative\f[R], \f[V]-R\f[R]
.RS 4
.PP
Use relative paths.
This means that the full path names specified on the command line are
sent to the server rather than just the last parts of the filenames.
This is particularly useful when you want to send several different
directories at the same time.
For example, if you used this command:
.RS
.IP
.nf
\f[C]
rsync -av /foo/bar/baz.c remote:/tmp/
\f[R]
.fi
.RE
.PP
would create a file named baz.c in /tmp/ on the remote machine.
If instead you used
.RS
.IP
.nf
\f[C]
rsync -avR /foo/bar/baz.c remote:/tmp/
\f[R]
.fi
.RE
.PP
then a file named /tmp/foo/bar/baz.c would be created on the remote
machine, preserving its full path.
These extra path elements are called \[lq]implied directories\[rq]
(i.e.\ the \[lq]foo\[rq] and the \[lq]foo/bar\[rq] directories in the
above example).
.PP
Beginning with rsync 3.0.0, rsync always sends these implied directories
as real directories in the file list, even if a path element is really a
symlink on the sending side.
This prevents some really unexpected behaviors when copying the full
path of a file that you didn\[cq]t realize had a symlink in its path.
If you want to duplicate a server-side symlink, include both the symlink
via its path, and referent directory via its real path.
If you\[cq]re dealing with an older rsync on the sending side, you may
need to use the \f[V]--no-implied-dirs\f[R] option.
.PP
It is also possible to limit the amount of path information that is sent
as implied directories for each path you specify.
With a modern rsync on the sending side (beginning with 2.6.7), you can
insert a dot and a slash into the source path, like this:
.RS
.IP
.nf
\f[C]
rsync -avR /foo/./bar/baz.c remote:/tmp/
\f[R]
.fi
.RE
.PP
That would create /tmp/bar/baz.c on the remote machine.
(Note that the dot must be followed by a slash, so \[lq]/foo/.\[rq]
would not be abbreviated.)
For older rsync versions, you would need to use a chdir to limit the
source path.
For example, when pushing files:
.RS
.IP
.nf
\f[C]
(cd /foo; rsync -avR bar/baz.c remote:/tmp/)
\f[R]
.fi
.RE
.PP
(Note that the parens put the two commands into a sub-shell, so that the
\[lq]cd\[rq] command doesn\[cq]t remain in effect for future commands.)
If you\[cq]re pulling files from an older rsync, use this idiom (but
only for a non-daemon transfer):
.RS
.IP
.nf
\f[C]
rsync -avR --rsync-path=\[dq]cd /foo; rsync\[dq] \[rs]
     remote:bar/baz.c /tmp/
\f[R]
.fi
.RE
.RE
.IP " 18." 5
\f[V]--no-implied-dirs\f[R]
.RS 4
.PP
This option affects the default behavior of the \f[V]--relative\f[R]
option.
When it is specified, the attributes of the implied directories from the
source names are not included in the transfer.
This means that the corresponding path elements on the destination
system are left unchanged if they exist, and any missing implied
directories are created with default attributes.
This even allows these implied path elements to have big differences,
such as being a symlink to a directory on the receiving side.
.PP
For instance, if a command-line arg or a files-from entry told rsync to
transfer the file \[lq]path/foo/file\[rq], the directories
\[lq]path\[rq] and \[lq]path/foo\[rq] are implied when
\f[V]--relative\f[R] is used.
If \[lq]path/foo\[rq] is a symlink to \[lq]bar\[rq] on the destination
system, the receiving rsync would ordinarily delete \[lq]path/foo\[rq],
recreate it as a directory, and receive the file into the new directory.
With \f[V]--no-implied-dirs\f[R], the receiving rsync updates
\[lq]path/foo/file\[rq] using the existing path elements, which means
that the file ends up being created in \[lq]path/bar\[rq].
Another way to accomplish this link preservation is to use the
\f[V]--keep-dirlinks\f[R] option (which will also affect symlinks to
directories in the rest of the transfer).
.PP
When pulling files from an rsync older than 3.0.0, you may need to use
this option if the sending side has a symlink in the path you request
and you wish the implied directories to be transferred as normal
directories.
.RE
.IP " 19." 5
\f[V]--backup\f[R], \f[V]-b\f[R]
.RS 4
.PP
With this option, preexisting destination files are renamed as each file
is transferred or deleted.
You can control where the backup file goes and what (if any) suffix gets
appended using the \f[V]--backup-dir\f[R] and \f[V]--suffix\f[R]
options.
.PP
If you don\[cq]t specify \f[V]--backup-dir\f[R]:
.IP "1." 3
the \f[V]--omit-dir-times\f[R] option will be forced on
.IP "2." 3
the use of \f[V]--delete\f[R] (without \f[V]--delete-excluded\f[R]),
causes rsync to add a \[lq]protect\[rq] filter-rule for the backup
suffix to the end of all your existing filters that looks like this:
\f[V]-f \[dq]P *\[ti]\[dq]\f[R].
This rule prevents previously backed-up files from being deleted.
.PP
Note that if you are supplying your own filter rules, you may need to
manually insert your own exclude/protect rule somewhere higher up in the
list so that it has a high enough priority to be effective (e.g.\ if
your rules specify a trailing inclusion/exclusion of \f[V]*\f[R], the
auto-added rule would never be reached).
.RE
.IP " 20." 5
\f[V]--backup-dir=DIR\f[R]
.RS 4
.PP
This implies the \f[V]--backup\f[R] option, and tells rsync to store all
backups in the specified directory on the receiving side.
This can be used for incremental backups.
You can additionally specify a backup suffix using the
\f[V]--suffix\f[R] option (otherwise the files backed up in the
specified directory will keep their original filenames).
.PP
Note that if you specify a relative path, the backup directory will be
relative to the destination directory, so you probably want to specify
either an absolute path or a path that starts with \[lq]../\[rq].
If an rsync daemon is the receiver, the backup dir cannot go outside the
module\[cq]s path hierarchy, so take extra care not to delete it or copy
into it.
.RE
.IP " 21." 5
\f[V]--suffix=SUFFIX\f[R]
.RS 4
.PP
This option allows you to override the default backup suffix used with
the \f[V]--backup\f[R] (\f[V]-b\f[R]) option.
The default suffix is a \f[V]\[ti]\f[R] if no \f[V]--backup-dir\f[R] was
specified, otherwise it is an empty string.
.RE
.IP " 22." 5
\f[V]--update\f[R], \f[V]-u\f[R]
.RS 4
.PP
This forces rsync to skip any files which exist on the destination and
have a modified time that is newer than the source file.
(If an existing destination file has a modification time equal to the
source file\[cq]s, it will be updated if the sizes are different.)
.PP
Note that this does not affect the copying of dirs, symlinks, or other
special files.
Also, a difference of file format between the sender and receiver is
always considered to be important enough for an update, no matter what
date is on the objects.
In other words, if the source has a directory where the destination has
a file, the transfer would occur regardless of the timestamps.
.PP
This option is a TRANSFER RULE, so don\[cq]t expect any exclude side
effects.
.PP
A caution for those that choose to combine \f[V]--inplace\f[R] with
\f[V]--update\f[R]: an interrupted transfer will leave behind a partial
file on the receiving side that has a very recent modified time, so
re-running the transfer will probably \f[B]not\f[R] continue the
interrupted file.
As such, it is usually best to avoid combining this
with\f[V]--inplace\f[R] unless you have implemented manual steps to
handle any interrupted in-progress files.
.RE
.IP " 23." 5
\f[V]--inplace\f[R]
.RS 4
.PP
This option changes how rsync transfers a file when its data needs to be
updated: instead of the default method of creating a new copy of the
file and moving it into place when it is complete, rsync instead writes
the updated data directly to the destination file.
.PP
This has several effects:
.IP \[bu] 2
Hard links are not broken.
This means the new data will be visible through other hard links to the
destination file.
Moreover, attempts to copy differing source files onto a multiply-linked
destination file will result in a \[lq]tug of war\[rq] with the
destination data changing back and forth.
.IP \[bu] 2
In-use binaries cannot be updated (either the OS will prevent this from
happening, or binaries that attempt to swap-in their data will misbehave
or crash).
.IP \[bu] 2
The file\[cq]s data will be in an inconsistent state during the transfer
and will be left that way if the transfer is interrupted or if an update
fails.
.IP \[bu] 2
A file that rsync cannot write to cannot be updated.
While a super user can update any file, a normal user needs to be
granted write permission for the open of the file for writing to be
successful.
.IP \[bu] 2
The efficiency of rsync\[cq]s delta-transfer algorithm may be reduced if
some data in the destination file is overwritten before it can be copied
to a position later in the file.
This does not apply if you use \f[V]--backup\f[R], since rsync is smart
enough to use the backup file as the basis file for the transfer.
.PP
WARNING: you should not use this option to update files that are being
accessed by others, so be careful when choosing to use this for a copy.
.PP
This option is useful for transferring large files with block-based
changes or appended data, and also on systems that are disk bound, not
network bound.
It can also help keep a copy-on-write filesystem snapshot from diverging
the entire contents of a file that only has minor changes.
.PP
The option implies \f[V]--partial\f[R] (since an interrupted transfer
does not delete the file), but conflicts with \f[V]--partial-dir\f[R]
and \f[V]--delay-updates\f[R].
Prior to rsync 2.6.4 \f[V]--inplace\f[R] was also incompatible with
\f[V]--compare-dest\f[R] and \f[V]--link-dest\f[R].
.RE
.IP " 24." 5
\f[V]--append\f[R]
.RS 4
.PP
This special copy mode only works to efficiently update files that are
known to be growing larger where any existing content on the receiving
side is also known to be the same as the content on the sender.
The use of \f[V]--append\f[R] \f[B]can be dangerous\f[R] if you
aren\[cq]t 100% sure that all the files in the transfer are shared,
growing files.
You should thus use filter rules to ensure that you weed out any files
that do not fit this criteria.
.PP
Rsync updates these growing file in-place without verifying any of the
existing content in the file (it only verifies the content that it is
appending).
Rsync skips any files that exist on the receiving side that are not
shorter than the associated file on the sending side (which means that
new files are transferred).
It also skips any files whose size on the sending side gets shorter
during the send negotiations (rsync warns about a \[lq]diminished\[rq]
file when this happens).
.PP
This does not interfere with the updating of a file\[cq]s non-content
attributes (e.g.\ permissions, ownership, etc.)
when the file does not need to be transferred, nor does it affect the
updating of any directories or non-regular files.
.RE
.IP " 25." 5
\f[V]--append-verify\f[R]
.RS 4
.PP
This special copy mode works like \f[V]--append\f[R] except that all the
data in the file is included in the checksum verification (making it
less efficient but also potentially safer).
This option \f[B]can be dangerous\f[R] if you aren\[cq]t 100% sure that
all the files in the transfer are shared, growing files.
See the \f[V]--append\f[R] option for more details.
.PP
Note: prior to rsync 3.0.0, the \f[V]--append\f[R] option worked like
\f[V]--append-verify\f[R], so if you are interacting with an older rsync
(or the transfer is using a protocol prior to 30), specifying either
append option will initiate an \f[V]--append-verify\f[R] transfer.
.RE
.IP " 26." 5
\f[V]--dirs\f[R], \f[V]-d\f[R]
.RS 4
.PP
Tell the sending side to include any directories that are encountered.
Unlike \f[V]--recursive\f[R], a directory\[cq]s contents are not copied
unless the directory name specified is \[lq].\[rq] or ends with a
trailing slash (e.g.
\[lq].\[rq], \[lq]dir/.\[rq], \[lq]dir/\[rq], etc.).
Without this option or the \f[V]--recursive\f[R] option, rsync will skip
all directories it encounters (and output a message to that effect for
each one).
If you specify both \f[V]--dirs\f[R] and \f[V]--recursive\f[R],
\f[V]--recursive\f[R] takes precedence.
.PP
The \f[V]--dirs\f[R] option is implied by the \f[V]--files-from\f[R]
option or the \f[V]--list-only\f[R] option (including an implied
\f[V]--list-only\f[R] usage) if \f[V]--recursive\f[R] wasn\[cq]t
specified (so that directories are seen in the listing).
Specify \f[V]--no-dirs\f[R] (or \f[V]--no-d\f[R]) if you want to turn
this off.
.PP
There is also a backward-compatibility helper option,
\f[V]--old-dirs\f[R] (\f[V]--old-d\f[R]) that tells rsync to use a hack
of \f[V]-r --exclude=\[aq]/*/*\[aq]\f[R] to get an older rsync to list a
single directory without recursing.
.RE
.IP " 27." 5
\f[V]--mkpath\f[R]
.RS 4
.PP
Create all missing path components of the destination path.
.PP
By default, rsync allows only the final component of the destination
path to not exist, which is an attempt to help you to validate your
destination path.
With this option, rsync creates all the missing destination-path
components, just as if \f[V]mkdir -p $DEST_PATH\f[R] had been run on the
receiving side.
.PP
When specifying a destination path, including a trailing slash ensures
that the whole path is treated as directory names to be created, even
when the file list has a single item.
See the COPYING TO A DIFFERENT NAME section for full details on how
rsync decides if a final destination-path component should be created as
a directory or not.
.PP
If you would like the newly-created destination dirs to match the dirs
on the sending side, you should be using \f[V]--relative\f[R]
(\f[V]-R\f[R]) instead of \f[V]--mkpath\f[R].
For instance, the following two commands result in the same destination
tree, but only the second command ensures that the
\[lq]some/extra/path\[rq] components match the dirs on the sending side:
.RS
.IP
.nf
\f[C]
rsync -ai --mkpath host:some/extra/path/*.c some/extra/path/
rsync -aiR host:some/extra/path/*.c ./
\f[R]
.fi
.RE
.RE
.IP " 28." 5
\f[V]--links\f[R], \f[V]-l\f[R]
.RS 4
.PP
Add symlinks to the transferred files instead of noisily ignoring them
with a \[lq]non-regular file\[rq] warning for each symlink encountered.
You can alternately silence the warning by specifying
\f[V]--info=nonreg0\f[R].
.PP
The default handling of symlinks is to recreate each symlink\[cq]s
unchanged value on the receiving side.
.PP
See the SYMBOLIC LINKS section for multi-option info.
.RE
.IP " 29." 5
\f[V]--copy-links\f[R], \f[V]-L\f[R]
.RS 4
.PP
The sender transforms each symlink encountered in the transfer into the
referent item, following the symlink chain to the file or directory that
it references.
If a symlink chain is broken, an error is output and the file is dropped
from the transfer.
.PP
This option supersedes any other options that affect symlinks in the
transfer, since there are no symlinks left in the transfer.
.PP
This option does not change the handling of existing symlinks on the
receiving side, unlike versions of rsync prior to 2.6.3 which had the
side-effect of telling the receiving side to also follow symlinks.
A modern rsync won\[cq]t forward this option to a remote receiver (since
only the sender needs to know about it), so this caveat should only
affect someone using an rsync client older than 2.6.7 (which is when
\f[V]-L\f[R] stopped being forwarded to the receiver).
.PP
See the \f[V]--keep-dirlinks\f[R] (\f[V]-K\f[R]) if you need a symlink
to a directory to be treated as a real directory on the receiving side.
.PP
See the SYMBOLIC LINKS section for multi-option info.
.RE
.IP " 30." 5
\f[V]--copy-unsafe-links\f[R]
.RS 4
.PP
This tells rsync to copy the referent of symbolic links that point
outside the copied tree.
Absolute symlinks are also treated like ordinary files, and so are any
symlinks in the source path itself when \f[V]--relative\f[R] is used.
.PP
Note that the cut-off point is the top of the transfer, which is the
part of the path that rsync isn\[cq]t mentioning in the verbose output.
If you copy \[lq]/src/subdir\[rq] to \[lq]/dest/\[rq] then the
\[lq]subdir\[rq] directory is a name inside the transfer tree, not the
top of the transfer (which is /src) so it is legal for created relative
symlinks to refer to other names inside the /src and /dest directories.
If you instead copy \[lq]/src/subdir/\[rq] (with a trailing slash) to
\[lq]/dest/subdir\[rq] that would not allow symlinks to any files
outside of \[lq]subdir\[rq].
.PP
Note that safe symlinks are only copied if \f[V]--links\f[R] was also
specified or implied.
The \f[V]--copy-unsafe-links\f[R] option has no extra effect when
combined with \f[V]--copy-links\f[R].
.PP
See the SYMBOLIC LINKS section for multi-option info.
.RE
.IP " 31." 5
\f[V]--safe-links\f[R]
.RS 4
.PP
This tells the receiving rsync to ignore any symbolic links in the
transfer which point outside the copied tree.
All absolute symlinks are also ignored.
.PP
Since this ignoring is happening on the receiving side, it will still be
effective even when the sending side has munged symlinks (when it is
using \f[V]--munge-links\f[R]).
It also affects deletions, since the file being present in the transfer
prevents any matching file on the receiver from being deleted when the
symlink is deemed to be unsafe and is skipped.
.PP
This option must be combined with \f[V]--links\f[R] (or
\f[V]--archive\f[R]) to have any symlinks in the transfer to
conditionally ignore.
Its effect is superseded by \f[V]--copy-unsafe-links\f[R].
.PP
Using this option in conjunction with \f[V]--relative\f[R] may give
unexpected results.
.PP
See the SYMBOLIC LINKS section for multi-option info.
.RE
.IP " 32." 5
\f[V]--munge-links\f[R]
.RS 4
.PP
This option affects just one side of the transfer and tells rsync to
munge symlink values when it is receiving files or unmunge symlink
values when it is sending files.
The munged values make the symlinks unusable on disk but allows the
original contents of the symlinks to be recovered.
.PP
The server-side rsync often enables this option without the client\[cq]s
knowledge, such as in an rsync daemon\[cq]s configuration file or by an
option given to the rrsync (restricted rsync) script.
When specified on the client side, specify the option normally if it is
the client side that has/needs the munged symlinks, or use
\f[V]-M--munge-links\f[R] to give the option to the server when it
has/needs the munged symlinks.
Note that on a local transfer, the client is the sender, so specifying
the option directly unmunges symlinks while specifying it as a remote
option munges symlinks.
.PP
This option has no effect when sent to a daemon via
\f[V]--remote-option\f[R] because the daemon configures whether it wants
munged symlinks via its \[lq]\f[V]munge symlinks\f[R]\[rq] parameter.
.PP
The symlink value is munged/unmunged once it is in the transfer, so any
option that transforms symlinks into non-symlinks occurs prior to the
munging/unmunging \f[B]except\f[R] for \f[V]--safe-links\f[R], which is
a choice that the receiver makes, so it bases its decision on the
munged/unmunged value.
This does mean that if a receiver has munging enabled, that using
\f[V]--safe-links\f[R] will cause all symlinks to be ignored (since they
are all absolute).
.PP
The method that rsync uses to munge the symlinks is to prefix each
one\[cq]s value with the string \[lq]/rsyncd-munged/\[rq].
This prevents the links from being used as long as the directory does
not exist.
When this option is enabled, rsync will refuse to run if that path is a
directory or a symlink to a directory (though it only checks at
startup).
See also the \[lq]munge-symlinks\[rq] python script in the support
directory of the source code for a way to munge/unmunge one or more
symlinks in-place.
.RE
.IP " 33." 5
\f[V]--copy-dirlinks\f[R], \f[V]-k\f[R]
.RS 4
.PP
This option causes the sending side to treat a symlink to a directory as
though it were a real directory.
This is useful if you don\[cq]t want symlinks to non-directories to be
affected, as they would be using \f[V]--copy-links\f[R].
.PP
Without this option, if the sending side has replaced a directory with a
symlink to a directory, the receiving side will delete anything that is
in the way of the new symlink, including a directory hierarchy (as long
as \f[V]--force\f[R] or \f[V]--delete\f[R] is in effect).
.PP
See also \f[V]--keep-dirlinks\f[R] for an analogous option for the
receiving side.
.PP
\f[V]--copy-dirlinks\f[R] applies to all symlinks to directories in the
source.
If you want to follow only a few specified symlinks, a trick you can use
is to pass them as additional source args with a trailing slash, using
\f[V]--relative\f[R] to make the paths match up right.
For example:
.RS
.IP
.nf
\f[C]
rsync -r --relative src/./ src/./follow-me/ dest/
\f[R]
.fi
.RE
.PP
This works because rsync calls \f[B]lstat\f[R](2) on the source arg as
given, and the trailing slash makes \f[B]lstat\f[R](2) follow the
symlink, giving rise to a directory in the file-list which overrides the
symlink found during the scan of \[lq]src/./\[rq].
.PP
See the SYMBOLIC LINKS section for multi-option info.
.RE
.IP " 34." 5
\f[V]--keep-dirlinks\f[R], \f[V]-K\f[R]
.RS 4
.PP
This option causes the receiving side to treat a symlink to a directory
as though it were a real directory, but only if it matches a real
directory from the sender.
Without this option, the receiver\[cq]s symlink would be deleted and
replaced with a real directory.
.PP
For example, suppose you transfer a directory \[lq]foo\[rq] that
contains a file \[lq]file\[rq], but \[lq]foo\[rq] is a symlink to
directory \[lq]bar\[rq] on the receiver.
Without \f[V]--keep-dirlinks\f[R], the receiver deletes symlink
\[lq]foo\[rq], recreates it as a directory, and receives the file into
the new directory.
With \f[V]--keep-dirlinks\f[R], the receiver keeps the symlink and
\[lq]file\[rq] ends up in \[lq]bar\[rq].
.PP
One note of caution: if you use \f[V]--keep-dirlinks\f[R], you must
trust all the symlinks in the copy or enable the \f[V]--munge-links\f[R]
option on the receiving side!
If it is possible for an untrusted user to create their own symlink to
any real directory, the user could then (on a subsequent copy) replace
the symlink with a real directory and affect the content of whatever
directory the symlink references.
For backup copies, you are better off using something like a bind mount
instead of a symlink to modify your receiving hierarchy.
.PP
See also \f[V]--copy-dirlinks\f[R] for an analogous option for the
sending side.
.PP
See the SYMBOLIC LINKS section for multi-option info.
.RE
.IP " 35." 5
\f[V]--hard-links\f[R], \f[V]-H\f[R]
.RS 4
.PP
This tells rsync to look for hard-linked files in the source and link
together the corresponding files on the destination.
Without this option, hard-linked files in the source are treated as
though they were separate files.
.PP
This option does NOT necessarily ensure that the pattern of hard links
on the destination exactly matches that on the source.
Cases in which the destination may end up with extra hard links include
the following:
.IP \[bu] 2
If the destination contains extraneous hard-links (more linking than
what is present in the source file list), the copying algorithm will not
break them explicitly.
However, if one or more of the paths have content differences, the
normal file-update process will break those extra links (unless you are
using the \f[V]--inplace\f[R] option).
.IP \[bu] 2
If you specify a \f[V]--link-dest\f[R] directory that contains hard
links, the linking of the destination files against the
\f[V]--link-dest\f[R] files can cause some paths in the destination to
become linked together due to the \f[V]--link-dest\f[R] associations.
.PP
Note that rsync can only detect hard links between files that are inside
the transfer set.
If rsync updates a file that has extra hard-link connections to files
outside the transfer, that linkage will be broken.
If you are tempted to use the \f[V]--inplace\f[R] option to avoid this
breakage, be very careful that you know how your files are being updated
so that you are certain that no unintended changes happen due to
lingering hard links (and see the \f[V]--inplace\f[R] option for more
caveats).
.PP
If incremental recursion is active (see \f[V]--inc-recursive\f[R]),
rsync may transfer a missing hard-linked file before it finds that
another link for that contents exists elsewhere in the hierarchy.
This does not affect the accuracy of the transfer (i.e.\ which files are
hard-linked together), just its efficiency (i.e.\ copying the data for a
new, early copy of a hard-linked file that could have been found later
in the transfer in another member of the hard-linked set of files).
One way to avoid this inefficiency is to disable incremental recursion
using the \f[V]--no-inc-recursive\f[R] option.
.RE
.IP " 36." 5
\f[V]--perms\f[R], \f[V]-p\f[R]
.RS 4
.PP
This option causes the receiving rsync to set the destination
permissions to be the same as the source permissions.
(See also the \f[V]--chmod\f[R] option for a way to modify what rsync
considers to be the source permissions.)
.PP
When this option is \f[I]off\f[R], permissions are set as follows:
.IP \[bu] 2
Existing files (including updated files) retain their existing
permissions, though the \f[V]--executability\f[R] option might change
just the execute permission for the file.
.IP \[bu] 2
New files get their \[lq]normal\[rq] permission bits set to the source
file\[cq]s permissions masked with the receiving directory\[cq]s default
permissions (either the receiving process\[cq]s umask, or the
permissions specified via the destination directory\[cq]s default ACL),
and their special permission bits disabled except in the case where a
new directory inherits a setgid bit from its parent directory.
.PP
Thus, when \f[V]--perms\f[R] and \f[V]--executability\f[R] are both
disabled, rsync\[cq]s behavior is the same as that of other file-copy
utilities, such as \f[B]cp\f[R](1) and \f[B]tar\f[R](1).
.PP
In summary: to give destination files (both old and new) the source
permissions, use \f[V]--perms\f[R].
To give new files the destination-default permissions (while leaving
existing files unchanged), make sure that the \f[V]--perms\f[R] option
is off and use \f[V]--chmod=ugo=rwX\f[R] (which ensures that all
non-masked bits get enabled).
If you\[cq]d care to make this latter behavior easier to type, you could
define a popt alias for it, such as putting this line in the file
\f[V]\[ti]/.popt\f[R] (the following defines the \f[V]-Z\f[R] option,
and includes \f[V]--no-g\f[R] to use the default group of the
destination dir):
.RS
.IP
.nf
\f[C]
 rsync alias -Z --no-p --no-g --chmod=ugo=rwX
\f[R]
.fi
.RE
.PP
You could then use this new option in a command such as this one:
.RS
.IP
.nf
\f[C]
 rsync -avZ src/ dest/
\f[R]
.fi
.RE
.PP
(Caveat: make sure that \f[V]-a\f[R] does not follow \f[V]-Z\f[R], or it
will re-enable the two \f[V]--no-*\f[R] options mentioned above.)
.PP
The preservation of the destination\[cq]s setgid bit on newly-created
directories when \f[V]--perms\f[R] is off was added in rsync 2.6.7.
Older rsync versions erroneously preserved the three special permission
bits for newly-created files when \f[V]--perms\f[R] was off, while
overriding the destination\[cq]s setgid bit setting on a newly-created
directory.
Default ACL observance was added to the ACL patch for rsync 2.6.7, so
older (or non-ACL-enabled) rsyncs use the umask even if default ACLs are
present.
(Keep in mind that it is the version of the receiving rsync that affects
these behaviors.)
.RE
.IP " 37." 5
\f[V]--executability\f[R], \f[V]-E\f[R]
.RS 4
.PP
This option causes rsync to preserve the executability (or
non-executability) of regular files when \f[V]--perms\f[R] is not
enabled.
A regular file is considered to be executable if at least one `x' is
turned on in its permissions.
When an existing destination file\[cq]s executability differs from that
of the corresponding source file, rsync modifies the destination
file\[cq]s permissions as follows:
.IP \[bu] 2
To make a file non-executable, rsync turns off all its `x' permissions.
.IP \[bu] 2
To make a file executable, rsync turns on each `x' permission that has a
corresponding `r' permission enabled.
.PP
If \f[V]--perms\f[R] is enabled, this option is ignored.
.RE
.IP " 38." 5
\f[V]--acls\f[R], \f[V]-A\f[R]
.RS 4
.PP
This option causes rsync to update the destination ACLs to be the same
as the source ACLs.
The option also implies \f[V]--perms\f[R].
.PP
The source and destination systems must have compatible ACL entries for
this option to work properly.
See the \f[V]--fake-super\f[R] option for a way to backup and restore
ACLs that are not compatible.
.RE
.IP " 39." 5
\f[V]--xattrs\f[R], \f[V]-X\f[R]
.RS 4
.PP
This option causes rsync to update the destination extended attributes
to be the same as the source ones.
.PP
For systems that support extended-attribute namespaces, a copy being
done by a super-user copies all namespaces except system.*.
A normal user only copies the user.* namespace.
To be able to backup and restore non-user namespaces as a normal user,
see the \f[V]--fake-super\f[R] option.
.PP
The above name filtering can be overridden by using one or more filter
options with the \f[B]x\f[R] modifier.
When you specify an xattr-affecting filter rule, rsync requires that you
do your own system/user filtering, as well as any additional filtering
for what xattr names are copied and what names are allowed to be
deleted.
For example, to skip the system namespace, you could specify:
.RS
.IP
.nf
\f[C]
--filter=\[aq]-x system.*\[aq]
\f[R]
.fi
.RE
.PP
To skip all namespaces except the user namespace, you could specify a
negated-user match:
.RS
.IP
.nf
\f[C]
--filter=\[aq]-x! user.*\[aq]
\f[R]
.fi
.RE
.PP
To prevent any attributes from being deleted, you could specify a
receiver-only rule that excludes all names:
.RS
.IP
.nf
\f[C]
--filter=\[aq]-xr *\[aq]
\f[R]
.fi
.RE
.PP
Note that the \f[V]-X\f[R] option does not copy rsync\[cq]s special
xattr values (e.g.
those used by \f[V]--fake-super\f[R]) unless you repeat the option
(e.g.\ \f[V]-XX\f[R]).
This \[lq]copy all xattrs\[rq] mode cannot be used with
\f[V]--fake-super\f[R].
.RE
.IP " 40." 5
\f[V]--chmod=CHMOD\f[R]
.RS 4
.PP
This option tells rsync to apply one or more comma-separated
\[lq]chmod\[rq] modes to the permission of the files in the transfer.
The resulting value is treated as though it were the permissions that
the sending side supplied for the file, which means that this option can
seem to have no effect on existing files if \f[V]--perms\f[R] is not
enabled.
.PP
In addition to the normal parsing rules specified in the
\f[B]chmod\f[R](1) manpage, you can specify an item that should only
apply to a directory by prefixing it with a `D', or specify an item that
should only apply to a file by prefixing it with a `F'.
For example, the following will ensure that all directories get marked
set-gid, that no files are other-writable, that both are user-writable
and group-writable, and that both have consistent executability across
all bits:
.RS
.IP
.nf
\f[C]
--chmod=Dg+s,ug+w,Fo-w,+X
\f[R]
.fi
.RE
.PP
Using octal mode numbers is also allowed:
.RS
.IP
.nf
\f[C]
--chmod=D2775,F664
\f[R]
.fi
.RE
.PP
It is also legal to specify multiple \f[V]--chmod\f[R] options, as each
additional option is just appended to the list of changes to make.
.PP
See the \f[V]--perms\f[R] and \f[V]--executability\f[R] options for how
the resulting permission value can be applied to the files in the
transfer.
.RE
.IP " 41." 5
\f[V]--owner\f[R], \f[V]-o\f[R]
.RS 4
.PP
This option causes rsync to set the owner of the destination file to be
the same as the source file, but only if the receiving rsync is being
run as the super-user (see also the \f[V]--super\f[R] and
\f[V]--fake-super\f[R] options).
Without this option, the owner of new and/or transferred files are set
to the invoking user on the receiving side.
.PP
The preservation of ownership will associate matching names by default,
but may fall back to using the ID number in some circumstances (see also
the \f[V]--numeric-ids\f[R] option for a full discussion).
.RE
.IP " 42." 5
\f[V]--group\f[R], \f[V]-g\f[R]
.RS 4
.PP
This option causes rsync to set the group of the destination file to be
the same as the source file.
If the receiving program is not running as the super-user (or if
\f[V]--no-super\f[R] was specified), only groups that the invoking user
on the receiving side is a member of will be preserved.
Without this option, the group is set to the default group of the
invoking user on the receiving side.
.PP
The preservation of group information will associate matching names by
default, but may fall back to using the ID number in some circumstances
(see also the \f[V]--numeric-ids\f[R] option for a full discussion).
.RE
.IP " 43." 5
\f[V]--devices\f[R]
.RS 4
.PP
This option causes rsync to transfer character and block device files to
the remote system to recreate these devices.
If the receiving rsync is not being run as the super-user, rsync
silently skips creating the device files (see also the \f[V]--super\f[R]
and \f[V]--fake-super\f[R] options).
.PP
By default, rsync generates a \[lq]non-regular file\[rq] warning for
each device file encountered when this option is not set.
You can silence the warning by specifying \f[V]--info=nonreg0\f[R].
.RE
.IP " 44." 5
\f[V]--specials\f[R]
.RS 4
.PP
This option causes rsync to transfer special files, such as named
sockets and fifos.
If the receiving rsync is not being run as the super-user, rsync
silently skips creating the special files (see also the
\f[V]--super\f[R] and \f[V]--fake-super\f[R] options).
.PP
By default, rsync generates a \[lq]non-regular file\[rq] warning for
each special file encountered when this option is not set.
You can silence the warning by specifying \f[V]--info=nonreg0\f[R].
.RE
.IP " 45." 5
\f[V]-D\f[R]
.RS 4
.PP
The \f[V]-D\f[R] option is equivalent to \[lq]\f[V]--devices\f[R]
\f[V]--specials\f[R]\[rq].
.RE
.IP " 46." 5
\f[V]--copy-devices\f[R]
.RS 4
.PP
This tells rsync to treat a device on the sending side as a regular
file, allowing it to be copied to a normal destination file (or another
device if \f[V]--write-devices\f[R] was also specified).
.PP
This option is refused by default by an rsync daemon.
.RE
.IP " 47." 5
\f[V]--write-devices\f[R]
.RS 4
.PP
This tells rsync to treat a device on the receiving side as a regular
file, allowing the writing of file data into a device.
.PP
This option implies the \f[V]--inplace\f[R] option.
.PP
Be careful using this, as you should know what devices are present on
the receiving side of the transfer, especially when running rsync as
root.
.PP
This option is refused by default by an rsync daemon.
.RE
.IP " 48." 5
\f[V]--times\f[R], \f[V]-t\f[R]
.RS 4
.PP
This tells rsync to transfer modification times along with the files and
update them on the remote system.
Note that if this option is not used, the optimization that excludes
files that have not been modified cannot be effective; in other words, a
missing \f[V]-t\f[R] (or \f[V]-a\f[R]) will cause the next transfer to
behave as if it used \f[V]--ignore-times\f[R] (\f[V]-I\f[R]), causing
all files to be updated (though rsync\[cq]s delta-transfer algorithm
will make the update fairly efficient if the files haven\[cq]t actually
changed, you\[cq]re much better off using \f[V]-t\f[R]).
.PP
A modern rsync that is using transfer protocol 30 or 31 conveys a modify
time using up to 8-bytes.
If rsync is forced to speak an older protocol (perhaps due to the remote
rsync being older than 3.0.0) a modify time is conveyed using 4-bytes.
Prior to 3.2.7, these shorter values could convey a date range of
13-Dec-1901 to 19-Jan-2038.
Beginning with 3.2.7, these 4-byte values now convey a date range of
1-Jan-1970 to 7-Feb-2106.
If you have files dated older than 1970, make sure your rsync
executables are upgraded so that the full range of dates can be
conveyed.
.RE
.IP " 49." 5
\f[V]--atimes\f[R], \f[V]-U\f[R]
.RS 4
.PP
This tells rsync to set the access (use) times of the destination files
to the same value as the source files.
.PP
If repeated, it also sets the \f[V]--open-noatime\f[R] option, which can
help you to make the sending and receiving systems have the same access
times on the transferred files without needing to run rsync an extra
time after a file is transferred.
.PP
Note that some older rsync versions (prior to 3.2.0) may have been built
with a pre-release \f[V]--atimes\f[R] patch that does not imply
\f[V]--open-noatime\f[R] when this option is repeated.
.RE
.IP " 50." 5
\f[V]--open-noatime\f[R]
.RS 4
.PP
This tells rsync to open files with the O_NOATIME flag (on systems that
support it) to avoid changing the access time of the files that are
being transferred.
If your OS does not support the O_NOATIME flag then rsync will silently
ignore this option.
Note also that some filesystems are mounted to avoid updating the atime
on read access even without the O_NOATIME flag being set.
.RE
.IP " 51." 5
\f[V]--crtimes\f[R], \f[V]-N,\f[R]
.RS 4
.PP
This tells rsync to set the create times (newness) of the destination
files to the same value as the source files.
Your OS & filesystem must support the setting of arbitrary creation
(birth) times for this option to be supported.
.RE
.IP " 52." 5
\f[V]--omit-dir-times\f[R], \f[V]-O\f[R]
.RS 4
.PP
This tells rsync to omit directories when it is preserving modification,
access, and create times.
If NFS is sharing the directories on the receiving side, it is a good
idea to use \f[V]-O\f[R].
This option is inferred if you use \f[V]--backup\f[R] without
\f[V]--backup-dir\f[R].
.PP
This option also has the side-effect of avoiding early creation of
missing sub-directories when incremental recursion is enabled, as
discussed in the \f[V]--inc-recursive\f[R] section.
.RE
.IP " 53." 5
\f[V]--omit-link-times\f[R], \f[V]-J\f[R]
.RS 4
.PP
This tells rsync to omit symlinks when it is preserving modification,
access, and create times.
.RE
.IP " 54." 5
\f[V]--super\f[R]
.RS 4
.PP
This tells the receiving side to attempt super-user activities even if
the receiving rsync wasn\[cq]t run by the super-user.
These activities include: preserving users via the \f[V]--owner\f[R]
option, preserving all groups (not just the current user\[cq]s groups)
via the \f[V]--group\f[R] option, and copying devices via the
\f[V]--devices\f[R] option.
This is useful for systems that allow such activities without being the
super-user, and also for ensuring that you will get errors if the
receiving side isn\[cq]t being run as the super-user.
To turn off super-user activities, the super-user can use
\f[V]--no-super\f[R].
.RE
.IP " 55." 5
\f[V]--fake-super\f[R]
.RS 4
.PP
When this option is enabled, rsync simulates super-user activities by
saving/restoring the privileged attributes via special extended
attributes that are attached to each file (as needed).
This includes the file\[cq]s owner and group (if it is not the default),
the file\[cq]s device info (device & special files are created as empty
text files), and any permission bits that we won\[cq]t allow to be set
on the real file (e.g.\ the real file gets u-s,g-s,o-t for safety) or
that would limit the owner\[cq]s access (since the real super-user can
always access/change a file, the files we create can always be
accessed/changed by the creating user).
This option also handles ACLs (if \f[V]--acls\f[R] was specified) and
non-user extended attributes (if \f[V]--xattrs\f[R] was specified).
.PP
This is a good way to backup data without using a super-user, and to
store ACLs from incompatible systems.
.PP
The \f[V]--fake-super\f[R] option only affects the side where the option
is used.
To affect the remote side of a remote-shell connection, use the
\f[V]--remote-option\f[R] (\f[V]-M\f[R]) option:
.RS
.IP
.nf
\f[C]
rsync -av -M--fake-super /src/ host:/dest/
\f[R]
.fi
.RE
.PP
For a local copy, this option affects both the source and the
destination.
If you wish a local copy to enable this option just for the destination
files, specify \f[V]-M--fake-super\f[R].
If you wish a local copy to enable this option just for the source
files, combine \f[V]--fake-super\f[R] with \f[V]-M--super\f[R].
.PP
This option is overridden by both \f[V]--super\f[R] and
\f[V]--no-super\f[R].
.PP
See also the \f[V]fake super\f[R] setting in the daemon\[cq]s
rsyncd.conf file.
.RE
.IP " 56." 5
\f[V]--sparse\f[R], \f[V]-S\f[R]
.RS 4
.PP
Try to handle sparse files efficiently so they take up less space on the
destination.
If combined with \f[V]--inplace\f[R] the file created might not end up
with sparse blocks with some combinations of kernel version and/or
filesystem type.
If \f[V]--whole-file\f[R] is in effect (e.g.\ for a local copy) then it
will always work because rsync truncates the file prior to writing out
the updated version.
.PP
Note that versions of rsync older than 3.1.3 will reject the combination
of \f[V]--sparse\f[R] and \f[V]--inplace\f[R].
.RE
.IP " 57." 5
\f[V]--preallocate\f[R]
.RS 4
.PP
This tells the receiver to allocate each destination file to its
eventual size before writing data to the file.
Rsync will only use the real filesystem-level preallocation support
provided by Linux\[cq]s \f[B]fallocate\f[R](2) system call or
Cygwin\[cq]s \f[B]posix_fallocate\f[R](3), not the slow glibc
implementation that writes a null byte into each block.
.PP
Without this option, larger files may not be entirely contiguous on the
filesystem, but with this option rsync will probably copy more slowly.
If the destination is not an extent-supporting filesystem (such as ext4,
xfs, NTFS, etc.), this option may have no positive effect at all.
.PP
If combined with \f[V]--sparse\f[R], the file will only have sparse
blocks (as opposed to allocated sequences of null bytes) if the kernel
version and filesystem type support creating holes in the allocated
data.
.RE
.IP " 58." 5
\f[V]--dry-run\f[R], \f[V]-n\f[R]
.RS 4
.PP
This makes rsync perform a trial run that doesn\[cq]t make any changes
(and produces mostly the same output as a real run).
It is most commonly used in combination with the \f[V]--verbose\f[R]
(\f[V]-v\f[R]) and/or \f[V]--itemize-changes\f[R] (\f[V]-i\f[R]) options
to see what an rsync command is going to do before one actually runs it.
.PP
The output of \f[V]--itemize-changes\f[R] is supposed to be exactly the
same on a dry run and a subsequent real run (barring intentional
trickery and system call failures); if it isn\[cq]t, that\[cq]s a bug.
Other output should be mostly unchanged, but may differ in some areas.
Notably, a dry run does not send the actual data for file transfers, so
\f[V]--progress\f[R] has no effect, the \[lq]bytes sent\[rq], \[lq]bytes
received\[rq], \[lq]literal data\[rq], and \[lq]matched data\[rq]
statistics are too small, and the \[lq]speedup\[rq] value is equivalent
to a run where no file transfers were needed.
.RE
.IP " 59." 5
\f[V]--whole-file\f[R], \f[V]-W\f[R]
.RS 4
.PP
This option disables rsync\[cq]s delta-transfer algorithm, which causes
all transferred files to be sent whole.
The transfer may be faster if this option is used when the bandwidth
between the source and destination machines is higher than the bandwidth
to disk (especially when the \[lq]disk\[rq] is actually a networked
filesystem).
This is the default when both the source and destination are specified
as local paths, but only if no batch-writing option is in effect.
.RE
.IP " 60." 5
\f[V]--no-whole-file\f[R], \f[V]--no-W\f[R]
.RS 4
.PP
Disable whole-file updating when it is enabled by default for a local
transfer.
This usually slows rsync down, but it can be useful if you are trying to
minimize the writes to the destination file (if combined with
\f[V]--inplace\f[R]) or for testing the checksum-based update algorithm.
.PP
See also the \f[V]--whole-file\f[R] option.
.RE
.IP " 61." 5
\f[V]--checksum-choice=STR\f[R], \f[V]--cc=STR\f[R]
.RS 4
.PP
This option overrides the checksum algorithms.
If one algorithm name is specified, it is used for both the transfer
checksums and (assuming \f[V]--checksum\f[R] is specified) the
pre-transfer checksums.
If two comma-separated names are supplied, the first name affects the
transfer checksums, and the second name affects the pre-transfer
checksums (\f[V]-c\f[R]).
.PP
The checksum options that you may be able to use are:
.IP \[bu] 2
\f[V]auto\f[R] (the default automatic choice)
.IP \[bu] 2
\f[V]xxh128\f[R]
.IP \[bu] 2
\f[V]xxh3\f[R]
.IP \[bu] 2
\f[V]xxh64\f[R] (aka \f[V]xxhash\f[R])
.IP \[bu] 2
\f[V]md5\f[R]
.IP \[bu] 2
\f[V]md4\f[R]
.IP \[bu] 2
\f[V]sha1\f[R]
.IP \[bu] 2
\f[V]none\f[R]
.PP
Run \f[V]rsync --version\f[R] to see the default checksum list compiled
into your version (which may differ from the list above).
.PP
If \[lq]none\[rq] is specified for the first (or only) name, the
\f[V]--whole-file\f[R] option is forced on and no checksum verification
is performed on the transferred data.
If \[lq]none\[rq] is specified for the second (or only) name, the
\f[V]--checksum\f[R] option cannot be used.
.PP
The \[lq]auto\[rq] option is the default, where rsync bases its
algorithm choice on a negotiation between the client and the server as
follows:
.PP
When both sides of the transfer are at least 3.2.0, rsync chooses the
first algorithm in the client\[cq]s list of choices that is also in the
server\[cq]s list of choices.
If no common checksum choice is found, rsync exits with an error.
If the remote rsync is too old to support checksum negotiation, a value
is chosen based on the protocol version (which chooses between MD5 and
various flavors of MD4 based on protocol age).
.PP
The default order can be customized by setting the environment variable
\f[V]RSYNC_CHECKSUM_LIST\f[R] to a space-separated list of acceptable
checksum names.
If the string contains a \[lq]\f[V]&\f[R]\[rq] character, it is
separated into the \[lq]client string & server string\[rq], otherwise
the same string applies to both.
If the string (or string portion) contains no non-whitespace characters,
the default checksum list is used.
This method does not allow you to specify the transfer checksum
separately from the pre-transfer checksum, and it discards
\[lq]auto\[rq] and all unknown checksum names.
A list with only invalid names results in a failed negotiation.
.PP
The use of the \f[V]--checksum-choice\f[R] option overrides this
environment list.
.RE
.IP " 62." 5
\f[V]--one-file-system\f[R], \f[V]-x\f[R]
.RS 4
.PP
This tells rsync to avoid crossing a filesystem boundary when recursing.
This does not limit the user\[cq]s ability to specify items to copy from
multiple filesystems, just rsync\[cq]s recursion through the hierarchy
of each directory that the user specified, and also the analogous
recursion on the receiving side during deletion.
Also keep in mind that rsync treats a \[lq]bind\[rq] mount to the same
device as being on the same filesystem.
.PP
If this option is repeated, rsync omits all mount-point directories from
the copy.
Otherwise, it includes an empty directory at each mount-point it
encounters (using the attributes of the mounted directory because those
of the underlying mount-point directory are inaccessible).
.PP
If rsync has been told to collapse symlinks (via \f[V]--copy-links\f[R]
or \f[V]--copy-unsafe-links\f[R]), a symlink to a directory on another
device is treated like a mount-point.
Symlinks to non-directories are unaffected by this option.
.RE
.IP " 63." 5
\f[V]--ignore-non-existing\f[R], \f[V]--existing\f[R]
.RS 4
.PP
This tells rsync to skip creating files (including directories) that do
not exist yet on the destination.
If this option is combined with the \f[V]--ignore-existing\f[R] option,
no files will be updated (which can be useful if all you want to do is
delete extraneous files).
.PP
This option is a TRANSFER RULE, so don\[cq]t expect any exclude side
effects.
.RE
.IP " 64." 5
\f[V]--ignore-existing\f[R]
.RS 4
.PP
This tells rsync to skip updating files that already exist on the
destination (this does \f[I]not\f[R] ignore existing directories, or
nothing would get done).
See also \f[V]--ignore-non-existing\f[R].
.PP
This option is a TRANSFER RULE, so don\[cq]t expect any exclude side
effects.
.PP
This option can be useful for those doing backups using the
\f[V]--link-dest\f[R] option when they need to continue a backup run
that got interrupted.
Since a \f[V]--link-dest\f[R] run is copied into a new directory
hierarchy (when it is used properly), using [\f[V]--ignore-existing\f[R]
will ensure that the already-handled files don\[cq]t get tweaked (which
avoids a change in permissions on the hard-linked files).
This does mean that this option is only looking at the existing files in
the destination hierarchy itself.
.PP
When \f[V]--info=skip2\f[R] is used rsync will output \[lq]FILENAME
exists (INFO)\[rq] messages where the INFO indicates one of \[lq]type
change\[rq], \[lq]sum change\[rq] (requires \f[V]-c\f[R]), \[lq]file
change\[rq] (based on the quick check), \[lq]attr change\[rq], or
\[lq]uptodate\[rq].
Using \f[V]--info=skip1\f[R] (which is also implied by 2 \f[V]-v\f[R]
options) outputs the exists message without the INFO suffix.
.RE
.IP " 65." 5
\f[V]--remove-source-files\f[R]
.RS 4
.PP
This tells rsync to remove from the sending side the files (meaning
non-directories) that are a part of the transfer and have been
successfully duplicated on the receiving side.
.PP
Note that you should only use this option on source files that are
quiescent.
If you are using this to move files that show up in a particular
directory over to another host, make sure that the finished files get
renamed into the source directory, not directly written into it, so that
rsync can\[cq]t possibly transfer a file that is not yet fully written.
If you can\[cq]t first write the files into a different directory, you
should use a naming idiom that lets rsync avoid transferring files that
are not yet finished (e.g.\ name the file \[lq]foo.new\[rq] when it is
written, rename it to \[lq]foo\[rq] when it is done, and then use the
option \f[V]--exclude=\[aq]*.new\[aq]\f[R] for the rsync transfer).
.PP
Starting with 3.1.0, rsync will skip the sender-side removal (and output
an error) if the file\[cq]s size or modify time has not stayed
unchanged.
.PP
Starting with 3.2.6, a local rsync copy will ensure that the sender does
not remove a file the receiver just verified, such as when the user
accidentally makes the source and destination directory the same path.
.RE
.IP " 66." 5
\f[V]--delete\f[R]
.RS 4
.PP
This tells rsync to delete extraneous files from the receiving side
(ones that aren\[cq]t on the sending side), but only for the directories
that are being synchronized.
You must have asked rsync to send the whole directory
(e.g.\ \[lq]\f[V]dir\f[R]\[rq] or \[lq]\f[V]dir/\f[R]\[rq]) without
using a wildcard for the directory\[cq]s contents
(e.g.\ \[lq]\f[V]dir/*\f[R]\[rq]) since the wildcard is expanded by the
shell and rsync thus gets a request to transfer individual files, not
the files\[cq] parent directory.
Files that are excluded from the transfer are also excluded from being
deleted unless you use the \f[V]--delete-excluded\f[R] option or mark
the rules as only matching on the sending side (see the include/exclude
modifiers in the FILTER RULES section).
.PP
Prior to rsync 2.6.7, this option would have no effect unless
\f[V]--recursive\f[R] was enabled.
Beginning with 2.6.7, deletions will also occur when \f[V]--dirs\f[R]
(\f[V]-d\f[R]) is enabled, but only for directories whose contents are
being copied.
.PP
This option can be dangerous if used incorrectly!
It is a very good idea to first try a run using the \f[V]--dry-run\f[R]
(\f[V]-n\f[R]) option to see what files are going to be deleted.
.PP
If the sending side detects any I/O errors, then the deletion of any
files at the destination will be automatically disabled.
This is to prevent temporary filesystem failures (such as NFS errors) on
the sending side from causing a massive deletion of files on the
destination.
You can override this with the \f[V]--ignore-errors\f[R] option.
.PP
The \f[V]--delete\f[R] option may be combined with one of the
\[en]delete-WHEN options without conflict, as well as
\f[V]--delete-excluded\f[R].
However, if none of the \f[V]--delete-WHEN\f[R] options are specified,
rsync will choose the \f[V]--delete-during\f[R] algorithm when talking
to rsync 3.0.0 or newer, or the \f[V]--delete-before\f[R] algorithm when
talking to an older rsync.
See also \f[V]--delete-delay\f[R] and \f[V]--delete-after\f[R].
.RE
.IP " 67." 5
\f[V]--delete-before\f[R]
.RS 4
.PP
Request that the file-deletions on the receiving side be done before the
transfer starts.
See \f[V]--delete\f[R] (which is implied) for more details on
file-deletion.
.PP
Deleting before the transfer is helpful if the filesystem is tight for
space and removing extraneous files would help to make the transfer
possible.
However, it does introduce a delay before the start of the transfer, and
this delay might cause the transfer to timeout (if \f[V]--timeout\f[R]
was specified).
It also forces rsync to use the old, non-incremental recursion algorithm
that requires rsync to scan all the files in the transfer into memory at
once (see \f[V]--recursive\f[R]).
.RE
.IP " 68." 5
\f[V]--delete-during\f[R], \f[V]--del\f[R]
.RS 4
.PP
Request that the file-deletions on the receiving side be done
incrementally as the transfer happens.
The per-directory delete scan is done right before each directory is
checked for updates, so it behaves like a more efficient
\f[V]--delete-before\f[R], including doing the deletions prior to any
per-directory filter files being updated.
This option was first added in rsync version 2.6.4.
See \f[V]--delete\f[R] (which is implied) for more details on
file-deletion.
.RE
.IP " 69." 5
\f[V]--delete-delay\f[R]
.RS 4
.PP
Request that the file-deletions on the receiving side be computed during
the transfer (like \f[V]--delete-during\f[R]), and then removed after
the transfer completes.
This is useful when combined with \f[V]--delay-updates\f[R] and/or
\f[V]--fuzzy\f[R], and is more efficient than using
\f[V]--delete-after\f[R] (but can behave differently, since
\f[V]--delete-after\f[R] computes the deletions in a separate pass after
all updates are done).
If the number of removed files overflows an internal buffer, a temporary
file will be created on the receiving side to hold the names (it is
removed while open, so you shouldn\[cq]t see it during the transfer).
If the creation of the temporary file fails, rsync will try to fall back
to using \f[V]--delete-after\f[R] (which it cannot do if
\f[V]--recursive\f[R] is doing an incremental scan).
See \f[V]--delete\f[R] (which is implied) for more details on
file-deletion.
.RE
.IP " 70." 5
\f[V]--delete-after\f[R]
.RS 4
.PP
Request that the file-deletions on the receiving side be done after the
transfer has completed.
This is useful if you are sending new per-directory merge files as a
part of the transfer and you want their exclusions to take effect for
the delete phase of the current transfer.
It also forces rsync to use the old, non-incremental recursion algorithm
that requires rsync to scan all the files in the transfer into memory at
once (see \f[V]--recursive\f[R]).
See \f[V]--delete\f[R] (which is implied) for more details on
file-deletion.
.PP
See also the \f[V]--delete-delay\f[R] option that might be a faster
choice for those that just want the deletions to occur at the end of the
transfer.
.RE
.IP " 71." 5
\f[V]--delete-excluded\f[R]
.RS 4
.PP
This option turns any unqualified exclude/include rules into server-side
rules that do not affect the receiver\[cq]s deletions.
.PP
By default, an exclude or include has both a server-side effect (to
\[lq]hide\[rq] and \[lq]show\[rq] files when building the server\[cq]s
file list) and a receiver-side effect (to \[lq]protect\[rq] and
\[lq]risk\[rq] files when deletions are occurring).
Any rule that has no modifier to specify what sides it is executed on
will be instead treated as if it were a server-side rule only, avoiding
any \[lq]protect\[rq] effects of the rules.
.PP
A rule can still apply to both sides even with this option specified if
the rule is given both the sender & receiver modifier letters (e.g.,
\f[V]-f\[aq]-sr foo\[aq]\f[R]).
Receiver-side protect/risk rules can also be explicitly specified to
limit the deletions.
This saves you from having to edit a bunch of
\f[V]-f\[aq]- foo\[aq]\f[R] rules into \f[V]-f\[aq]-s foo\[aq]\f[R] (aka
\f[V]-f\[aq]H foo\[aq]\f[R]) rules (not to mention the corresponding
includes).
.PP
See the FILTER RULES section for more information.
See \f[V]--delete\f[R] (which is implied) for more details on deletion.
.RE
.IP " 72." 5
\f[V]--ignore-missing-args\f[R]
.RS 4
.PP
When rsync is first processing the explicitly requested source files
(e.g.
command-line arguments or \f[V]--files-from\f[R] entries), it is
normally an error if the file cannot be found.
This option suppresses that error, and does not try to transfer the
file.
This does not affect subsequent vanished-file errors if a file was
initially found to be present and later is no longer there.
.RE
.IP " 73." 5
\f[V]--delete-missing-args\f[R]
.RS 4
.PP
This option takes the behavior of the (implied)
\f[V]--ignore-missing-args\f[R] option a step farther: each missing arg
will become a deletion request of the corresponding destination file on
the receiving side (should it exist).
If the destination file is a non-empty directory, it will only be
successfully deleted if \f[V]--force\f[R] or \f[V]--delete\f[R] are in
effect.
Other than that, this option is independent of any other type of delete
processing.
.PP
The missing source files are represented by special file-list entries
which display as a \[lq]\f[V]*missing\f[R]\[rq] entry in the
\f[V]--list-only\f[R] output.
.RE
.IP " 74." 5
\f[V]--ignore-errors\f[R]
.RS 4
.PP
Tells \f[V]--delete\f[R] to go ahead and delete files even when there
are I/O errors.
.RE
.IP " 75." 5
\f[V]--force\f[R]
.RS 4
.PP
This option tells rsync to delete a non-empty directory when it is to be
replaced by a non-directory.
This is only relevant if deletions are not active (see
\f[V]--delete\f[R] for details).
.PP
Note for older rsync versions: \f[V]--force\f[R] used to still be
required when using \f[V]--delete-after\f[R], and it used to be
non-functional unless the \f[V]--recursive\f[R] option was also enabled.
.RE
.IP " 76." 5
\f[V]--max-delete=NUM\f[R]
.RS 4
.PP
This tells rsync not to delete more than NUM files or directories.
If that limit is exceeded, all further deletions are skipped through the
end of the transfer.
At the end, rsync outputs a warning (including a count of the skipped
deletions) and exits with an error code of 25 (unless some more
important error condition also occurred).
.PP
Beginning with version 3.0.0, you may specify \f[V]--max-delete=0\f[R]
to be warned about any extraneous files in the destination without
removing any of them.
Older clients interpreted this as \[lq]unlimited\[rq], so if you
don\[cq]t know what version the client is, you can use the less obvious
\f[V]--max-delete=-1\f[R] as a backward-compatible way to specify that
no deletions be allowed (though really old versions didn\[cq]t warn when
the limit was exceeded).
.RE
.IP " 77." 5
\f[V]--max-size=SIZE\f[R]
.RS 4
.PP
This tells rsync to avoid transferring any file that is larger than the
specified SIZE.
A numeric value can be suffixed with a string to indicate the numeric
units or left unqualified to specify bytes.
Feel free to use a fractional value along with the units, such as
\f[V]--max-size=1.5m\f[R].
.PP
This option is a TRANSFER RULE, so don\[cq]t expect any exclude side
effects.
.PP
The first letter of a units string can be \f[V]B\f[R] (bytes),
\f[V]K\f[R] (kilo), \f[V]M\f[R] (mega), \f[V]G\f[R] (giga), \f[V]T\f[R]
(tera), or \f[V]P\f[R] (peta).
If the string is a single char or has \[lq]ib\[rq] added to it
(e.g.\ \[lq]G\[rq] or \[lq]GiB\[rq]) then the units are multiples of
1024.
If you use a two-letter suffix that ends with a \[lq]B\[rq]
(e.g.\ \[lq]kb\[rq]) then you get units that are multiples of 1000.
The string\[cq]s letters can be any mix of upper and lower-case that you
want to use.
.PP
Finally, if the string ends with either \[lq]+1\[rq] or \[lq]-1\[rq], it
is offset by one byte in the indicated direction.
The largest possible value is usually \f[V]8192P-1\f[R].
.PP
Examples: \f[V]--max-size=1.5mb-1\f[R] is 1499999 bytes, and
\f[V]--max-size=2g+1\f[R] is 2147483649 bytes.
.PP
Note that rsync versions prior to 3.1.0 did not allow
\f[V]--max-size=0\f[R].
.RE
.IP " 78." 5
\f[V]--min-size=SIZE\f[R]
.RS 4
.PP
This tells rsync to avoid transferring any file that is smaller than the
specified SIZE, which can help in not transferring small, junk files.
See the \f[V]--max-size\f[R] option for a description of SIZE and other
info.
.PP
Note that rsync versions prior to 3.1.0 did not allow
\f[V]--min-size=0\f[R].
.RE
.IP " 79." 5
\f[V]--max-alloc=SIZE\f[R]
.RS 4
.PP
By default rsync limits an individual malloc/realloc to about 1GB in
size.
For most people this limit works just fine and prevents a protocol error
causing rsync to request massive amounts of memory.
However, if you have many millions of files in a transfer, a large
amount of server memory, and you don\[cq]t want to split up your
transfer into multiple parts, you can increase the per-allocation limit
to something larger and rsync will consume more memory.
.PP
Keep in mind that this is not a limit on the total size of allocated
memory.
It is a sanity-check value for each individual allocation.
.PP
See the \f[V]--max-size\f[R] option for a description of how SIZE can be
specified.
The default suffix if none is given is bytes.
.PP
Beginning in 3.2.7, a value of 0 is an easy way to specify SIZE_MAX (the
largest limit possible).
.PP
You can set a default value using the environment variable
\f[V]RSYNC_MAX_ALLOC\f[R] using the same SIZE values as supported by
this option.
If the remote rsync doesn\[cq]t understand the \f[V]--max-alloc\f[R]
option, you can override an environmental value by specifying
\f[V]--max-alloc=1g\f[R], which will make rsync avoid sending the option
to the remote side (because \[lq]1G\[rq] is the default).
.RE
.IP " 80." 5
\f[V]--block-size=SIZE\f[R], \f[V]-B\f[R]
.RS 4
.PP
This forces the block size used in rsync\[cq]s delta-transfer algorithm
to a fixed value.
It is normally selected based on the size of each file being updated.
See the technical report for details.
.PP
Beginning in 3.2.3 the SIZE can be specified with a suffix as detailed
in the \f[V]--max-size\f[R] option.
Older versions only accepted a byte count.
.RE
.IP " 81." 5
\f[V]--rsh=COMMAND\f[R], \f[V]-e\f[R]
.RS 4
.PP
This option allows you to choose an alternative remote shell program to
use for communication between the local and remote copies of rsync.
Typically, rsync is configured to use ssh by default, but you may prefer
to use rsh on a local network.
.PP
If this option is used with \f[V][user\[at]]host::module/path\f[R], then
the remote shell \f[I]COMMAND\f[R] will be used to run an rsync daemon
on the remote host, and all data will be transmitted through that remote
shell connection, rather than through a direct socket connection to a
running rsync daemon on the remote host.
See the USING RSYNC-DAEMON FEATURES VIA A REMOTE-SHELL CONNECTION
section above.
.PP
Beginning with rsync 3.2.0, the \f[V]RSYNC_PORT\f[R] environment
variable will be set when a daemon connection is being made via a
remote-shell connection.
It is set to 0 if the default daemon port is being assumed, or it is set
to the value of the rsync port that was specified via either the
\f[V]--port\f[R] option or a non-empty port value in an
\f[V]rsync://\f[R] URL.
This allows the script to discern if a non-default port is being
requested, allowing for things such as an SSL or stunnel helper script
to connect to a default or alternate port.
.PP
Command-line arguments are permitted in COMMAND provided that COMMAND is
presented to rsync as a single argument.
You must use spaces (not tabs or other whitespace) to separate the
command and args from each other, and you can use single- and/or
double-quotes to preserve spaces in an argument (but not backslashes).
Note that doubling a single-quote inside a single-quoted string gives
you a single-quote; likewise for double-quotes (though you need to pay
attention to which quotes your shell is parsing and which quotes rsync
is parsing).
Some examples:
.RS
.IP
.nf
\f[C]
-e \[aq]ssh -p 2234\[aq]
-e \[aq]ssh -o \[dq]ProxyCommand nohup ssh firewall nc -w1 %h %p\[dq]\[aq]
\f[R]
.fi
.RE
.PP
(Note that ssh users can alternately customize site-specific connect
options in their .ssh/config file.)
.PP
You can also choose the remote shell program using the
\f[V]RSYNC_RSH\f[R] environment variable, which accepts the same range
of values as \f[V]-e\f[R].
.PP
See also the \f[V]--blocking-io\f[R] option which is affected by this
option.
.RE
.IP " 82." 5
\f[V]--rsync-path=PROGRAM\f[R]
.RS 4
.PP
Use this to specify what program is to be run on the remote machine to
start-up rsync.
Often used when rsync is not in the default remote-shell\[cq]s path
(e.g.\ \f[V]--rsync-path=/usr/local/bin/rsync\f[R]).
Note that PROGRAM is run with the help of a shell, so it can be any
program, script, or command sequence you\[cq]d care to run, so long as
it does not corrupt the standard-in & standard-out that rsync is using
to communicate.
.PP
One tricky example is to set a different default directory on the remote
machine for use with the \f[V]--relative\f[R] option.
For instance:
.RS
.IP
.nf
\f[C]
rsync -avR --rsync-path=\[dq]cd /a/b && rsync\[dq] host:c/d /e/
\f[R]
.fi
.RE
.RE
.IP " 83." 5
\f[V]--remote-option=OPTION\f[R], \f[V]-M\f[R]
.RS 4
.PP
This option is used for more advanced situations where you want certain
effects to be limited to one side of the transfer only.
For instance, if you want to pass \f[V]--log-file=FILE\f[R] and
\f[V]--fake-super\f[R] to the remote system, specify it like this:
.RS
.IP
.nf
\f[C]
rsync -av -M --log-file=foo -M--fake-super src/ dest/
\f[R]
.fi
.RE
.PP
If you want to have an option affect only the local side of a transfer
when it normally affects both sides, send its negation to the remote
side.
Like this:
.RS
.IP
.nf
\f[C]
rsync -av -x -M--no-x src/ dest/
\f[R]
.fi
.RE
.PP
Be cautious using this, as it is possible to toggle an option that will
cause rsync to have a different idea about what data to expect next over
the socket, and that will make it fail in a cryptic fashion.
.PP
Note that you should use a separate \f[V]-M\f[R] option for each remote
option you want to pass.
On older rsync versions, the presence of any spaces in the remote-option
arg could cause it to be split into separate remote args, but this
requires the use of \f[V]--old-args\f[R] in a modern rsync.
.PP
When performing a local transfer, the \[lq]local\[rq] side is the sender
and the \[lq]remote\[rq] side is the receiver.
.PP
Note some versions of the popt option-parsing library have a bug in them
that prevents you from using an adjacent arg with an equal in it next to
a short option letter (e.g.\ \f[V]-M--log-file=/tmp/foo\f[R]).
If this bug affects your version of popt, you can use the version of
popt that is included with rsync.
.RE
.IP " 84." 5
\f[V]--cvs-exclude\f[R], \f[V]-C\f[R]
.RS 4
.PP
This is a useful shorthand for excluding a broad range of files that you
often don\[cq]t want to transfer between systems.
It uses a similar algorithm to CVS to determine if a file should be
ignored.
.PP
The exclude list is initialized to exclude the following items (these
initial items are marked as perishable \[en] see the FILTER RULES
section):
.RS
.PP
\f[V]RCS\f[R] \f[V]SCCS\f[R] \f[V]CVS\f[R] \f[V]CVS.adm\f[R]
\f[V]RCSLOG\f[R] \f[V]cvslog.*\f[R] \f[V]tags\f[R] \f[V]TAGS\f[R]
\f[V].make.state\f[R] \f[V].nse_depinfo\f[R] \f[V]*\[ti]\f[R]
\f[V]#*\f[R] \f[V].#*\f[R] \f[V],*\f[R] \f[V]_$*\f[R] \f[V]*$\f[R]
\f[V]*.old\f[R] \f[V]*.bak\f[R] \f[V]*.BAK\f[R] \f[V]*.orig\f[R]
\f[V]*.rej\f[R] \f[V].del-*\f[R] \f[V]*.a\f[R] \f[V]*.olb\f[R]
\f[V]*.o\f[R] \f[V]*.obj\f[R] \f[V]*.so\f[R] \f[V]*.exe\f[R]
\f[V]*.Z\f[R] \f[V]*.elc\f[R] \f[V]*.ln\f[R] \f[V]core\f[R]
\f[V].svn/\f[R] \f[V].git/\f[R] \f[V].hg/\f[R] \f[V].bzr/\f[R]
.RE
.PP
then, files listed in a $HOME/.cvsignore are added to the list and any
files listed in the CVSIGNORE environment variable (all cvsignore names
are delimited by whitespace).
.PP
Finally, any file is ignored if it is in the same directory as a
\&.cvsignore file and matches one of the patterns listed therein.
Unlike rsync\[cq]s filter/exclude files, these patterns are split on
whitespace.
See the \f[B]cvs\f[R](1) manual for more information.
.PP
If you\[cq]re combining \f[V]-C\f[R] with your own \f[V]--filter\f[R]
rules, you should note that these CVS excludes are appended at the end
of your own rules, regardless of where the \f[V]-C\f[R] was placed on
the command-line.
This makes them a lower priority than any rules you specified
explicitly.
If you want to control where these CVS excludes get inserted into your
filter rules, you should omit the \f[V]-C\f[R] as a command-line option
and use a combination of \f[V]--filter=:C\f[R] and \f[V]--filter=-C\f[R]
(either on your command-line or by putting the \[lq]:C\[rq] and
\[lq]-C\[rq] rules into a filter file with your other rules).
The first option turns on the per-directory scanning for the .cvsignore
file.
The second option does a one-time import of the CVS excludes mentioned
above.
.RE
.IP " 85." 5
\f[V]--filter=RULE\f[R], \f[V]-f\f[R]
.RS 4
.PP
This option allows you to add rules to selectively exclude certain files
from the list of files to be transferred.
This is most useful in combination with a recursive transfer.
.PP
You may use as many \f[V]--filter\f[R] options on the command line as
you like to build up the list of files to exclude.
If the filter contains whitespace, be sure to quote it so that the shell
gives the rule to rsync as a single argument.
The text below also mentions that you can use an underscore to replace
the space that separates a rule from its arg.
.PP
See the FILTER RULES section for detailed information on this option.
.RE
.IP " 86." 5
\f[V]-F\f[R]
.RS 4
.PP
The \f[V]-F\f[R] option is a shorthand for adding two \f[V]--filter\f[R]
rules to your command.
The first time it is used is a shorthand for this rule:
.RS
.IP
.nf
\f[C]
--filter=\[aq]dir-merge /.rsync-filter\[aq]
\f[R]
.fi
.RE
.PP
This tells rsync to look for per-directory .rsync-filter files that have
been sprinkled through the hierarchy and use their rules to filter the
files in the transfer.
If \f[V]-F\f[R] is repeated, it is a shorthand for this rule:
.RS
.IP
.nf
\f[C]
--filter=\[aq]exclude .rsync-filter\[aq]
\f[R]
.fi
.RE
.PP
This filters out the .rsync-filter files themselves from the transfer.
.PP
See the FILTER RULES section for detailed information on how these
options work.
.RE
.IP " 87." 5
\f[V]--exclude=PATTERN\f[R]
.RS 4
.PP
This option is a simplified form of the \f[V]--filter\f[R] option that
specifies an exclude rule and does not allow the full rule-parsing
syntax of normal filter rules.
This is equivalent to specifying \f[V]-f\[aq]- PATTERN\[aq]\f[R].
.PP
See the FILTER RULES section for detailed information on this option.
.RE
.IP " 88." 5
\f[V]--exclude-from=FILE\f[R]
.RS 4
.PP
This option is related to the \f[V]--exclude\f[R] option, but it
specifies a FILE that contains exclude patterns (one per line).
Blank lines in the file are ignored, as are whole-line comments that
start with `\f[V];\f[R]' or `\f[V]#\f[R]' (filename rules that contain
those characters are unaffected).
.PP
If a line begins with \[lq]\f[V]-\ \f[R]\[rq] (dash, space) or
\[lq]\f[V]+\ \f[R]\[rq] (plus, space), then the type of rule is being
explicitly specified as an exclude or an include (respectively).
Any rules without such a prefix are taken to be an exclude.
.PP
If a line consists of just \[lq]\f[V]!\f[R]\[rq], then the current
filter rules are cleared before adding any further rules.
.PP
If \f[I]FILE\f[R] is `\f[V]-\f[R]', the list will be read from standard
input.
.RE
.IP " 89." 5
\f[V]--include=PATTERN\f[R]
.RS 4
.PP
This option is a simplified form of the \f[V]--filter\f[R] option that
specifies an include rule and does not allow the full rule-parsing
syntax of normal filter rules.
This is equivalent to specifying \f[V]-f\[aq]+ PATTERN\[aq]\f[R].
.PP
See the FILTER RULES section for detailed information on this option.
.RE
.IP " 90." 5
\f[V]--include-from=FILE\f[R]
.RS 4
.PP
This option is related to the \f[V]--include\f[R] option, but it
specifies a FILE that contains include patterns (one per line).
Blank lines in the file are ignored, as are whole-line comments that
start with `\f[V];\f[R]' or `\f[V]#\f[R]' (filename rules that contain
those characters are unaffected).
.PP
If a line begins with \[lq]\f[V]-\ \f[R]\[rq] (dash, space) or
\[lq]\f[V]+\ \f[R]\[rq] (plus, space), then the type of rule is being
explicitly specified as an exclude or an include (respectively).
Any rules without such a prefix are taken to be an include.
.PP
If a line consists of just \[lq]\f[V]!\f[R]\[rq], then the current
filter rules are cleared before adding any further rules.
.PP
If \f[I]FILE\f[R] is `\f[V]-\f[R]', the list will be read from standard
input.
.RE
.IP " 91." 5
\f[V]--files-from=FILE\f[R]
.RS 4
.PP
Using this option allows you to specify the exact list of files to
transfer (as read from the specified FILE or `\f[V]-\f[R]' for standard
input).
It also tweaks the default behavior of rsync to make transferring just
the specified files and directories easier:
.IP \[bu] 2
The \f[V]--relative\f[R] (\f[V]-R\f[R]) option is implied, which
preserves the path information that is specified for each item in the
file (use \f[V]--no-relative\f[R] or \f[V]--no-R\f[R] if you want to
turn that off).
.IP \[bu] 2
The \f[V]--dirs\f[R] (\f[V]-d\f[R]) option is implied, which will create
directories specified in the list on the destination rather than noisily
skipping them (use \f[V]--no-dirs\f[R] or \f[V]--no-d\f[R] if you want
to turn that off).
.IP \[bu] 2
The \f[V]--archive\f[R] (\f[V]-a\f[R]) option\[cq]s behavior does not
imply \f[V]--recursive\f[R] (\f[V]-r\f[R]), so specify it explicitly, if
you want it.
.IP \[bu] 2
These side-effects change the default state of rsync, so the position of
the \f[V]--files-from\f[R] option on the command-line has no bearing on
how other options are parsed (e.g.\ \f[V]-a\f[R] works the same before
or after \f[V]--files-from\f[R], as does \f[V]--no-R\f[R] and all other
options).
.PP
The filenames that are read from the FILE are all relative to the source
dir \[en] any leading slashes are removed and no \[lq]..\[rq] references
are allowed to go higher than the source dir.
For example, take this command:
.RS
.IP
.nf
\f[C]
rsync -a --files-from=/tmp/foo /usr remote:/backup
\f[R]
.fi
.RE
.PP
If /tmp/foo contains the string \[lq]bin\[rq] (or even \[lq]/bin\[rq]),
the /usr/bin directory will be created as /backup/bin on the remote
host.
If it contains \[lq]bin/\[rq] (note the trailing slash), the immediate
contents of the directory would also be sent (without needing to be
explicitly mentioned in the file \[en] this began in version 2.6.4).
In both cases, if the \f[V]-r\f[R] option was enabled, that dir\[cq]s
entire hierarchy would also be transferred (keep in mind that
\f[V]-r\f[R] needs to be specified explicitly with
\f[V]--files-from\f[R], since it is not implied by \f[V]-a\f[R].
Also note that the effect of the (enabled by default) \f[V]-r\f[R]
option is to duplicate only the path info that is read from the file
\[en] it does not force the duplication of the source-spec path (/usr in
this case).
.PP
In addition, the \f[V]--files-from\f[R] file can be read from the remote
host instead of the local host if you specify a \[lq]host:\[rq] in front
of the file (the host must match one end of the transfer).
As a short-cut, you can specify just a prefix of \[lq]:\[rq] to mean
\[lq]use the remote end of the transfer\[rq].
For example:
.RS
.IP
.nf
\f[C]
rsync -a --files-from=:/path/file-list src:/ /tmp/copy
\f[R]
.fi
.RE
.PP
This would copy all the files specified in the /path/file-list file that
was located on the remote \[lq]src\[rq] host.
.PP
If the \f[V]--iconv\f[R] and \f[V]--secluded-args\f[R] options are
specified and the \f[V]--files-from\f[R] filenames are being sent from
one host to another, the filenames will be translated from the sending
host\[cq]s charset to the receiving host\[cq]s charset.
.PP
NOTE: sorting the list of files in the \f[V]--files-from\f[R] input
helps rsync to be more efficient, as it will avoid re-visiting the path
elements that are shared between adjacent entries.
If the input is not sorted, some path elements (implied directories) may
end up being scanned multiple times, and rsync will eventually
unduplicate them after they get turned into file-list elements.
.RE
.IP " 92." 5
\f[V]--from0\f[R], \f[V]-0\f[R]
.RS 4
.PP
This tells rsync that the rules/filenames it reads from a file are
terminated by a null (`\[rs]0') character, not a NL, CR, or CR+LF.
This affects \f[V]--exclude-from\f[R], \f[V]--include-from\f[R],
\f[V]--files-from\f[R], and any merged files specified in a
\f[V]--filter\f[R] rule.
It does not affect \f[V]--cvs-exclude\f[R] (since all names read from a
\&.cvsignore file are split on whitespace).
.RE
.IP " 93." 5
\f[V]--old-args\f[R]
.RS 4
.PP
This option tells rsync to stop trying to protect the arg values on the
remote side from unintended word-splitting or other misinterpretation.
It also allows the client to treat an empty arg as a \[lq].\[rq] instead
of generating an error.
.PP
The default in a modern rsync is for \[lq]shell-active\[rq] characters
(including spaces) to be backslash-escaped in the args that are sent to
the remote shell.
The wildcard characters \f[V]*\f[R], \f[V]?\f[R], \f[V][\f[R], &
\f[V]]\f[R] are not escaped in filename args (allowing them to expand
into multiple filenames) while being protected in option args, such as
\f[V]--usermap\f[R].
.PP
If you have a script that wants to use old-style arg splitting in its
filenames, specify this option once.
If the remote shell has a problem with any backslash escapes at all,
specify this option twice.
.PP
You may also control this setting via the \f[V]RSYNC_OLD_ARGS\f[R]
environment variable.
If it has the value \[lq]1\[rq], rsync will default to a single-option
setting.
If it has the value \[lq]2\[rq] (or more), rsync will default to a
repeated-option setting.
If it is \[lq]0\[rq], you\[cq]ll get the default escaping behavior.
The environment is always overridden by manually specified positive or
negative options (the negative is \f[V]--no-old-args\f[R]).
.PP
Note that this option also disables the extra safety check added in
3.2.5 that ensures that a remote sender isn\[cq]t including extra
top-level items in the file-list that you didn\[cq]t request.
This side-effect is necessary because we can\[cq]t know for sure what
names to expect when the remote shell is interpreting the args.
.PP
This option conflicts with the \f[V]--secluded-args\f[R] option.
.RE
.IP " 94." 5
\f[V]--secluded-args\f[R], \f[V]-s\f[R]
.RS 4
.PP
This option sends all filenames and most options to the remote rsync via
the protocol (not the remote shell command line) which avoids letting
the remote shell modify them.
Wildcards are expanded on the remote host by rsync instead of a shell.
.PP
This is similar to the default backslash-escaping of args that was added
in 3.2.4 (see \f[V]--old-args\f[R]) in that it prevents things like
space splitting and unwanted special-character side-effects.
However, it has the drawbacks of being incompatible with older rsync
versions (prior to 3.0.0) and of being refused by restricted shells that
want to be able to inspect all the option values for safety.
.PP
This option is useful for those times that you need the argument\[cq]s
character set to be converted for the remote host, if the remote shell
is incompatible with the default backslash-escpaing method, or there is
some other reason that you want the majority of the options and
arguments to bypass the command-line of the remote shell.
.PP
If you combine this option with \f[V]--iconv\f[R], the args related to
the remote side will be translated from the local to the remote
character-set.
The translation happens before wild-cards are expanded.
See also the \f[V]--files-from\f[R] option.
.PP
You may also control this setting via the \f[V]RSYNC_PROTECT_ARGS\f[R]
environment variable.
If it has a non-zero value, this setting will be enabled by default,
otherwise it will be disabled by default.
Either state is overridden by a manually specified positive or negative
version of this option (note that \f[V]--no-s\f[R] and
\f[V]--no-secluded-args\f[R] are the negative versions).
This environment variable is also superseded by a non-zero
\f[V]RSYNC_OLD_ARGS\f[R] export.
.PP
This option conflicts with the \f[V]--old-args\f[R] option.
.PP
This option used to be called \f[V]--protect-args\f[R] (before 3.2.6)
and that older name can still be used (though specifying it as
\f[V]-s\f[R] is always the easiest and most compatible choice).
.RE
.IP " 95." 5
\f[V]--trust-sender\f[R]
.RS 4
.PP
This option disables two extra validation checks that a local client
performs on the file list generated by a remote sender.
This option should only be used if you trust the sender to not put
something malicious in the file list (something that could possibly be
done via a modified rsync, a modified shell, or some other similar
manipulation).
.PP
Normally, the rsync client (as of version 3.2.5) runs two extra
validation checks when pulling files from a remote rsync:
.IP \[bu] 2
It verifies that additional arg items didn\[cq]t get added at the top of
the transfer.
.IP \[bu] 2
It verifies that none of the items in the file list are names that
should have been excluded (if filter rules were specified).
.PP
Note that various options can turn off one or both of these checks if
the option interferes with the validation.
For instance:
.IP \[bu] 2
Using a per-directory filter file reads filter rules that only the
server knows about, so the filter checking is disabled.
.IP \[bu] 2
Using the \f[V]--old-args\f[R] option allows the sender to manipulate
the requested args, so the arg checking is disabled.
.IP \[bu] 2
Reading the files-from list from the server side means that the client
doesn\[cq]t know the arg list, so the arg checking is disabled.
.IP \[bu] 2
Using \f[V]--read-batch\f[R] disables both checks since the batch
file\[cq]s contents will have been verified when it was created.
.PP
This option may help an under-powered client server if the extra pattern
matching is slowing things down on a huge transfer.
It can also be used to work around a currently-unknown bug in the
verification logic for a transfer from a trusted sender.
.PP
When using this option it is a good idea to specify a dedicated
destination directory, as discussed in the MULTI-HOST SECURITY section.
.RE
.IP " 96." 5
\f[V]--copy-as=USER[:GROUP]\f[R]
.RS 4
.PP
This option instructs rsync to use the USER and (if specified after a
colon) the GROUP for the copy operations.
This only works if the user that is running rsync has the ability to
change users.
If the group is not specified then the user\[cq]s default groups are
used.
.PP
This option can help to reduce the risk of an rsync being run as root
into or out of a directory that might have live changes happening to it
and you want to make sure that root-level read or write actions of
system files are not possible.
While you could alternatively run all of rsync as the specified user,
sometimes you need the root-level host-access credentials to be used, so
this allows rsync to drop root for the copying part of the operation
after the remote-shell or daemon connection is established.
.PP
The option only affects one side of the transfer unless the transfer is
local, in which case it affects both sides.
Use the \f[V]--remote-option\f[R] to affect the remote side, such as
\f[V]-M--copy-as=joe\f[R].
For a local transfer, the lsh (or lsh.sh) support file provides a
local-shell helper script that can be used to allow a
\[lq]localhost:\[rq] or \[lq]lh:\[rq] host-spec to be specified without
needing to setup any remote shells, allowing you to specify remote
options that affect the side of the transfer that is using the host-spec
(and using hostname \[lq]lh\[rq] avoids the overriding of the remote
directory to the user\[cq]s home dir).
.PP
For example, the following rsync writes the local files as user
\[lq]joe\[rq]:
.RS
.IP
.nf
\f[C]
sudo rsync -aiv --copy-as=joe host1:backups/joe/ /home/joe/
\f[R]
.fi
.RE
.PP
This makes all files owned by user \[lq]joe\[rq], limits the groups to
those that are available to that user, and makes it impossible for the
joe user to do a timed exploit of the path to induce a change to a file
that the joe user has no permissions to change.
.PP
The following command does a local copy into the \[lq]dest/\[rq] dir as
user \[lq]joe\[rq] (assuming you\[cq]ve installed support/lsh into a dir
on your $PATH):
.RS
.IP
.nf
\f[C]
sudo rsync -aive lsh -M--copy-as=joe src/ lh:dest/
\f[R]
.fi
.RE
.RE
.IP " 97." 5
\f[V]--temp-dir=DIR\f[R], \f[V]-T\f[R]
.RS 4
.PP
This option instructs rsync to use DIR as a scratch directory when
creating temporary copies of the files transferred on the receiving
side.
The default behavior is to create each temporary file in the same
directory as the associated destination file.
Beginning with rsync 3.1.1, the temp-file names inside the specified DIR
will not be prefixed with an extra dot (though they will still have a
random suffix added).
.PP
This option is most often used when the receiving disk partition does
not have enough free space to hold a copy of the largest file in the
transfer.
In this case (i.e.\ when the scratch directory is on a different disk
partition), rsync will not be able to rename each received temporary
file over the top of the associated destination file, but instead must
copy it into place.
Rsync does this by copying the file over the top of the destination
file, which means that the destination file will contain truncated data
during this copy.
If this were not done this way (even if the destination file were first
removed, the data locally copied to a temporary file in the destination
directory, and then renamed into place) it would be possible for the old
file to continue taking up disk space (if someone had it open), and thus
there might not be enough room to fit the new version on the disk at the
same time.
.PP
If you are using this option for reasons other than a shortage of disk
space, you may wish to combine it with the \f[V]--delay-updates\f[R]
option, which will ensure that all copied files get put into
subdirectories in the destination hierarchy, awaiting the end of the
transfer.
If you don\[cq]t have enough room to duplicate all the arriving files on
the destination partition, another way to tell rsync that you aren\[cq]t
overly concerned about disk space is to use the \f[V]--partial-dir\f[R]
option with a relative path; because this tells rsync that it is OK to
stash off a copy of a single file in a subdir in the destination
hierarchy, rsync will use the partial-dir as a staging area to bring
over the copied file, and then rename it into place from there.
(Specifying a \f[V]--partial-dir\f[R] with an absolute path does not
have this side-effect.)
.RE
.IP " 98." 5
\f[V]--fuzzy\f[R], \f[V]-y\f[R]
.RS 4
.PP
This option tells rsync that it should look for a basis file for any
destination file that is missing.
The current algorithm looks in the same directory as the destination
file for either a file that has an identical size and modified-time, or
a similarly-named file.
If found, rsync uses the fuzzy basis file to try to speed up the
transfer.
.PP
If the option is repeated, the fuzzy scan will also be done in any
matching alternate destination directories that are specified via
\f[V]--compare-dest\f[R], \f[V]--copy-dest\f[R], or
\f[V]--link-dest\f[R].
.PP
Note that the use of the \f[V]--delete\f[R] option might get rid of any
potential fuzzy-match files, so either use \f[V]--delete-after\f[R] or
specify some filename exclusions if you need to prevent this.
.RE
.IP " 99." 5
\f[V]--compare-dest=DIR\f[R]
.RS 4
.PP
This option instructs rsync to use \f[I]DIR\f[R] on the destination
machine as an additional hierarchy to compare destination files against
doing transfers (if the files are missing in the destination directory).
If a file is found in \f[I]DIR\f[R] that is identical to the
sender\[cq]s file, the file will NOT be transferred to the destination
directory.
This is useful for creating a sparse backup of just files that have
changed from an earlier backup.
This option is typically used to copy into an empty (or newly created)
directory.
.PP
Beginning in version 2.6.4, multiple \f[V]--compare-dest\f[R]
directories may be provided, which will cause rsync to search the list
in the order specified for an exact match.
If a match is found that differs only in attributes, a local copy is
made and the attributes updated.
If a match is not found, a basis file from one of the \f[I]DIRs\f[R]
will be selected to try to speed up the transfer.
.PP
If \f[I]DIR\f[R] is a relative path, it is relative to the destination
directory.
See also \f[V]--copy-dest\f[R] and \f[V]--link-dest\f[R].
.PP
NOTE: beginning with version 3.1.0, rsync will remove a file from a
non-empty destination hierarchy if an exact match is found in one of the
compare-dest hierarchies (making the end result more closely match a
fresh copy).
.RE
.IP "100." 5
\f[V]--copy-dest=DIR\f[R]
.RS 4
.PP
This option behaves like \f[V]--compare-dest\f[R], but rsync will also
copy unchanged files found in \f[I]DIR\f[R] to the destination directory
using a local copy.
This is useful for doing transfers to a new destination while leaving
existing files intact, and then doing a flash-cutover when all files
have been successfully transferred.
.PP
Multiple \f[V]--copy-dest\f[R] directories may be provided, which will
cause rsync to search the list in the order specified for an unchanged
file.
If a match is not found, a basis file from one of the \f[I]DIRs\f[R]
will be selected to try to speed up the transfer.
.PP
If \f[I]DIR\f[R] is a relative path, it is relative to the destination
directory.
See also \f[V]--compare-dest\f[R] and \f[V]--link-dest\f[R].
.RE
.IP "101." 5
\f[V]--link-dest=DIR\f[R]
.RS 4
.PP
This option behaves like \f[V]--copy-dest\f[R], but unchanged files are
hard linked from \f[I]DIR\f[R] to the destination directory.
The files must be identical in all preserved attributes
(e.g.\ permissions, possibly ownership) in order for the files to be
linked together.
An example:
.RS
.IP
.nf
\f[C]
rsync -av --link-dest=$PWD/prior_dir host:src_dir/ new_dir/
\f[R]
.fi
.RE
.PP
If files aren\[cq]t linking, double-check their attributes.
Also check if some attributes are getting forced outside of rsync\[cq]s
control, such a mount option that squishes root to a single user, or
mounts a removable drive with generic ownership (such as OS X\[cq]s
\[lq]Ignore ownership on this volume\[rq] option).
.PP
Beginning in version 2.6.4, multiple \f[V]--link-dest\f[R] directories
may be provided, which will cause rsync to search the list in the order
specified for an exact match (there is a limit of 20 such directories).
If a match is found that differs only in attributes, a local copy is
made and the attributes updated.
If a match is not found, a basis file from one of the \f[I]DIRs\f[R]
will be selected to try to speed up the transfer.
.PP
This option works best when copying into an empty destination hierarchy,
as existing files may get their attributes tweaked, and that can affect
alternate destination files via hard-links.
Also, itemizing of changes can get a bit muddled.
Note that prior to version 3.1.0, an alternate-directory exact match
would never be found (nor linked into the destination) when a
destination file already exists.
.PP
Note that if you combine this option with \f[V]--ignore-times\f[R],
rsync will not link any files together because it only links identical
files together as a substitute for transferring the file, never as an
additional check after the file is updated.
.PP
If \f[I]DIR\f[R] is a relative path, it is relative to the destination
directory.
See also \f[V]--compare-dest\f[R] and \f[V]--copy-dest\f[R].
.PP
Note that rsync versions prior to 2.6.1 had a bug that could prevent
\f[V]--link-dest\f[R] from working properly for a non-super-user when
\f[V]--owner\f[R] (\f[V]-o\f[R]) was specified (or implied).
You can work-around this bug by avoiding the \f[V]-o\f[R] option (or
using \f[V]--no-o\f[R]) when sending to an old rsync.
.RE
.IP "102." 5
\f[V]--compress\f[R], \f[V]-z\f[R]
.RS 4
.PP
With this option, rsync compresses the file data as it is sent to the
destination machine, which reduces the amount of data being transmitted
\[en] something that is useful over a slow connection.
.PP
Rsync supports multiple compression methods and will choose one for you
unless you force the choice using the \f[V]--compress-choice\f[R]
(\f[V]--zc\f[R]) option.
.PP
Run \f[V]rsync --version\f[R] to see the default compress list compiled
into your version.
.PP
When both sides of the transfer are at least 3.2.0, rsync chooses the
first algorithm in the client\[cq]s list of choices that is also in the
server\[cq]s list of choices.
If no common compress choice is found, rsync exits with an error.
If the remote rsync is too old to support checksum negotiation, its list
is assumed to be \[lq]zlib\[rq].
.PP
The default order can be customized by setting the environment variable
\f[V]RSYNC_COMPRESS_LIST\f[R] to a space-separated list of acceptable
compression names.
If the string contains a \[lq]\f[V]&\f[R]\[rq] character, it is
separated into the \[lq]client string & server string\[rq], otherwise
the same string applies to both.
If the string (or string portion) contains no non-whitespace characters,
the default compress list is used.
Any unknown compression names are discarded from the list, but a list
with only invalid names results in a failed negotiation.
.PP
There are some older rsync versions that were configured to reject a
\f[V]-z\f[R] option and require the use of \f[V]-zz\f[R] because their
compression library was not compatible with the default zlib compression
method.
You can usually ignore this weirdness unless the rsync server complains
and tells you to specify \f[V]-zz\f[R].
.RE
.IP "103." 5
\f[V]--compress-choice=STR\f[R], \f[V]--zc=STR\f[R]
.RS 4
.PP
This option can be used to override the automatic negotiation of the
compression algorithm that occurs when \f[V]--compress\f[R] is used.
The option implies \f[V]--compress\f[R] unless \[lq]none\[rq] was
specified, which instead implies \f[V]--no-compress\f[R].
.PP
The compression options that you may be able to use are:
.IP \[bu] 2
\f[V]zstd\f[R]
.IP \[bu] 2
\f[V]zlibx\f[R]
.IP \[bu] 2
\f[V]zlib\f[R]
.IP \[bu] 2
\f[V]none\f[R]
.PP
Run \f[V]rsync --version\f[R] to see the default compress list compiled
into your version (which may differ from the list above).
.PP
Note that if you see an error about an option named
\f[V]--old-compress\f[R] or \f[V]--new-compress\f[R], this is rsync
trying to send the \f[V]--compress-choice=zlib\f[R] or
\f[V]--compress-choice=zlibx\f[R] option in a backward-compatible manner
that more rsync versions understand.
This error indicates that the older rsync version on the server will not
allow you to force the compression type.
.PP
Note that the \[lq]zlibx\[rq] compression algorithm is just the
\[lq]zlib\[rq] algorithm with matched data excluded from the compression
stream (to try to make it more compatible with an external zlib
implementation).
.RE
.IP "104." 5
\f[V]--compress-level=NUM\f[R], \f[V]--zl=NUM\f[R]
.RS 4
.PP
Explicitly set the compression level to use (see \f[V]--compress\f[R],
\f[V]-z\f[R]) instead of letting it default.
The \f[V]--compress\f[R] option is implied as long as the level chosen
is not a \[lq]don\[cq]t compress\[rq] level for the compression
algorithm that is in effect (e.g.\ zlib compression treats level 0 as
\[lq]off\[rq]).
.PP
The level values vary depending on the checksum in effect.
Because rsync will negotiate a checksum choice by default (when the
remote rsync is new enough), it can be good to combine this option with
a \f[V]--compress-choice\f[R] (\f[V]--zc\f[R]) option unless you\[cq]re
sure of the choice in effect.
For example:
.RS
.IP
.nf
\f[C]
rsync -aiv --zc=zstd --zl=22 host:src/ dest/
\f[R]
.fi
.RE
.PP
For zlib & zlibx compression the valid values are from 1 to 9 with 6
being the default.
Specifying \f[V]--zl=0\f[R] turns compression off, and specifying
\f[V]--zl=-1\f[R] chooses the default level of 6.
.PP
For zstd compression the valid values are from -131072 to 22 with 3
being the default.
Specifying 0 chooses the default of 3.
.PP
If you specify a too-large or too-small value, the number is silently
limited to a valid value.
This allows you to specify something like \f[V]--zl=999999999\f[R] and
be assured that you\[cq]ll end up with the maximum compression level no
matter what algorithm was chosen.
.PP
If you want to know the compression level that is in effect, specify
\f[V]--debug=nstr\f[R] to see the \[lq]negotiated string\[rq] results.
This will report something like
\[lq]\f[V]Client compress: zstd (level 3)\f[R]\[rq] (along with the
checksum choice in effect).
.RE
.IP "105." 5
\f[V]--skip-compress=LIST\f[R]
.RS 4
.PP
\f[B]NOTE:\f[R] no compression method currently supports per-file
compression changes, so this option has no effect.
.PP
Override the list of file suffixes that will be compressed as little as
possible.
Rsync sets the compression level on a per-file basis based on the
file\[cq]s suffix.
If the compression algorithm has an \[lq]off\[rq] level, then no
compression occurs for those files.
Other algorithms that support changing the streaming level on-the-fly
will have the level minimized to reduces the CPU usage as much as
possible for a matching file.
.PP
The \f[B]LIST\f[R] should be one or more file suffixes (without the dot)
separated by slashes (\f[V]/\f[R]).
You may specify an empty string to indicate that no files should be
skipped.
.PP
Simple character-class matching is supported: each must consist of a
list of letters inside the square brackets (e.g.\ no special classes,
such as \[lq][:alpha:]\[rq], are supported, and `-' has no special
meaning).
.PP
The characters asterisk (\f[V]*\f[R]) and question-mark (\f[V]?\f[R])
have no special meaning.
.PP
Here\[cq]s an example that specifies 6 suffixes to skip (since 1 of the
5 rules matches 2 suffixes):
.RS
.IP
.nf
\f[C]
--skip-compress=gz/jpg/mp[34]/7z/bz2
\f[R]
.fi
.RE
.PP
The default file suffixes in the skip-compress list in this version of
rsync are:
.RS
.PP
3g2 3gp 7z aac ace apk avi bz2 deb dmg ear f4v flac flv gpg gz iso jar
jpeg jpg lrz lz lzma lzo m1a m1v m2a m2ts m2v m4a m4b m4p m4r m4v
mka mkv mov mp1 mp2 mp3 mp4 mpa mpeg mpg mpv mts odb odf odg odi odm odp
ods odt oga ogg ogm ogv ogx opus otg oth otp ots ott oxt png qt rar rpm
rz rzip spx squashfs sxc sxd sxg sxm sxw sz tbz tbz2 tgz tlz ts txz tzo
vob war webm webp xz z zip zst
.RE
.PP
This list will be replaced by your \f[V]--skip-compress\f[R] list in all
but one situation: a copy from a daemon rsync will add your skipped
suffixes to its list of non-compressing files (and its list may be
configured to a different default).
.RE
.IP "106." 5
\f[V]--numeric-ids\f[R]
.RS 4
.PP
With this option rsync will transfer numeric group and user IDs rather
than using user and group names and mapping them at both ends.
.PP
By default rsync will use the username and groupname to determine what
ownership to give files.
The special uid 0 and the special group 0 are never mapped via
user/group names even if the \f[V]--numeric-ids\f[R] option is not
specified.
.PP
If a user or group has no name on the source system or it has no match
on the destination system, then the numeric ID from the source system is
used instead.
See also the \f[V]use chroot\f[R] setting in the rsyncd.conf manpage for
some comments on how the chroot setting affects rsync\[cq]s ability to
look up the names of the users and groups and what you can do about it.
.RE
.IP "107." 5
\f[V]--usermap=STRING\f[R], \f[V]--groupmap=STRING\f[R]
.RS 4
.PP
These options allow you to specify users and groups that should be
mapped to other values by the receiving side.
The \f[B]STRING\f[R] is one or more \f[B]FROM\f[R]:\f[B]TO\f[R] pairs of
values separated by commas.
Any matching \f[B]FROM\f[R] value from the sender is replaced with a
\f[B]TO\f[R] value from the receiver.
You may specify usernames or user IDs for the \f[B]FROM\f[R] and
\f[B]TO\f[R] values, and the \f[B]FROM\f[R] value may also be a
wild-card string, which will be matched against the sender\[cq]s names
(wild-cards do NOT match against ID numbers, though see below for why a
`\f[V]*\f[R]' matches everything).
You may instead specify a range of ID numbers via an inclusive range:
LOW-HIGH.
For example:
.RS
.IP
.nf
\f[C]
--usermap=0-99:nobody,wayne:admin,*:normal --groupmap=usr:1,1:usr
\f[R]
.fi
.RE
.PP
The first match in the list is the one that is used.
You should specify all your user mappings using a single
\f[V]--usermap\f[R] option, and/or all your group mappings using a
single \f[V]--groupmap\f[R] option.
.PP
Note that the sender\[cq]s name for the 0 user and group are not
transmitted to the receiver, so you should either match these values
using a 0, or use the names in effect on the receiving side (typically
\[lq]root\[rq]).
All other \f[B]FROM\f[R] names match those in use on the sending side.
All \f[B]TO\f[R] names match those in use on the receiving side.
.PP
Any IDs that do not have a name on the sending side are treated as
having an empty name for the purpose of matching.
This allows them to be matched via a \[lq]\f[V]*\f[R]\[rq] or using an
empty name.
For instance:
.RS
.IP
.nf
\f[C]
--usermap=:nobody --groupmap=*:nobody
\f[R]
.fi
.RE
.PP
When the \f[V]--numeric-ids\f[R] option is used, the sender does not
send any names, so all the IDs are treated as having an empty name.
This means that you will need to specify numeric \f[B]FROM\f[R] values
if you want to map these nameless IDs to different values.
.PP
For the \f[V]--usermap\f[R] option to work, the receiver will need to be
running as a super-user (see also the \f[V]--super\f[R] and
\f[V]--fake-super\f[R] options).
For the \f[V]--groupmap\f[R] option to work, the receiver will need to
have permissions to set that group.
.PP
Starting with rsync 3.2.4, the \f[V]--usermap\f[R] option implies the
\f[V]--owner\f[R] (\f[V]-o\f[R]) option while the \f[V]--groupmap\f[R]
option implies the \f[V]--group\f[R] (\f[V]-g\f[R]) option (since rsync
needs to have those options enabled for the mapping options to work).
.PP
An older rsync client may need to use \f[V]-s\f[R] to avoid a complaint
about wildcard characters, but a modern rsync handles this
automatically.
.RE
.IP "108." 5
\f[V]--chown=USER:GROUP\f[R]
.RS 4
.PP
This option forces all files to be owned by USER with group GROUP.
This is a simpler interface than using \f[V]--usermap\f[R] &
\f[V]--groupmap\f[R] directly, but it is implemented using those options
internally so they cannot be mixed.
If either the USER or GROUP is empty, no mapping for the omitted
user/group will occur.
If GROUP is empty, the trailing colon may be omitted, but if USER is
empty, a leading colon must be supplied.
.PP
If you specify \[lq]\f[V]--chown=foo:bar\f[R]\[rq], this is exactly the
same as specifying \[lq]\f[V]--usermap=*:foo --groupmap=*:bar\f[R]\[rq],
only easier (and with the same implied \f[V]--owner\f[R] and/or
\f[V]--group\f[R] options).
.PP
An older rsync client may need to use \f[V]-s\f[R] to avoid a complaint
about wildcard characters, but a modern rsync handles this
automatically.
.RE
.IP "109." 5
\f[V]--timeout=SECONDS\f[R]
.RS 4
.PP
This option allows you to set a maximum I/O timeout in seconds.
If no data is transferred for the specified time then rsync will exit.
The default is 0, which means no timeout.
.RE
.IP "110." 5
\f[V]--contimeout=SECONDS\f[R]
.RS 4
.PP
This option allows you to set the amount of time that rsync will wait
for its connection to an rsync daemon to succeed.
If the timeout is reached, rsync exits with an error.
.RE
.IP "111." 5
\f[V]--address=ADDRESS\f[R]
.RS 4
.PP
By default rsync will bind to the wildcard address when connecting to an
rsync daemon.
The \f[V]--address\f[R] option allows you to specify a specific IP
address (or hostname) to bind to.
.PP
See also the daemon version of the \f[V]--address\f[R] option.
.RE
.IP "112." 5
\f[V]--port=PORT\f[R]
.RS 4
.PP
This specifies an alternate TCP port number to use rather than the
default of 873.
This is only needed if you are using the double-colon (::) syntax to
connect with an rsync daemon (since the URL syntax has a way to specify
the port as a part of the URL).
.PP
See also the daemon version of the \f[V]--port\f[R] option.
.RE
.IP "113." 5
\f[V]--sockopts=OPTIONS\f[R]
.RS 4
.PP
This option can provide endless fun for people who like to tune their
systems to the utmost degree.
You can set all sorts of socket options which may make transfers faster
(or slower!).
Read the manpage for the \f[V]setsockopt()\f[R] system call for details
on some of the options you may be able to set.
By default no special socket options are set.
This only affects direct socket connections to a remote rsync daemon.
.PP
See also the daemon version of the \f[V]--sockopts\f[R] option.
.RE
.IP "114." 5
\f[V]--blocking-io\f[R]
.RS 4
.PP
This tells rsync to use blocking I/O when launching a remote shell
transport.
If the remote shell is either rsh or remsh, rsync defaults to using
blocking I/O, otherwise it defaults to using non-blocking I/O.
(Note that ssh prefers non-blocking I/O.)
.RE
.IP "115." 5
\f[V]--outbuf=MODE\f[R]
.RS 4
.PP
This sets the output buffering mode.
The mode can be None (aka Unbuffered), Line, or Block (aka Full).
You may specify as little as a single letter for the mode, and use upper
or lower case.
.PP
The main use of this option is to change Full buffering to Line
buffering when rsync\[cq]s output is going to a file or pipe.
.RE
.IP "116." 5
\f[V]--itemize-changes\f[R], \f[V]-i\f[R]
.RS 4
.PP
Requests a simple itemized list of the changes that are being made to
each file, including attribute changes.
This is exactly the same as specifying
\f[V]--out-format=\[aq]%i %n%L\[aq]\f[R].
If you repeat the option, unchanged files will also be output, but only
if the receiving rsync is at least version 2.6.7 (you can use
\f[V]-vv\f[R] with older versions of rsync, but that also turns on the
output of other verbose messages).
.PP
The \[lq]%i\[rq] escape has a cryptic output that is 11 letters long.
The general format is like the string \f[V]YXcstpoguax\f[R], where
\f[B]Y\f[R] is replaced by the type of update being done, \f[B]X\f[R] is
replaced by the file-type, and the other letters represent attributes
that may be output if they are being modified.
.PP
The update types that replace the \f[B]Y\f[R] are as follows:
.IP \[bu] 2
A \f[V]<\f[R] means that a file is being transferred to the remote host
(sent).
.IP \[bu] 2
A \f[V]>\f[R] means that a file is being transferred to the local host
(received).
.IP \[bu] 2
A \f[V]c\f[R] means that a local change/creation is occurring for the
item (such as the creation of a directory or the changing of a symlink,
etc.).
.IP \[bu] 2
A \f[V]h\f[R] means that the item is a hard link to another item
(requires \f[V]--hard-links\f[R]).
.IP \[bu] 2
A \f[V].\f[R] means that the item is not being updated (though it might
have attributes that are being modified).
.IP \[bu] 2
A \f[V]*\f[R] means that the rest of the itemized-output area contains a
message (e.g.\ \[lq]deleting\[rq]).
.PP
The file-types that replace the \f[B]X\f[R] are: \f[V]f\f[R] for a file,
a \f[V]d\f[R] for a directory, an \f[V]L\f[R] for a symlink, a
\f[V]D\f[R] for a device, and a \f[V]S\f[R] for a special file
(e.g.\ named sockets and fifos).
.PP
The other letters in the string indicate if some attributes of the file
have changed, as follows:
.IP \[bu] 2
\[lq]\f[V].\f[R]\[rq] - the attribute is unchanged.
.IP \[bu] 2
\[lq]\f[V]+\f[R]\[rq] - the file is newly created.
.IP \[bu] 2
\[lq]\f[V]\ \f[R]\[rq] - all the attributes are unchanged (all dots turn
to spaces).
.IP \[bu] 2
\[lq]\f[V]?\f[R]\[rq] - the change is unknown (when the remote rsync is
old).
.IP \[bu] 2
A letter indicates an attribute is being updated.
.PP
The attribute that is associated with each letter is as follows:
.IP \[bu] 2
A \f[V]c\f[R] means either that a regular file has a different checksum
(requires \f[V]--checksum\f[R]) or that a symlink, device, or special
file has a changed value.
Note that if you are sending files to an rsync prior to 3.0.1, this
change flag will be present only for checksum-differing regular files.
.IP \[bu] 2
A \f[V]s\f[R] means the size of a regular file is different and will be
updated by the file transfer.
.IP \[bu] 2
A \f[V]t\f[R] means the modification time is different and is being
updated to the sender\[cq]s value (requires \f[V]--times\f[R]).
An alternate value of \f[V]T\f[R] means that the modification time will
be set to the transfer time, which happens when a file/symlink/device is
updated without \f[V]--times\f[R] and when a symlink is changed and the
receiver can\[cq]t set its time.
(Note: when using an rsync 3.0.0 client, you might see the \f[V]s\f[R]
flag combined with \f[V]t\f[R] instead of the proper \f[V]T\f[R] flag
for this time-setting failure.)
.IP \[bu] 2
A \f[V]p\f[R] means the permissions are different and are being updated
to the sender\[cq]s value (requires \f[V]--perms\f[R]).
.IP \[bu] 2
An \f[V]o\f[R] means the owner is different and is being updated to the
sender\[cq]s value (requires \f[V]--owner\f[R] and super-user
privileges).
.IP \[bu] 2
A \f[V]g\f[R] means the group is different and is being updated to the
sender\[cq]s value (requires \f[V]--group\f[R] and the authority to set
the group).
.IP \[bu] 2
A \f[V]u\f[R]|\f[V]n\f[R]|\f[V]b\f[R] indicates the following
information:
.RS 2
.IP \[bu] 2
\f[V]u\f[R] means the access (use) time is different and is being
updated to the sender\[cq]s value (requires \f[V]--atimes\f[R])
.IP \[bu] 2
\f[V]n\f[R] means the create time (newness) is different and is being
updated to the sender\[cq]s value (requires \f[V]--crtimes\f[R])
.IP \[bu] 2
\f[V]b\f[R] means that both the access and create times are being
updated
.RE
.IP \[bu] 2
The \f[V]a\f[R] means that the ACL information is being changed.
.IP \[bu] 2
The \f[V]x\f[R] means that the extended attribute information is being
changed.
.PP
One other output is possible: when deleting files, the \[lq]%i\[rq] will
output the string \[lq]\f[V]*deleting\f[R]\[rq] for each item that is
being removed (assuming that you are talking to a recent enough rsync
that it logs deletions instead of outputting them as a verbose message).
.RE
.IP "117." 5
\f[V]--out-format=FORMAT\f[R]
.RS 4
.PP
This allows you to specify exactly what the rsync client outputs to the
user on a per-update basis.
The format is a text string containing embedded single-character escape
sequences prefixed with a percent (%) character.
A default format of \[lq]%n%L\[rq] is assumed if either
\f[V]--info=name\f[R] or \f[V]-v\f[R] is specified (this tells you just
the name of the file and, if the item is a link, where it points).
For a full list of the possible escape characters, see the
\f[V]log format\f[R] setting in the rsyncd.conf manpage.
.PP
Specifying the \f[V]--out-format\f[R] option implies the
\f[V]--info=name\f[R] option, which will mention each file, dir, etc.
that gets updated in a significant way (a transferred file, a recreated
symlink/device, or a touched directory).
In addition, if the itemize-changes escape (%i) is included in the
string (e.g.\ if the \f[V]--itemize-changes\f[R] option was used), the
logging of names increases to mention any item that is changed in any
way (as long as the receiving side is at least 2.6.4).
See the \f[V]--itemize-changes\f[R] option for a description of the
output of \[lq]%i\[rq].
.PP
Rsync will output the out-format string prior to a file\[cq]s transfer
unless one of the transfer-statistic escapes is requested, in which case
the logging is done at the end of the file\[cq]s transfer.
When this late logging is in effect and \f[V]--progress\f[R] is also
specified, rsync will also output the name of the file being transferred
prior to its progress information (followed, of course, by the
out-format output).
.RE
.IP "118." 5
\f[V]--log-file=FILE\f[R]
.RS 4
.PP
This option causes rsync to log what it is doing to a file.
This is similar to the logging that a daemon does, but can be requested
for the client side and/or the server side of a non-daemon transfer.
If specified as a client option, transfer logging will be enabled with a
default format of \[lq]%i %n%L\[rq].
See the \f[V]--log-file-format\f[R] option if you wish to override this.
.PP
Here\[cq]s an example command that requests the remote side to log what
is happening:
.RS
.IP
.nf
\f[C]
rsync -av --remote-option=--log-file=/tmp/rlog src/ dest/
\f[R]
.fi
.RE
.PP
This is very useful if you need to debug why a connection is closing
unexpectedly.
.PP
See also the daemon version of the \f[V]--log-file\f[R] option.
.RE
.IP "119." 5
\f[V]--log-file-format=FORMAT\f[R]
.RS 4
.PP
This allows you to specify exactly what per-update logging is put into
the file specified by the \f[V]--log-file\f[R] option (which must also
be specified for this option to have any effect).
If you specify an empty string, updated files will not be mentioned in
the log file.
For a list of the possible escape characters, see the
\f[V]log format\f[R] setting in the rsyncd.conf manpage.
.PP
The default FORMAT used if \f[V]--log-file\f[R] is specified and this
option is not is `%i %n%L'.
.PP
See also the daemon version of the \f[V]--log-file-format\f[R] option.
.RE
.IP "120." 5
\f[V]--stats\f[R]
.RS 4
.PP
This tells rsync to print a verbose set of statistics on the file
transfer, allowing you to tell how effective rsync\[cq]s delta-transfer
algorithm is for your data.
This option is equivalent to \f[V]--info=stats2\f[R] if combined with 0
or 1 \f[V]-v\f[R] options, or \f[V]--info=stats3\f[R] if combined with 2
or more \f[V]-v\f[R] options.
.PP
The current statistics are as follows:
.IP \[bu] 2
\f[V]Number of files\f[R] is the count of all \[lq]files\[rq] (in the
generic sense), which includes directories, symlinks, etc.
The total count will be followed by a list of counts by filetype (if the
total is non-zero).
For example: \[lq](reg: 5, dir: 3, link: 2, dev: 1, special: 1)\[rq]
lists the totals for regular files, directories, symlinks, devices, and
special files.
If any of value is 0, it is completely omitted from the list.
.IP \[bu] 2
\f[V]Number of created files\f[R] is the count of how many
\[lq]files\[rq] (generic sense) were created (as opposed to updated).
The total count will be followed by a list of counts by filetype (if the
total is non-zero).
.IP \[bu] 2
\f[V]Number of deleted files\f[R] is the count of how many
\[lq]files\[rq] (generic sense) were deleted.
The total count will be followed by a list of counts by filetype (if the
total is non-zero).
Note that this line is only output if deletions are in effect, and only
if protocol 31 is being used (the default for rsync 3.1.x).
.IP \[bu] 2
\f[V]Number of regular files transferred\f[R] is the count of normal
files that were updated via rsync\[cq]s delta-transfer algorithm, which
does not include dirs, symlinks, etc.
Note that rsync 3.1.0 added the word \[lq]regular\[rq] into this
heading.
.IP \[bu] 2
\f[V]Total file size\f[R] is the total sum of all file sizes in the
transfer.
This does not count any size for directories or special files, but does
include the size of symlinks.
.IP \[bu] 2
\f[V]Total transferred file size\f[R] is the total sum of all files
sizes for just the transferred files.
.IP \[bu] 2
\f[V]Literal data\f[R] is how much unmatched file-update data we had to
send to the receiver for it to recreate the updated files.
.IP \[bu] 2
\f[V]Matched data\f[R] is how much data the receiver got locally when
recreating the updated files.
.IP \[bu] 2
\f[V]File list size\f[R] is how big the file-list data was when the
sender sent it to the receiver.
This is smaller than the in-memory size for the file list due to some
compressing of duplicated data when rsync sends the list.
.IP \[bu] 2
\f[V]File list generation time\f[R] is the number of seconds that the
sender spent creating the file list.
This requires a modern rsync on the sending side for this to be present.
.IP \[bu] 2
\f[V]File list transfer time\f[R] is the number of seconds that the
sender spent sending the file list to the receiver.
.IP \[bu] 2
\f[V]Total bytes sent\f[R] is the count of all the bytes that rsync sent
from the client side to the server side.
.IP \[bu] 2
\f[V]Total bytes received\f[R] is the count of all non-message bytes
that rsync received by the client side from the server side.
\[lq]Non-message\[rq] bytes means that we don\[cq]t count the bytes for
a verbose message that the server sent to us, which makes the stats more
consistent.
.RE
.IP "121." 5
\f[V]--8-bit-output\f[R], \f[V]-8\f[R]
.RS 4
.PP
This tells rsync to leave all high-bit characters unescaped in the
output instead of trying to test them to see if they\[cq]re valid in the
current locale and escaping the invalid ones.
All control characters (but never tabs) are always escaped, regardless
of this option\[cq]s setting.
.PP
The escape idiom that started in 2.6.7 is to output a literal backslash
(\f[V]\[rs]\f[R]) and a hash (\f[V]#\f[R]), followed by exactly 3 octal
digits.
For example, a newline would output as \[lq]\f[V]\[rs]#012\f[R]\[rq].
A literal backslash that is in a filename is not escaped unless it is
followed by a hash and 3 digits (0-9).
.RE
.IP "122." 5
\f[V]--human-readable\f[R], \f[V]-h\f[R]
.RS 4
.PP
Output numbers in a more human-readable format.
There are 3 possible levels:
.IP "1." 3
output numbers with a separator between each set of 3 digits (either a
comma or a period, depending on if the decimal point is represented by a
period or a comma).
.IP "2." 3
output numbers in units of 1000 (with a character suffix for larger
units \[en] see below).
.IP "3." 3
output numbers in units of 1024.
.PP
The default is human-readable level 1.
Each \f[V]-h\f[R] option increases the level by one.
You can take the level down to 0 (to output numbers as pure digits) by
specifying the \f[V]--no-human-readable\f[R] (\f[V]--no-h\f[R]) option.
.PP
The unit letters that are appended in levels 2 and 3 are: \f[V]K\f[R]
(kilo), \f[V]M\f[R] (mega), \f[V]G\f[R] (giga), \f[V]T\f[R] (tera), or
\f[V]P\f[R] (peta).
For example, a 1234567-byte file would output as 1.23M in level-2
(assuming that a period is your local decimal point).
.PP
Backward compatibility note: versions of rsync prior to 3.1.0 do not
support human-readable level 1, and they default to level 0.
Thus, specifying one or two \f[V]-h\f[R] options will behave in a
comparable manner in old and new versions as long as you didn\[cq]t
specify a \f[V]--no-h\f[R] option prior to one or more \f[V]-h\f[R]
options.
See the \f[V]--list-only\f[R] option for one difference.
.RE
.IP "123." 5
\f[V]--partial\f[R]
.RS 4
.PP
By default, rsync will delete any partially transferred file if the
transfer is interrupted.
In some circumstances it is more desirable to keep partially transferred
files.
Using the \f[V]--partial\f[R] option tells rsync to keep the partial
file which should make a subsequent transfer of the rest of the file
much faster.
.RE
.IP "124." 5
\f[V]--partial-dir=DIR\f[R]
.RS 4
.PP
This option modifies the behavior of the \f[V]--partial\f[R] option
while also implying that it be enabled.
This enhanced partial-file method puts any partially transferred files
into the specified \f[I]DIR\f[R] instead of writing the partial file out
to the destination file.
On the next transfer, rsync will use a file found in this dir as data to
speed up the resumption of the transfer and then delete it after it has
served its purpose.
.PP
Note that if \f[V]--whole-file\f[R] is specified (or implied), any
partial-dir files that are found for a file that is being updated will
simply be removed (since rsync is sending files without using
rsync\[cq]s delta-transfer algorithm).
.PP
Rsync will create the \f[I]DIR\f[R] if it is missing, but just the last
dir \[en] not the whole path.
This makes it easy to use a relative path (such as
\[lq]\f[V]--partial-dir=.rsync-partial\f[R]\[rq]) to have rsync create
the partial-directory in the destination file\[cq]s directory when it is
needed, and then remove it again when the partial file is deleted.
Note that this directory removal is only done for a relative pathname,
as it is expected that an absolute path is to a directory that is
reserved for partial-dir work.
.PP
If the partial-dir value is not an absolute path, rsync will add an
exclude rule at the end of all your existing excludes.
This will prevent the sending of any partial-dir files that may exist on
the sending side, and will also prevent the untimely deletion of
partial-dir items on the receiving side.
An example: the above \f[V]--partial-dir\f[R] option would add the
equivalent of this \[lq]perishable\[rq] exclude at the end of any other
filter rules: \f[V]-f \[aq]-p .rsync-partial/\[aq]\f[R]
.PP
If you are supplying your own exclude rules, you may need to add your
own exclude/hide/protect rule for the partial-dir because:
.IP "1." 3
the auto-added rule may be ineffective at the end of your other rules,
or
.IP "2." 3
you may wish to override rsync\[cq]s exclude choice.
.PP
For instance, if you want to make rsync clean-up any left-over
partial-dirs that may be lying around, you should specify
\f[V]--delete-after\f[R] and add a \[lq]risk\[rq] filter rule,
e.g.\ \f[V]-f \[aq]R .rsync-partial/\[aq]\f[R].
Avoid using \f[V]--delete-before\f[R] or \f[V]--delete-during\f[R]
unless you don\[cq]t need rsync to use any of the left-over partial-dir
data during the current run.
.PP
IMPORTANT: the \f[V]--partial-dir\f[R] should not be writable by other
users or it is a security risk!
E.g.
AVOID \[lq]/tmp\[rq]!
.PP
You can also set the partial-dir value the \f[V]RSYNC_PARTIAL_DIR\f[R]
environment variable.
Setting this in the environment does not force \f[V]--partial\f[R] to be
enabled, but rather it affects where partial files go when
\f[V]--partial\f[R] is specified.
For instance, instead of using \f[V]--partial-dir=.rsync-tmp\f[R] along
with \f[V]--progress\f[R], you could set
\f[V]RSYNC_PARTIAL_DIR=.rsync-tmp\f[R] in your environment and then use
the \f[V]-P\f[R] option to turn on the use of the .rsync-tmp dir for
partial transfers.
The only times that the \f[V]--partial\f[R] option does not look for
this environment value are:
.IP "1." 3
when \f[V]--inplace\f[R] was specified (since \f[V]--inplace\f[R]
conflicts with \f[V]--partial-dir\f[R]), and
.IP "2." 3
when \f[V]--delay-updates\f[R] was specified (see below).
.PP
When a modern rsync resumes the transfer of a file in the partial-dir,
that partial file is now updated in-place instead of creating yet
another tmp-file copy (so it maxes out at dest + tmp instead of dest +
partial + tmp).
This requires both ends of the transfer to be at least version 3.2.0.
.PP
For the purposes of the daemon-config\[cq]s
\[lq]\f[V]refuse options\f[R]\[rq] setting, \f[V]--partial-dir\f[R] does
\f[I]not\f[R] imply \f[V]--partial\f[R].
This is so that a refusal of the \f[V]--partial\f[R] option can be used
to disallow the overwriting of destination files with a partial
transfer, while still allowing the safer idiom provided by
\f[V]--partial-dir\f[R].
.RE
.IP "125." 5
\f[V]--delay-updates\f[R]
.RS 4
.PP
This option puts the temporary file from each updated file into a
holding directory until the end of the transfer, at which time all the
files are renamed into place in rapid succession.
This attempts to make the updating of the files a little more atomic.
By default the files are placed into a directory named
\f[V].\[ti]tmp\[ti]\f[R] in each file\[cq]s destination directory, but
if you\[cq]ve specified the \f[V]--partial-dir\f[R] option, that
directory will be used instead.
See the comments in the \f[V]--partial-dir\f[R] section for a discussion
of how this \f[V].\[ti]tmp\[ti]\f[R] dir will be excluded from the
transfer, and what you can do if you want rsync to cleanup old
\f[V].\[ti]tmp\[ti]\f[R] dirs that might be lying around.
Conflicts with \f[V]--inplace\f[R] and \f[V]--append\f[R].
.PP
This option implies \f[V]--no-inc-recursive\f[R] since it needs the full
file list in memory in order to be able to iterate over it at the end.
.PP
This option uses more memory on the receiving side (one bit per file
transferred) and also requires enough free disk space on the receiving
side to hold an additional copy of all the updated files.
Note also that you should not use an absolute path to
\f[V]--partial-dir\f[R] unless:
.IP "1." 3
there is no chance of any of the files in the transfer having the same
name (since all the updated files will be put into a single directory if
the path is absolute), and
.IP "2." 3
there are no mount points in the hierarchy (since the delayed updates
will fail if they can\[cq]t be renamed into place).
.PP
See also the \[lq]atomic-rsync\[rq] python script in the
\[lq]support\[rq] subdir for an update algorithm that is even more
atomic (it uses \f[V]--link-dest\f[R] and a parallel hierarchy of
files).
.RE
.IP "126." 5
\f[V]--prune-empty-dirs\f[R], \f[V]-m\f[R]
.RS 4
.PP
This option tells the receiving rsync to get rid of empty directories
from the file-list, including nested directories that have no
non-directory children.
This is useful for avoiding the creation of a bunch of useless
directories when the sending rsync is recursively scanning a hierarchy
of files using include/exclude/filter rules.
.PP
This option can still leave empty directories on the receiving side if
you make use of TRANSFER_RULES.
.PP
Because the file-list is actually being pruned, this option also affects
what directories get deleted when a delete is active.
However, keep in mind that excluded files and directories can prevent
existing items from being deleted due to an exclude both hiding source
files and protecting destination files.
See the perishable filter-rule option for how to avoid this.
.PP
You can prevent the pruning of certain empty directories from the
file-list by using a global \[lq]protect\[rq] filter.
For instance, this option would ensure that the directory
\[lq]emptydir\[rq] was kept in the file-list:
.RS
.IP
.nf
\f[C]
--filter \[aq]protect emptydir/\[aq]
\f[R]
.fi
.RE
.PP
Here\[cq]s an example that copies all .pdf files in a hierarchy, only
creating the necessary destination directories to hold the .pdf files,
and ensures that any superfluous files and directories in the
destination are removed (note the hide filter of non-directories being
used instead of an exclude):
.RS
.IP
.nf
\f[C]
rsync -avm --del --include=\[aq]*.pdf\[aq] -f \[aq]hide,! */\[aq] src/ dest
\f[R]
.fi
.RE
.PP
If you didn\[cq]t want to remove superfluous destination files, the more
time-honored options of
\f[V]--include=\[aq]*/\[aq] --exclude=\[aq]*\[aq]\f[R] would work fine
in place of the hide-filter (if that is more natural to you).
.RE
.IP "127." 5
\f[V]--progress\f[R]
.RS 4
.PP
This option tells rsync to print information showing the progress of the
transfer.
This gives a bored user something to watch.
With a modern rsync this is the same as specifying
\f[V]--info=flist2,name,progress\f[R], but any user-supplied settings
for those info flags takes precedence (e.g.
\f[V]--info=flist0 --progress\f[R]).
.PP
While rsync is transferring a regular file, it updates a progress line
that looks like this:
.RS
.IP
.nf
\f[C]
782448  63%  110.64kB/s    0:00:04
\f[R]
.fi
.RE
.PP
In this example, the receiver has reconstructed 782448 bytes or 63% of
the sender\[cq]s file, which is being reconstructed at a rate of 110.64
kilobytes per second, and the transfer will finish in 4 seconds if the
current rate is maintained until the end.
.PP
These statistics can be misleading if rsync\[cq]s delta-transfer
algorithm is in use.
For example, if the sender\[cq]s file consists of the basis file
followed by additional data, the reported rate will probably drop
dramatically when the receiver gets to the literal data, and the
transfer will probably take much longer to finish than the receiver
estimated as it was finishing the matched part of the file.
.PP
When the file transfer finishes, rsync replaces the progress line with a
summary line that looks like this:
.RS
.IP
.nf
\f[C]
1,238,099 100%  146.38kB/s    0:00:08  (xfr#5, to-chk=169/396)
\f[R]
.fi
.RE
.PP
In this example, the file was 1,238,099 bytes long in total, the average
rate of transfer for the whole file was 146.38 kilobytes per second over
the 8 seconds that it took to complete, it was the 5th transfer of a
regular file during the current rsync session, and there are 169 more
files for the receiver to check (to see if they are up-to-date or not)
remaining out of the 396 total files in the file-list.
.PP
In an incremental recursion scan, rsync won\[cq]t know the total number
of files in the file-list until it reaches the ends of the scan, but
since it starts to transfer files during the scan, it will display a
line with the text \[lq]ir-chk\[rq] (for incremental recursion check)
instead of \[lq]to-chk\[rq] until the point that it knows the full size
of the list, at which point it will switch to using \[lq]to-chk\[rq].
Thus, seeing \[lq]ir-chk\[rq] lets you know that the total count of
files in the file list is still going to increase (and each time it
does, the count of files left to check will increase by the number of
the files added to the list).
.RE
.IP "128." 5
\f[V]-P\f[R]
.RS 4
.PP
The \f[V]-P\f[R] option is equivalent to \[lq]\f[V]--partial\f[R]
\f[V]--progress\f[R]\[rq].
Its purpose is to make it much easier to specify these two options for a
long transfer that may be interrupted.
.PP
There is also a \f[V]--info=progress2\f[R] option that outputs
statistics based on the whole transfer, rather than individual files.
Use this flag without outputting a filename (e.g.\ avoid \f[V]-v\f[R] or
specify \f[V]--info=name0\f[R]) if you want to see how the transfer is
doing without scrolling the screen with a lot of names.
(You don\[cq]t need to specify the \f[V]--progress\f[R] option in order
to use \f[V]--info=progress2\f[R].)
.PP
Finally, you can get an instant progress report by sending rsync a
signal of either SIGINFO or SIGVTALRM.
On BSD systems, a SIGINFO is generated by typing a Ctrl+T (Linux
doesn\[cq]t currently support a SIGINFO signal).
When the client-side process receives one of those signals, it sets a
flag to output a single progress report which is output when the current
file transfer finishes (so it may take a little time if a big file is
being handled when the signal arrives).
A filename is output (if needed) followed by the
\f[V]--info=progress2\f[R] format of progress info.
If you don\[cq]t know which of the 3 rsync processes is the client
process, it\[cq]s OK to signal all of them (since the non-client
processes ignore the signal).
.PP
CAUTION: sending SIGVTALRM to an older rsync (pre-3.2.0) will kill it.
.RE
.IP "129." 5
\f[V]--password-file=FILE\f[R]
.RS 4
.PP
This option allows you to provide a password for accessing an rsync
daemon via a file or via standard input if \f[B]FILE\f[R] is
\f[V]-\f[R].
The file should contain just the password on the first line (all other
lines are ignored).
Rsync will exit with an error if \f[B]FILE\f[R] is world readable or if
a root-run rsync command finds a non-root-owned file.
.PP
This option does not supply a password to a remote shell transport such
as ssh; to learn how to do that, consult the remote shell\[cq]s
documentation.
When accessing an rsync daemon using a remote shell as the transport,
this option only comes into effect after the remote shell finishes its
authentication (i.e.\ if you have also specified a password in the
daemon\[cq]s config file).
.RE
.IP "130." 5
\f[V]--early-input=FILE\f[R]
.RS 4
.PP
This option allows rsync to send up to 5K of data to the \[lq]early
exec\[rq] script on its stdin.
One possible use of this data is to give the script a secret that can be
used to mount an encrypted filesystem (which you should unmount in the
the \[lq]post-xfer exec\[rq] script).
.PP
The daemon must be at least version 3.2.1.
.RE
.IP "131." 5
\f[V]--list-only\f[R]
.RS 4
.PP
This option will cause the source files to be listed instead of
transferred.
This option is inferred if there is a single source arg and no
destination specified, so its main uses are:
.IP "1." 3
to turn a copy command that includes a destination arg into a
file-listing command, or
.IP "2." 3
to be able to specify more than one source arg.
Note: be sure to include the destination.
.PP
CAUTION: keep in mind that a source arg with a wild-card is expanded by
the shell into multiple args, so it is never safe to try to specify a
single wild-card arg to try to infer this option.
A safe example is:
.RS
.IP
.nf
\f[C]
rsync -av --list-only foo* dest/
\f[R]
.fi
.RE
.PP
This option always uses an output format that looks similar to this:
.RS
.IP
.nf
\f[C]
drwxrwxr-x          4,096 2022/09/30 12:53:11 support
-rw-rw-r--             80 2005/01/11 10:37:37 support/Makefile
\f[R]
.fi
.RE
.PP
The only option that affects this output style is (as of 3.1.0) the
\f[V]--human-readable\f[R] (\f[V]-h\f[R]) option.
The default is to output sizes as byte counts with digit separators (in
a 14-character-width column).
Specifying at least one \f[V]-h\f[R] option makes the sizes output with
unit suffixes.
If you want old-style bytecount sizes without digit separators (and an
11-character-width column) use \f[V]--no-h\f[R].
.PP
Compatibility note: when requesting a remote listing of files from an
rsync that is version 2.6.3 or older, you may encounter an error if you
ask for a non-recursive listing.
This is because a file listing implies the \f[V]--dirs\f[R] option w/o
\f[V]--recursive\f[R], and older rsyncs don\[cq]t have that option.
To avoid this problem, either specify the \f[V]--no-dirs\f[R] option (if
you don\[cq]t need to expand a directory\[cq]s content), or turn on
recursion and exclude the content of subdirectories:
\f[V]-r --exclude=\[aq]/*/*\[aq]\f[R].
.RE
.IP "132." 5
\f[V]--bwlimit=RATE\f[R]
.RS 4
.PP
This option allows you to specify the maximum transfer rate for the data
sent over the socket, specified in units per second.
The RATE value can be suffixed with a string to indicate a size
multiplier, and may be a fractional value
(e.g.\ \f[V]--bwlimit=1.5m\f[R]).
If no suffix is specified, the value will be assumed to be in units of
1024 bytes (as if \[lq]K\[rq] or \[lq]KiB\[rq] had been appended).
See the \f[V]--max-size\f[R] option for a description of all the
available suffixes.
A value of 0 specifies no limit.
.PP
For backward-compatibility reasons, the rate limit will be rounded to
the nearest KiB unit, so no rate smaller than 1024 bytes per second is
possible.
.PP
Rsync writes data over the socket in blocks, and this option both limits
the size of the blocks that rsync writes, and tries to keep the average
transfer rate at the requested limit.
Some burstiness may be seen where rsync writes out a block of data and
then sleeps to bring the average rate into compliance.
.PP
Due to the internal buffering of data, the \f[V]--progress\f[R] option
may not be an accurate reflection on how fast the data is being sent.
This is because some files can show up as being rapidly sent when the
data is quickly buffered, while other can show up as very slow when the
flushing of the output buffer occurs.
This may be fixed in a future version.
.PP
See also the daemon version of the \f[V]--bwlimit\f[R] option.
.RE
.IP "133." 5
\f[V]--stop-after=MINS\f[R], (\f[V]--time-limit=MINS\f[R])
.RS 4
.PP
This option tells rsync to stop copying when the specified number of
minutes has elapsed.
.PP
For maximal flexibility, rsync does not communicate this option to the
remote rsync since it is usually enough that one side of the connection
quits as specified.
This allows the option\[cq]s use even when only one side of the
connection supports it.
You can tell the remote side about the time limit using
\f[V]--remote-option\f[R] (\f[V]-M\f[R]), should the need arise.
.PP
The \f[V]--time-limit\f[R] version of this option is deprecated.
.RE
.IP "134." 5
\f[V]--stop-at=y-m-dTh:m\f[R]
.RS 4
.PP
This option tells rsync to stop copying when the specified point in time
has been reached.
The date & time can be fully specified in a numeric format of
year-month-dayThour:minute (e.g.\ 2000-12-31T23:59) in the local
timezone.
You may choose to separate the date numbers using slashes instead of
dashes.
.PP
The value can also be abbreviated in a variety of ways, such as
specifying a 2-digit year and/or leaving off various values.
In all cases, the value will be taken to be the next possible point in
time where the supplied information matches.
If the value specifies the current time or a past time, rsync exits with
an error.
.PP
For example, \[lq]1-30\[rq] specifies the next January 30th (at midnight
local time), \[lq]14:00\[rq] specifies the next 2 P.M., \[lq]1\[rq]
specifies the next 1st of the month at midnight, \[lq]31\[rq] specifies
the next month where we can stop on its 31st day, and \[lq]:59\[rq]
specifies the next 59th minute after the hour.
.PP
For maximal flexibility, rsync does not communicate this option to the
remote rsync since it is usually enough that one side of the connection
quits as specified.
This allows the option\[cq]s use even when only one side of the
connection supports it.
You can tell the remote side about the time limit using
\f[V]--remote-option\f[R] (\f[V]-M\f[R]), should the need arise.
Do keep in mind that the remote host may have a different default
timezone than your local host.
.RE
.IP "135." 5
\f[V]--fsync\f[R]
.RS 4
.PP
Cause the receiving side to fsync each finished file.
This may slow down the transfer, but can help to provide peace of mind
when updating critical files.
.RE
.IP "136." 5
\f[V]--write-batch=FILE\f[R]
.RS 4
.PP
Record a file that can later be applied to another identical destination
with \f[V]--read-batch\f[R].
See the \[lq]BATCH MODE\[rq] section for details, and also the
\f[V]--only-write-batch\f[R] option.
.PP
This option overrides the negotiated checksum & compress lists and
always negotiates a choice based on old-school md5/md4/zlib choices.
If you want a more modern choice, use the \f[V]--checksum-choice\f[R]
(\f[V]--cc\f[R]) and/or \f[V]--compress-choice\f[R] (\f[V]--zc\f[R])
options.
.RE
.IP "137." 5
\f[V]--only-write-batch=FILE\f[R]
.RS 4
.PP
Works like \f[V]--write-batch\f[R], except that no updates are made on
the destination system when creating the batch.
This lets you transport the changes to the destination system via some
other means and then apply the changes via \f[V]--read-batch\f[R].
.PP
Note that you can feel free to write the batch directly to some portable
media: if this media fills to capacity before the end of the transfer,
you can just apply that partial transfer to the destination and repeat
the whole process to get the rest of the changes (as long as you
don\[cq]t mind a partially updated destination system while the
multi-update cycle is happening).
.PP
Also note that you only save bandwidth when pushing changes to a remote
system because this allows the batched data to be diverted from the
sender into the batch file without having to flow over the wire to the
receiver (when pulling, the sender is remote, and thus can\[cq]t write
the batch).
.RE
.IP "138." 5
\f[V]--read-batch=FILE\f[R]
.RS 4
.PP
Apply all of the changes stored in FILE, a file previously generated by
\f[V]--write-batch\f[R].
If \f[I]FILE\f[R] is \f[V]-\f[R], the batch data will be read from
standard input.
See the \[lq]BATCH MODE\[rq] section for details.
.RE
.IP "139." 5
\f[V]--protocol=NUM\f[R]
.RS 4
.PP
Force an older protocol version to be used.
This is useful for creating a batch file that is compatible with an
older version of rsync.
For instance, if rsync 2.6.4 is being used with the
\f[V]--write-batch\f[R] option, but rsync 2.6.3 is what will be used to
run the \f[V]--read-batch\f[R] option, you should use
\[lq]\[en]protocol=28\[rq] when creating the batch file to force the
older protocol version to be used in the batch file (assuming you
can\[cq]t upgrade the rsync on the reading system).
.RE
.IP "140." 5
\f[V]--iconv=CONVERT_SPEC\f[R]
.RS 4
.PP
Rsync can convert filenames between character sets using this option.
Using a CONVERT_SPEC of \[lq].\[rq] tells rsync to look up the default
character-set via the locale setting.
Alternately, you can fully specify what conversion to do by giving a
local and a remote charset separated by a comma in the order
\f[V]--iconv=LOCAL,REMOTE\f[R], e.g.\ \f[V]--iconv=utf8,iso88591\f[R].
This order ensures that the option will stay the same whether you\[cq]re
pushing or pulling files.
Finally, you can specify either \f[V]--no-iconv\f[R] or a CONVERT_SPEC
of \[lq]-\[rq] to turn off any conversion.
The default setting of this option is site-specific, and can also be
affected via the \f[V]RSYNC_ICONV\f[R] environment variable.
.PP
For a list of what charset names your local iconv library supports, you
can run \[lq]\f[V]iconv --list\f[R]\[rq].
.PP
If you specify the \f[V]--secluded-args\f[R] (\f[V]-s\f[R]) option,
rsync will translate the filenames you specify on the command-line that
are being sent to the remote host.
See also the \f[V]--files-from\f[R] option.
.PP
Note that rsync does not do any conversion of names in filter files
(including include/exclude files).
It is up to you to ensure that you\[cq]re specifying matching rules that
can match on both sides of the transfer.
For instance, you can specify extra include/exclude rules if there are
filename differences on the two sides that need to be accounted for.
.PP
When you pass an \f[V]--iconv\f[R] option to an rsync daemon that allows
it, the daemon uses the charset specified in its \[lq]charset\[rq]
configuration parameter regardless of the remote charset you actually
pass.
Thus, you may feel free to specify just the local charset for a daemon
transfer (e.g.
\f[V]--iconv=utf8\f[R]).
.RE
.IP "141." 5
\f[V]--ipv4\f[R], \f[V]-4\f[R] or \f[V]--ipv6\f[R], \f[V]-6\f[R]
.RS 4
.PP
Tells rsync to prefer IPv4/IPv6 when creating sockets or running ssh.
This affects sockets that rsync has direct control over, such as the
outgoing socket when directly contacting an rsync daemon, as well as the
forwarding of the \f[V]-4\f[R] or \f[V]-6\f[R] option to ssh when rsync
can deduce that ssh is being used as the remote shell.
For other remote shells you\[cq]ll need to specify the
\[lq]\f[V]--rsh SHELL -4\f[R]\[rq] option directly (or whatever
IPv4/IPv6 hint options it uses).
.PP
See also the daemon version of these options.
.PP
If rsync was compiled without support for IPv6, the \f[V]--ipv6\f[R]
option will have no effect.
The \f[V]rsync --version\f[R] output will contain
\[lq]\f[V]no IPv6\f[R]\[rq] if is the case.
.RE
.IP "142." 5
\f[V]--checksum-seed=NUM\f[R]
.RS 4
.PP
Set the checksum seed to the integer NUM.
This 4 byte checksum seed is included in each block and MD4 file
checksum calculation (the more modern MD5 file checksums don\[cq]t use a
seed).
By default the checksum seed is generated by the server and defaults to
the current \f[B]time\f[R]().
This option is used to set a specific checksum seed, which is useful for
applications that want repeatable block checksums, or in the case where
the user wants a more random checksum seed.
Setting NUM to 0 causes rsync to use the default of \f[B]time\f[R]() for
checksum seed.
.RE
.SS DAEMON OPTIONS
.PP
The options allowed when starting an rsync daemon are as follows:
.IP " 0." 4
\f[V]--daemon\f[R]
.RS 4
.PP
This tells rsync that it is to run as a daemon.
The daemon you start running may be accessed using an rsync client using
the \f[V]host::module\f[R] or \f[V]rsync://host/module/\f[R] syntax.
.PP
If standard input is a socket then rsync will assume that it is being
run via inetd, otherwise it will detach from the current terminal and
become a background daemon.
The daemon will read the config file (rsyncd.conf) on each connect made
by a client and respond to requests accordingly.
.PP
See the \f[B]rsyncd.conf\f[R](5) manpage for more details.
.RE
.IP " 1." 4
\f[V]--address=ADDRESS\f[R]
.RS 4
.PP
By default rsync will bind to the wildcard address when run as a daemon
with the \f[V]--daemon\f[R] option.
The \f[V]--address\f[R] option allows you to specify a specific IP
address (or hostname) to bind to.
This makes virtual hosting possible in conjunction with the
\f[V]--config\f[R] option.
.PP
See also the address global option in the rsyncd.conf manpage and the
client version of the \f[V]--address\f[R] option.
.RE
.IP " 2." 4
\f[V]--bwlimit=RATE\f[R]
.RS 4
.PP
This option allows you to specify the maximum transfer rate for the data
the daemon sends over the socket.
The client can still specify a smaller \f[V]--bwlimit\f[R] value, but no
larger value will be allowed.
.PP
See the client version of the \f[V]--bwlimit\f[R] option for some extra
details.
.RE
.IP " 3." 4
\f[V]--config=FILE\f[R]
.RS 4
.PP
This specifies an alternate config file than the default.
This is only relevant when \f[V]--daemon\f[R] is specified.
The default is /etc/rsyncd.conf unless the daemon is running over a
remote shell program and the remote user is not the super-user; in that
case the default is rsyncd.conf in the current directory (typically
$HOME).
.RE
.IP " 4." 4
\f[V]--dparam=OVERRIDE\f[R], \f[V]-M\f[R]
.RS 4
.PP
This option can be used to set a daemon-config parameter when starting
up rsync in daemon mode.
It is equivalent to adding the parameter at the end of the global
settings prior to the first module\[cq]s definition.
The parameter names can be specified without spaces, if you so desire.
For instance:
.RS
.IP
.nf
\f[C]
rsync --daemon -M pidfile=/path/rsync.pid
\f[R]
.fi
.RE
.RE
.IP " 5." 4
\f[V]--no-detach\f[R]
.RS 4
.PP
When running as a daemon, this option instructs rsync to not detach
itself and become a background process.
This option is required when running as a service on Cygwin, and may
also be useful when rsync is supervised by a program such as
\f[V]daemontools\f[R] or AIX\[cq]s \f[V]System Resource Controller\f[R].
\f[V]--no-detach\f[R] is also recommended when rsync is run under a
debugger.
This option has no effect if rsync is run from inetd or sshd.
.RE
.IP " 6." 4
\f[V]--port=PORT\f[R]
.RS 4
.PP
This specifies an alternate TCP port number for the daemon to listen on
rather than the default of 873.
.PP
See also the client version of the \f[V]--port\f[R] option and the port
global setting in the rsyncd.conf manpage.
.RE
.IP " 7." 4
\f[V]--log-file=FILE\f[R]
.RS 4
.PP
This option tells the rsync daemon to use the given log-file name
instead of using the \[lq]\f[V]log file\f[R]\[rq] setting in the config
file.
.PP
See also the client version of the \f[V]--log-file\f[R] option.
.RE
.IP " 8." 4
\f[V]--log-file-format=FORMAT\f[R]
.RS 4
.PP
This option tells the rsync daemon to use the given FORMAT string
instead of using the \[lq]\f[V]log format\f[R]\[rq] setting in the
config file.
It also enables \[lq]\f[V]transfer logging\f[R]\[rq] unless the string
is empty, in which case transfer logging is turned off.
.PP
See also the client version of the \f[V]--log-file-format\f[R] option.
.RE
.IP " 9." 4
\f[V]--sockopts\f[R]
.RS 4
.PP
This overrides the \f[V]socket options\f[R] setting in the rsyncd.conf
file and has the same syntax.
.PP
See also the client version of the \f[V]--sockopts\f[R] option.
.RE
.IP "10." 4
\f[V]--verbose\f[R], \f[V]-v\f[R]
.RS 4
.PP
This option increases the amount of information the daemon logs during
its startup phase.
After the client connects, the daemon\[cq]s verbosity level will be
controlled by the options that the client used and the
\[lq]\f[V]max verbosity\f[R]\[rq] setting in the module\[cq]s config
section.
.PP
See also the client version of the \f[V]--verbose\f[R] option.
.RE
.IP "11." 4
\f[V]--ipv4\f[R], \f[V]-4\f[R] or \f[V]--ipv6\f[R], \f[V]-6\f[R]
.RS 4
.PP
Tells rsync to prefer IPv4/IPv6 when creating the incoming sockets that
the rsync daemon will use to listen for connections.
One of these options may be required in older versions of Linux to work
around an IPv6 bug in the kernel (if you see an \[lq]address already in
use\[rq] error when nothing else is using the port, try specifying
\f[V]--ipv6\f[R] or \f[V]--ipv4\f[R] when starting the daemon).
.PP
See also the client version of these options.
.PP
If rsync was compiled without support for IPv6, the \f[V]--ipv6\f[R]
option will have no effect.
The \f[V]rsync --version\f[R] output will contain
\[lq]\f[V]no IPv6\f[R]\[rq] if is the case.
.RE
.IP "12." 4
\f[V]--help\f[R], \f[V]-h\f[R]
.RS 4
.PP
When specified after \f[V]--daemon\f[R], print a short help page
describing the options available for starting an rsync daemon.
.RE
.SS FILTER RULES
.PP
The filter rules allow for custom control of several aspects of how
files are handled:
.IP \[bu] 2
Control which files the sending side puts into the file list that
describes the transfer hierarchy
.IP \[bu] 2
Control which files the receiving side protects from deletion when the
file is not in the sender\[cq]s file list
.IP \[bu] 2
Control which extended attribute names are skipped when copying xattrs
.PP
The rules are either directly specified via option arguments or they can
be read in from one or more files.
The filter-rule files can even be a part of the hierarchy of files being
copied, affecting different parts of the tree in different ways.
.SS SIMPLE INCLUDE/EXCLUDE RULES
.PP
We will first cover the basics of how include & exclude rules affect
what files are transferred, ignoring any deletion side-effects.
Filter rules mainly affect the contents of directories that rsync is
\[lq]recursing\[rq] into, but they can also affect a top-level item in
the transfer that was specified as a argument.
.PP
The default for any unmatched file/dir is for it to be included in the
transfer, which puts the file/dir into the sender\[cq]s file list.
The use of an exclude rule causes one or more matching files/dirs to be
left out of the sender\[cq]s file list.
An include rule can be used to limit the effect of an exclude rule that
is matching too many files.
.PP
The order of the rules is important because the first rule that matches
is the one that takes effect.
Thus, if an early rule excludes a file, no include rule that comes after
it can have any effect.
This means that you must place any include overrides somewhere prior to
the exclude that it is intended to limit.
.PP
When a directory is excluded, all its contents and sub-contents are also
excluded.
The sender doesn\[cq]t scan through any of it at all, which can save a
lot of time when skipping large unneeded sub-trees.
.PP
It is also important to understand that the include/exclude rules are
applied to every file and directory that the sender is recursing into.
Thus, if you want a particular deep file to be included, you have to
make sure that none of the directories that must be traversed on the way
down to that file are excluded or else the file will never be discovered
to be included.
As an example, if the directory \[lq]\f[V]a/path\f[R]\[rq] was given as
a transfer argument and you want to ensure that the file
\[lq]\f[V]a/path/down/deep/wanted.txt\f[R]\[rq] is a part of the
transfer, then the sender must not exclude the directories
\[lq]\f[V]a/path\f[R]\[rq], \[lq]\f[V]a/path/down\f[R]\[rq], or
\[lq]\f[V]a/path/down/deep\f[R]\[rq] as it makes it way scanning through
the file tree.
.PP
When you are working on the rules, it can be helpful to ask rsync to
tell you what is being excluded/included and why.
Specifying \f[V]--debug=FILTER\f[R] or (when pulling files)
\f[V]-M--debug=FILTER\f[R] turns on level 1 of the FILTER debug
information that will output a message any time that a file or directory
is included or excluded and which rule it matched.
Beginning in 3.2.4 it will also warn if a filter rule has trailing
whitespace, since an exclude of \[lq]foo\ \[rq] (with a trailing space)
will not exclude a file named \[lq]foo\[rq].
.PP
Exclude and include rules can specify wildcard PATTERN MATCHING RULES
(similar to shell wildcards) that allow you to match things like a file
suffix or a portion of a filename.
.PP
A rule can be limited to only affecting a directory by putting a
trailing slash onto the filename.
.SS SIMPLE INCLUDE/EXCLUDE EXAMPLE
.PP
With the following file tree created on the sending side:
.RS
.IP
.nf
\f[C]
mkdir x/
touch x/file.txt
mkdir x/y/
touch x/y/file.txt
touch x/y/zzz.txt
mkdir x/z/
touch x/z/file.txt
\f[R]
.fi
.RE
.PP
Then the following rsync command will transfer the file
\[lq]\f[V]x/y/file.txt\f[R]\[rq] and the directories needed to hold it,
resulting in the path \[lq]\f[V]/tmp/x/y/file.txt\f[R]\[rq] existing on
the remote host:
.RS
.IP
.nf
\f[C]
rsync -ai -f\[aq]+ x/\[aq] -f\[aq]+ x/y/\[aq] -f\[aq]+ x/y/file.txt\[aq] -f\[aq]- *\[aq] x host:/tmp/
\f[R]
.fi
.RE
.PP
Aside: this copy could also have been accomplished using the
\f[V]-R\f[R] option (though the 2 commands behave differently if
deletions are enabled):
.RS
.IP
.nf
\f[C]
rsync -aiR x/y/file.txt host:/tmp/
\f[R]
.fi
.RE
.PP
The following command does not need an include of the \[lq]x\[rq]
directory because it is not a part of the transfer (note the trailing
slash).
Running this command would copy just \[lq]\f[V]/tmp/x/file.txt\f[R]\[rq]
because the \[lq]y\[rq] and \[lq]z\[rq] dirs get excluded:
.RS
.IP
.nf
\f[C]
rsync -ai -f\[aq]+ file.txt\[aq] -f\[aq]- *\[aq] x/ host:/tmp/x/
\f[R]
.fi
.RE
.PP
This command would omit the zzz.txt file while copying \[lq]x\[rq] and
everything else it contains:
.RS
.IP
.nf
\f[C]
rsync -ai -f\[aq]- zzz.txt\[aq] x host:/tmp/
\f[R]
.fi
.RE
.SS FILTER RULES WHEN DELETING
.PP
By default the include & exclude filter rules affect both the sender (as
it creates its file list) and the receiver (as it creates its file lists
for calculating deletions).
If no delete option is in effect, the receiver skips creating the
delete-related file lists.
This two-sided default can be manually overridden so that you are only
specifying sender rules or receiver rules, as described in the FILTER
RULES IN DEPTH section.
.PP
When deleting, an exclude protects a file from being removed on the
receiving side while an include overrides that protection (putting the
file at risk of deletion).
The default is for a file to be at risk \[en] its safety depends on it
matching a corresponding file from the sender.
.PP
An example of the two-sided exclude effect can be illustrated by the
copying of a C development directory between 2 systems.
When doing a touch-up copy, you might want to skip copying the built
executable and the \f[V].o\f[R] files (sender hide) so that the
receiving side can build their own and not lose any object files that
are already correct (receiver protect).
For instance:
.RS
.IP
.nf
\f[C]
rsync -ai --del -f\[aq]- *.o\[aq] -f\[aq]- cmd\[aq] src host:/dest/
\f[R]
.fi
.RE
.PP
Note that using \f[V]-f\[aq]-p *.o\[aq]\f[R] is even better than
\f[V]-f\[aq]- *.o\[aq]\f[R] if there is a chance that the directory
structure may have changed.
The \[lq]p\[rq] modifier is discussed in FILTER RULE MODIFIERS.
.PP
One final note, if your shell doesn\[cq]t mind unexpanded wildcards, you
could simplify the typing of the filter options by using an underscore
in place of the space and leaving off the quotes.
For instance, \f[V]-f -_*.o -f -_cmd\f[R] (and similar) could be used
instead of the filter options above.
.SS FILTER RULES IN DEPTH
.PP
Rsync supports old-style include/exclude rules and new-style filter
rules.
The older rules are specified using \f[V]--include\f[R] and
\f[V]--exclude\f[R] as well as the \f[V]--include-from\f[R] and
\f[V]--exclude-from\f[R].
These are limited in behavior but they don\[cq]t require a \[lq]-\[rq]
or \[lq]+\[rq] prefix.
An old-style exclude rule is turned into a \[lq]\f[V]- name\f[R]\[rq]
filter rule (with no modifiers) and an old-style include rule is turned
into a \[lq]\f[V]+ name\f[R]\[rq] filter rule (with no modifiers).
.PP
Rsync builds an ordered list of filter rules as specified on the
command-line and/or read-in from files.
New style filter rules have the following syntax:
.RS
.IP
.nf
\f[C]
RULE [PATTERN_OR_FILENAME]
RULE,MODIFIERS [PATTERN_OR_FILENAME]
\f[R]
.fi
.RE
.PP
You have your choice of using either short or long RULE names, as
described below.
If you use a short-named rule, the `,' separating the RULE from the
MODIFIERS is optional.
The PATTERN or FILENAME that follows (when present) must come after
either a single space or an underscore (_).
Any additional spaces and/or underscores are considered to be a part of
the pattern name.
Here are the available rule prefixes:
.IP "0." 3
\f[V]exclude, \[aq]-\[aq]\f[R] specifies an exclude pattern that (by
default) is both a \f[V]hide\f[R] and a \f[V]protect\f[R].
.IP "1." 3
\f[V]include, \[aq]+\[aq]\f[R] specifies an include pattern that (by
default) is both a \f[V]show\f[R] and a \f[V]risk\f[R].
.IP "2." 3
\f[V]merge, \[aq].\[aq]\f[R] specifies a merge-file on the client side
to read for more rules.
.IP "3." 3
\f[V]dir-merge, \[aq]:\[aq]\f[R] specifies a per-directory merge-file.
Using this kind of filter rule requires that you trust the sending
side\[cq]s filter checking, so it has the side-effect mentioned under
the \f[V]--trust-sender\f[R] option.
.IP "4." 3
\f[V]hide, \[aq]H\[aq]\f[R] specifies a pattern for hiding files from
the transfer.
Equivalent to a sender-only exclude, so \f[V]-f\[aq]H foo\[aq]\f[R]
could also be specified as \f[V]-f\[aq]-s foo\[aq]\f[R].
.IP "5." 3
\f[V]show, \[aq]S\[aq]\f[R] files that match the pattern are not hidden.
Equivalent to a sender-only include, so \f[V]-f\[aq]S foo\[aq]\f[R]
could also be specified as \f[V]-f\[aq]+s     foo\[aq]\f[R].
.IP "6." 3
\f[V]protect, \[aq]P\[aq]\f[R] specifies a pattern for protecting files
from deletion.
Equivalent to a receiver-only exclude, so \f[V]-f\[aq]P foo\[aq]\f[R]
could also be specified as \f[V]-f\[aq]-r foo\[aq]\f[R].
.IP "7." 3
\f[V]risk, \[aq]R\[aq]\f[R] files that match the pattern are not
protected.
Equivalent to a receiver-only include, so \f[V]-f\[aq]R foo\[aq]\f[R]
could also be specified as \f[V]-f\[aq]+r     foo\[aq]\f[R].
.IP "8." 3
\f[V]clear, \[aq]!\[aq]\f[R] clears the current include/exclude list
(takes no arg)
.PP
When rules are being read from a file (using merge or dir-merge), empty
lines are ignored, as are whole-line comments that start with a
`\f[V]#\f[R]' (filename rules that contain a hash character are
unaffected).
.PP
Note also that the \f[V]--filter\f[R], \f[V]--include\f[R], and
\f[V]--exclude\f[R] options take one rule/pattern each.
To add multiple ones, you can repeat the options on the command-line,
use the merge-file syntax of the \f[V]--filter\f[R] option, or the
\f[V]--include-from\f[R] / \f[V]--exclude-from\f[R] options.
.SS PATTERN MATCHING RULES
.PP
Most of the rules mentioned above take an argument that specifies what
the rule should match.
If rsync is recursing through a directory hierarchy, keep in mind that
each pattern is matched against the name of every directory in the
descent path as rsync finds the filenames to send.
.PP
The matching rules for the pattern argument take several forms:
.IP \[bu] 2
If a pattern contains a \f[V]/\f[R] (not counting a trailing slash) or a
\[lq]\f[V]**\f[R]\[rq] (which can match a slash), then the pattern is
matched against the full pathname, including any leading directories
within the transfer.
If the pattern doesn\[cq]t contain a (non-trailing) \f[V]/\f[R] or a
\[lq]\f[V]**\f[R]\[rq], then it is matched only against the final
component of the filename or pathname.
For example, \f[V]foo\f[R] means that the final path component must be
\[lq]foo\[rq] while \f[V]foo/bar\f[R] would match the last 2 elements of
the path (as long as both elements are within the transfer).
.IP \[bu] 2
A pattern that ends with a \f[V]/\f[R] only matches a directory, not a
regular file, symlink, or device.
.IP \[bu] 2
A pattern that starts with a \f[V]/\f[R] is anchored to the start of the
transfer path instead of the end.
For example, \f[V]/foo/**\f[R] or \f[V]/foo/bar/**\f[R] match only
leading elements in the path.
If the rule is read from a per-directory filter file, the transfer path
being matched will begin at the level of the filter file instead of the
top of the transfer.
See the section on ANCHORING INCLUDE/EXCLUDE PATTERNS for a full
discussion of how to specify a pattern that matches at the root of the
transfer.
.PP
Rsync chooses between doing a simple string match and wildcard matching
by checking if the pattern contains one of these three wildcard
characters: `\f[V]*\f[R]', `\f[V]?\f[R]', and `\f[V][\f[R]' :
.IP \[bu] 2
a `\f[V]?\f[R]' matches any single character except a slash
(\f[V]/\f[R]).
.IP \[bu] 2
a `\f[V]*\f[R]' matches zero or more non-slash characters.
.IP \[bu] 2
a `\f[V]**\f[R]' matches zero or more characters, including slashes.
.IP \[bu] 2
a `\f[V][\f[R]' introduces a character class, such as \f[V][a-z]\f[R] or
\f[V][[:alpha:]]\f[R], that must match one character.
.IP \[bu] 2
a trailing \f[V]***\f[R] in the pattern is a shorthand that allows you
to match a directory and all its contents using a single rule.
For example, specifying \[lq]\f[V]dir_name/***\f[R]\[rq] will match both
the \[lq]dir_name\[rq] directory (as if \[lq]\f[V]dir_name/\f[R]\[rq]
had been specified) and everything in the directory (as if
\[lq]\f[V]dir_name/**\f[R]\[rq] had been specified).
.IP \[bu] 2
a backslash can be used to escape a wildcard character, but it is only
interpreted as an escape character if at least one wildcard character is
present in the match pattern.
For instance, the pattern \[lq]\f[V]foo\[rs]bar\f[R]\[rq] matches that
single backslash literally, while the pattern
\[lq]\f[V]foo\[rs]bar*\f[R]\[rq] would need to be changed to
\[lq]\f[V]foo\[rs]\[rs]bar*\f[R]\[rq] to avoid the
\[lq]\f[V]\[rs]b\f[R]\[rq] becoming just \[lq]b\[rq].
.PP
Here are some examples of exclude/include matching:
.IP \[bu] 2
Option \f[V]-f\[aq]- *.o\[aq]\f[R] would exclude all filenames ending
with \f[V].o\f[R]
.IP \[bu] 2
Option \f[V]-f\[aq]- /foo\[aq]\f[R] would exclude a file (or directory)
named foo in the transfer-root directory
.IP \[bu] 2
Option \f[V]-f\[aq]- foo/\[aq]\f[R] would exclude any directory named
foo
.IP \[bu] 2
Option \f[V]-f\[aq]- foo/*/bar\[aq]\f[R] would exclude any file/dir
named bar which is at two levels below a directory named foo (if foo is
in the transfer)
.IP \[bu] 2
Option \f[V]-f\[aq]- /foo/**/bar\[aq]\f[R] would exclude any file/dir
named bar that was two or more levels below a top-level directory named
foo (note that /foo/bar is \f[B]not\f[R] excluded by this)
.IP \[bu] 2
Options \f[V]-f\[aq]+ */\[aq] -f\[aq]+ *.c\[aq] -f\[aq]- *\[aq]\f[R]
would include all directories and .c source files but nothing else
.IP \[bu] 2
Options
\f[V]-f\[aq]+ foo/\[aq] -f\[aq]+ foo/bar.c\[aq] -f\[aq]- *\[aq]\f[R]
would include only the foo directory and foo/bar.c (the foo directory
must be explicitly included or it would be excluded by the
\[lq]\f[V]- *\f[R]\[rq])
.SS FILTER RULE MODIFIERS
.PP
The following modifiers are accepted after an include (+) or exclude (-)
rule:
.IP \[bu] 2
A \f[V]/\f[R] specifies that the include/exclude rule should be matched
against the absolute pathname of the current item.
For example, \f[V]-f\[aq]-/ /etc/passwd\[aq]\f[R] would exclude the
passwd file any time the transfer was sending files from the
\[lq]/etc\[rq] directory, and \[lq]-/ subdir/foo\[rq] would always
exclude \[lq]foo\[rq] when it is in a dir named \[lq]subdir\[rq], even
if \[lq]foo\[rq] is at the root of the current transfer.
.IP \[bu] 2
A \f[V]!\f[R] specifies that the include/exclude should take effect if
the pattern fails to match.
For instance, \f[V]-f\[aq]-! */\[aq]\f[R] would exclude all
non-directories.
.IP \[bu] 2
A \f[V]C\f[R] is used to indicate that all the global CVS-exclude rules
should be inserted as excludes in place of the \[lq]-C\[rq].
No arg should follow.
.IP \[bu] 2
An \f[V]s\f[R] is used to indicate that the rule applies to the sending
side.
When a rule affects the sending side, it affects what files are put into
the sender\[cq]s file list.
The default is for a rule to affect both sides unless
\f[V]--delete-excluded\f[R] was specified, in which case default rules
become sender-side only.
See also the hide (H) and show (S) rules, which are an alternate way to
specify sending-side includes/excludes.
.IP \[bu] 2
An \f[V]r\f[R] is used to indicate that the rule applies to the
receiving side.
When a rule affects the receiving side, it prevents files from being
deleted.
See the \f[V]s\f[R] modifier for more info.
See also the protect (P) and risk (R) rules, which are an alternate way
to specify receiver-side includes/excludes.
.IP \[bu] 2
A \f[V]p\f[R] indicates that a rule is perishable, meaning that it is
ignored in directories that are being deleted.
For instance, the \f[V]--cvs-exclude\f[R] (\f[V]-C\f[R]) option\[cq]s
default rules that exclude things like \[lq]CVS\[rq] and
\[lq]\f[V]*.o\f[R]\[rq] are marked as perishable, and will not prevent a
directory that was removed on the source from being deleted on the
destination.
.IP \[bu] 2
An \f[V]x\f[R] indicates that a rule affects xattr names in xattr
copy/delete operations (and is thus ignored when matching file/dir
names).
If no xattr-matching rules are specified, a default xattr filtering rule
is used (see the \f[V]--xattrs\f[R] option).
.SS MERGE-FILE FILTER RULES
.PP
You can merge whole files into your filter rules by specifying either a
merge (.)
or a dir-merge (:) filter rule (as introduced in the FILTER RULES
section above).
.PP
There are two kinds of merged files \[en] single-instance (`.') and
per-directory (`:').
A single-instance merge file is read one time, and its rules are
incorporated into the filter list in the place of the \[lq].\[rq] rule.
For per-directory merge files, rsync will scan every directory that it
traverses for the named file, merging its contents when the file exists
into the current list of inherited rules.
These per-directory rule files must be created on the sending side
because it is the sending side that is being scanned for the available
files to transfer.
These rule files may also need to be transferred to the receiving side
if you want them to affect what files don\[cq]t get deleted (see
PER-DIRECTORY RULES AND DELETE below).
.PP
Some examples:
.RS
.IP
.nf
\f[C]
merge /etc/rsync/default.rules
\&. /etc/rsync/default.rules
dir-merge .per-dir-filter
dir-merge,n- .non-inherited-per-dir-excludes
:n- .non-inherited-per-dir-excludes
\f[R]
.fi
.RE
.PP
The following modifiers are accepted after a merge or dir-merge rule:
.IP \[bu] 2
A \f[V]-\f[R] specifies that the file should consist of only exclude
patterns, with no other rule-parsing except for in-file comments.
.IP \[bu] 2
A \f[V]+\f[R] specifies that the file should consist of only include
patterns, with no other rule-parsing except for in-file comments.
.IP \[bu] 2
A \f[V]C\f[R] is a way to specify that the file should be read in a
CVS-compatible manner.
This turns on `n', `w', and `-', but also allows the list-clearing token
(!)
to be specified.
If no filename is provided, \[lq].cvsignore\[rq] is assumed.
.IP \[bu] 2
A \f[V]e\f[R] will exclude the merge-file name from the transfer;
e.g.\ \[lq]dir-merge,e .rules\[rq] is like \[lq]dir-merge .rules\[rq]
and \[lq]- .rules\[rq].
.IP \[bu] 2
An \f[V]n\f[R] specifies that the rules are not inherited by
subdirectories.
.IP \[bu] 2
A \f[V]w\f[R] specifies that the rules are word-split on whitespace
instead of the normal line-splitting.
This also turns off comments.
Note: the space that separates the prefix from the rule is treated
specially, so \[lq]- foo + bar\[rq] is parsed as two rules (assuming
that prefix-parsing wasn\[cq]t also disabled).
.IP \[bu] 2
You may also specify any of the modifiers for the \[lq]+\[rq] or
\[lq]-\[rq] rules (above) in order to have the rules that are read in
from the file default to having that modifier set (except for the
\f[V]!\f[R] modifier, which would not be useful).
For instance, \[lq]merge,-/ .excl\[rq] would treat the contents of .excl
as absolute-path excludes, while \[lq]dir-merge,s .filt\[rq] and
\[lq]:sC\[rq] would each make all their per-directory rules apply only
on the sending side.
If the merge rule specifies sides to affect (via the \f[V]s\f[R] or
\f[V]r\f[R] modifier or both), then the rules in the file must not
specify sides (via a modifier or a rule prefix such as \f[V]hide\f[R]).
.PP
Per-directory rules are inherited in all subdirectories of the directory
where the merge-file was found unless the `n' modifier was used.
Each subdirectory\[cq]s rules are prefixed to the inherited
per-directory rules from its parents, which gives the newest rules a
higher priority than the inherited rules.
The entire set of dir-merge rules are grouped together in the spot where
the merge-file was specified, so it is possible to override dir-merge
rules via a rule that got specified earlier in the list of global rules.
When the list-clearing rule (\[lq]!\[rq]) is read from a per-directory
file, it only clears the inherited rules for the current merge file.
.PP
Another way to prevent a single rule from a dir-merge file from being
inherited is to anchor it with a leading slash.
Anchored rules in a per-directory merge-file are relative to the
merge-file\[cq]s directory, so a pattern \[lq]/foo\[rq] would only match
the file \[lq]foo\[rq] in the directory where the dir-merge filter file
was found.
.PP
Here\[cq]s an example filter file which you\[cq]d specify via
\f[V]--filter=\[dq]. file\[dq]:\f[R]
.RS
.IP
.nf
\f[C]
merge /home/user/.global-filter
- *.gz
dir-merge .rules
+ *.[ch]
- *.o
- foo*
\f[R]
.fi
.RE
.PP
This will merge the contents of the /home/user/.global-filter file at
the start of the list and also turns the \[lq].rules\[rq] filename into
a per-directory filter file.
All rules read in prior to the start of the directory scan follow the
global anchoring rules (i.e.\ a leading slash matches at the root of the
transfer).
.PP
If a per-directory merge-file is specified with a path that is a parent
directory of the first transfer directory, rsync will scan all the
parent dirs from that starting point to the transfer directory for the
indicated per-directory file.
For instance, here is a common filter (see \f[V]-F\f[R]):
.RS
.IP
.nf
\f[C]
--filter=\[aq]: /.rsync-filter\[aq]
\f[R]
.fi
.RE
.PP
That rule tells rsync to scan for the file .rsync-filter in all
directories from the root down through the parent directory of the
transfer prior to the start of the normal directory scan of the file in
the directories that are sent as a part of the transfer.
(Note: for an rsync daemon, the root is always the same as the
module\[cq]s \[lq]path\[rq].)
.PP
Some examples of this pre-scanning for per-directory files:
.RS
.IP
.nf
\f[C]
rsync -avF /src/path/ /dest/dir
rsync -av --filter=\[aq]: ../../.rsync-filter\[aq] /src/path/ /dest/dir
rsync -av --filter=\[aq]: .rsync-filter\[aq] /src/path/ /dest/dir
\f[R]
.fi
.RE
.PP
The first two commands above will look for \[lq].rsync-filter\[rq] in
\[lq]/\[rq] and \[lq]/src\[rq] before the normal scan begins looking for
the file in \[lq]/src/path\[rq] and its subdirectories.
The last command avoids the parent-dir scan and only looks for the
\[lq].rsync-filter\[rq] files in each directory that is a part of the
transfer.
.PP
If you want to include the contents of a \[lq].cvsignore\[rq] in your
patterns, you should use the rule \[lq]:C\[rq], which creates a
dir-merge of the .cvsignore file, but parsed in a CVS-compatible manner.
You can use this to affect where the \f[V]--cvs-exclude\f[R]
(\f[V]-C\f[R]) option\[cq]s inclusion of the per-directory .cvsignore
file gets placed into your rules by putting the \[lq]:C\[rq] wherever
you like in your filter rules.
Without this, rsync would add the dir-merge rule for the .cvsignore file
at the end of all your other rules (giving it a lower priority than your
command-line rules).
For example:
.RS
.IP
.nf
\f[C]
cat <<EOT | rsync -avC --filter=\[aq]. -\[aq] a/ b
+ foo.o
:C
- *.old
EOT
rsync -avC --include=foo.o -f :C --exclude=\[aq]*.old\[aq] a/ b
\f[R]
.fi
.RE
.PP
Both of the above rsync commands are identical.
Each one will merge all the per-directory .cvsignore rules in the middle
of the list rather than at the end.
This allows their dir-specific rules to supersede the rules that follow
the :C instead of being subservient to all your rules.
To affect the other CVS exclude rules (i.e.\ the default list of
exclusions, the contents of $HOME/.cvsignore, and the value of
$CVSIGNORE) you should omit the \f[V]-C\f[R] command-line option and
instead insert a \[lq]-C\[rq] rule into your filter rules; e.g.
\[lq]\f[V]--filter=-C\f[R]\[rq].
.SS LIST-CLEARING FILTER RULE
.PP
You can clear the current include/exclude list by using the \[lq]!\[rq]
filter rule (as introduced in the FILTER RULES section above).
The \[lq]current\[rq] list is either the global list of rules (if the
rule is encountered while parsing the filter options) or a set of
per-directory rules (which are inherited in their own sub-list, so a
subdirectory can use this to clear out the parent\[cq]s rules).
.SS ANCHORING INCLUDE/EXCLUDE PATTERNS
.PP
As mentioned earlier, global include/exclude patterns are anchored at
the \[lq]root of the transfer\[rq] (as opposed to per-directory
patterns, which are anchored at the merge-file\[cq]s directory).
If you think of the transfer as a subtree of names that are being sent
from sender to receiver, the transfer-root is where the tree starts to
be duplicated in the destination directory.
This root governs where patterns that start with a / match.
.PP
Because the matching is relative to the transfer-root, changing the
trailing slash on a source path or changing your use of the
\f[V]--relative\f[R] option affects the path you need to use in your
matching (in addition to changing how much of the file tree is
duplicated on the destination host).
The following examples demonstrate this.
.PP
Let\[cq]s say that we want to match two source files, one with an
absolute path of \[lq]/home/me/foo/bar\[rq], and one with a path of
\[lq]/home/you/bar/baz\[rq].
Here is how the various command choices differ for a 2-source transfer:
.RS
.IP
.nf
\f[C]
Example cmd: rsync -a /home/me /home/you /dest
+/- pattern: /me/foo/bar
+/- pattern: /you/bar/baz
Target file: /dest/me/foo/bar
Target file: /dest/you/bar/baz
\f[R]
.fi
.RE
.RS
.IP
.nf
\f[C]
Example cmd: rsync -a /home/me/ /home/you/ /dest
+/- pattern: /foo/bar               (note missing \[dq]me\[dq])
+/- pattern: /bar/baz               (note missing \[dq]you\[dq])
Target file: /dest/foo/bar
Target file: /dest/bar/baz
\f[R]
.fi
.RE
.RS
.IP
.nf
\f[C]
Example cmd: rsync -a --relative /home/me/ /home/you /dest
+/- pattern: /home/me/foo/bar       (note full path)
+/- pattern: /home/you/bar/baz      (ditto)
Target file: /dest/home/me/foo/bar
Target file: /dest/home/you/bar/baz
\f[R]
.fi
.RE
.RS
.IP
.nf
\f[C]
Example cmd: cd /home; rsync -a --relative me/foo you/ /dest
+/- pattern: /me/foo/bar      (starts at specified path)
+/- pattern: /you/bar/baz     (ditto)
Target file: /dest/me/foo/bar
Target file: /dest/you/bar/baz
\f[R]
.fi
.RE
.PP
The easiest way to see what name you should filter is to just look at
the output when using \f[V]--verbose\f[R] and put a / in front of the
name (use the \f[V]--dry-run\f[R] option if you\[cq]re not yet ready to
copy any files).
.SS PER-DIRECTORY RULES AND DELETE
.PP
Without a delete option, per-directory rules are only relevant on the
sending side, so you can feel free to exclude the merge files themselves
without affecting the transfer.
To make this easy, the `e' modifier adds this exclude for you, as seen
in these two equivalent commands:
.RS
.IP
.nf
\f[C]
rsync -av --filter=\[aq]: .excl\[aq] --exclude=.excl host:src/dir /dest
rsync -av --filter=\[aq]:e .excl\[aq] host:src/dir /dest
\f[R]
.fi
.RE
.PP
However, if you want to do a delete on the receiving side AND you want
some files to be excluded from being deleted, you\[cq]ll need to be sure
that the receiving side knows what files to exclude.
The easiest way is to include the per-directory merge files in the
transfer and use \f[V]--delete-after\f[R], because this ensures that the
receiving side gets all the same exclude rules as the sending side
before it tries to delete anything:
.RS
.IP
.nf
\f[C]
rsync -avF --delete-after host:src/dir /dest
\f[R]
.fi
.RE
.PP
However, if the merge files are not a part of the transfer, you\[cq]ll
need to either specify some global exclude rules (i.e.\ specified on the
command line), or you\[cq]ll need to maintain your own per-directory
merge files on the receiving side.
An example of the first is this (assume that the remote .rules files
exclude themselves):
.RS
.IP
.nf
\f[C]
rsync -av --filter=\[aq]: .rules\[aq] --filter=\[aq]. /my/extra.rules\[aq]
   --delete host:src/dir /dest
\f[R]
.fi
.RE
.PP
In the above example the extra.rules file can affect both sides of the
transfer, but (on the sending side) the rules are subservient to the
rules merged from the .rules files because they were specified after the
per-directory merge rule.
.PP
In one final example, the remote side is excluding the .rsync-filter
files from the transfer, but we want to use our own .rsync-filter files
to control what gets deleted on the receiving side.
To do this we must specifically exclude the per-directory merge files
(so that they don\[cq]t get deleted) and then put rules into the local
files to control what else should not get deleted.
Like one of these commands:
.RS
.IP
.nf
\f[C]
rsync -av --filter=\[aq]:e /.rsync-filter\[aq] --delete \[rs]
    host:src/dir /dest
rsync -avFF --delete host:src/dir /dest
\f[R]
.fi
.RE
.SS TRANSFER RULES
.PP
In addition to the FILTER RULES that affect the recursive file scans
that generate the file list on the sending and (when deleting) receiving
sides, there are transfer rules.
These rules affect which files the generator decides need to be
transferred without the side effects of an exclude filter rule.
Transfer rules affect only files and never directories.
.PP
Because a transfer rule does not affect what goes into the sender\[cq]s
(and receiver\[cq]s) file list, it cannot have any effect on which files
get deleted on the receiving side.
For example, if the file \[lq]foo\[rq] is present in the sender\[cq]s
list but its size is such that it is omitted due to a transfer rule, the
receiving side does not request the file.
However, its presence in the file list means that a delete pass will not
remove a matching file named \[lq]foo\[rq] on the receiving side.
On the other hand, a server-side exclude (hide) of the file
\[lq]foo\[rq] leaves the file out of the server\[cq]s file list, and
absent a receiver-side exclude (protect) the receiver will remove a
matching file named \[lq]foo\[rq] if deletions are requested.
.PP
Given that the files are still in the sender\[cq]s file list, the
\f[V]--prune-empty-dirs\f[R] option will not judge a directory as being
empty even if it contains only files that the transfer rules omitted.
.PP
Similarly, a transfer rule does not have any extra effect on which files
are deleted on the receiving side, so setting a maximum file size for
the transfer does not prevent big files from being deleted.
.PP
Examples of transfer rules include the default \[lq]quick check\[rq]
algorithm (which compares size & modify time), the \f[V]--update\f[R]
option, the \f[V]--max-size\f[R] option, the
\f[V]--ignore-non-existing\f[R] option, and a few others.
.SS BATCH MODE
.PP
Batch mode can be used to apply the same set of updates to many
identical systems.
Suppose one has a tree which is replicated on a number of hosts.
Now suppose some changes have been made to this source tree and those
changes need to be propagated to the other hosts.
In order to do this using batch mode, rsync is run with the write-batch
option to apply the changes made to the source tree to one of the
destination trees.
The write-batch option causes the rsync client to store in a \[lq]batch
file\[rq] all the information needed to repeat this operation against
other, identical destination trees.
.PP
Generating the batch file once saves having to perform the file status,
checksum, and data block generation more than once when updating
multiple destination trees.
Multicast transport protocols can be used to transfer the batch update
files in parallel to many hosts at once, instead of sending the same
data to every host individually.
.PP
To apply the recorded changes to another destination tree, run rsync
with the read-batch option, specifying the name of the same batch file,
and the destination tree.
Rsync updates the destination tree using the information stored in the
batch file.
.PP
For your convenience, a script file is also created when the write-batch
option is used: it will be named the same as the batch file with
\[lq].sh\[rq] appended.
This script file contains a command-line suitable for updating a
destination tree using the associated batch file.
It can be executed using a Bourne (or Bourne-like) shell, optionally
passing in an alternate destination tree pathname which is then used
instead of the original destination path.
This is useful when the destination tree path on the current host
differs from the one used to create the batch file.
.PP
Examples:
.RS
.IP
.nf
\f[C]
$ rsync --write-batch=foo -a host:/source/dir/ /adest/dir/
$ scp foo* remote:
$ ssh remote ./foo.sh /bdest/dir/
\f[R]
.fi
.RE
.RS
.IP
.nf
\f[C]
$ rsync --write-batch=foo -a /source/dir/ /adest/dir/
$ ssh remote rsync --read-batch=- -a /bdest/dir/ <foo
\f[R]
.fi
.RE
.PP
In these examples, rsync is used to update /adest/dir/ from /source/dir/
and the information to repeat this operation is stored in \[lq]foo\[rq]
and \[lq]foo.sh\[rq].
The host \[lq]remote\[rq] is then updated with the batched data going
into the directory /bdest/dir.
The differences between the two examples reveals some of the flexibility
you have in how you deal with batches:
.IP \[bu] 2
The first example shows that the initial copy doesn\[cq]t have to be
local \[en] you can push or pull data to/from a remote host using either
the remote-shell syntax or rsync daemon syntax, as desired.
.IP \[bu] 2
The first example uses the created \[lq]foo.sh\[rq] file to get the
right rsync options when running the read-batch command on the remote
host.
.IP \[bu] 2
The second example reads the batch data via standard input so that the
batch file doesn\[cq]t need to be copied to the remote machine first.
This example avoids the foo.sh script because it needed to use a
modified \f[V]--read-batch\f[R] option, but you could edit the script
file if you wished to make use of it (just be sure that no other option
is trying to use standard input, such as the \f[V]--exclude-from=-\f[R]
option).
.PP
Caveats:
.PP
The read-batch option expects the destination tree that it is updating
to be identical to the destination tree that was used to create the
batch update fileset.
When a difference between the destination trees is encountered the
update might be discarded with a warning (if the file appears to be
up-to-date already) or the file-update may be attempted and then, if the
file fails to verify, the update discarded with an error.
This means that it should be safe to re-run a read-batch operation if
the command got interrupted.
If you wish to force the batched-update to always be attempted
regardless of the file\[cq]s size and date, use the \f[V]-I\f[R] option
(when reading the batch).
If an error occurs, the destination tree will probably be in a partially
updated state.
In that case, rsync can be used in its regular (non-batch) mode of
operation to fix up the destination tree.
.PP
The rsync version used on all destinations must be at least as new as
the one used to generate the batch file.
Rsync will die with an error if the protocol version in the batch file
is too new for the batch-reading rsync to handle.
See also the \f[V]--protocol\f[R] option for a way to have the creating
rsync generate a batch file that an older rsync can understand.
(Note that batch files changed format in version 2.6.3, so mixing
versions older than that with newer versions will not work.)
.PP
When reading a batch file, rsync will force the value of certain options
to match the data in the batch file if you didn\[cq]t set them to the
same as the batch-writing command.
Other options can (and should) be changed.
For instance \f[V]--write-batch\f[R] changes to \f[V]--read-batch\f[R],
\f[V]--files-from\f[R] is dropped, and the \f[V]--filter\f[R] /
\f[V]--include\f[R] / \f[V]--exclude\f[R] options are not needed unless
one of the \f[V]--delete\f[R] options is specified.
.PP
The code that creates the BATCH.sh file transforms any
filter/include/exclude options into a single list that is appended as a
\[lq]here\[rq] document to the shell script file.
An advanced user can use this to modify the exclude list if a change in
what gets deleted by \f[V]--delete\f[R] is desired.
A normal user can ignore this detail and just use the shell script as an
easy way to run the appropriate \f[V]--read-batch\f[R] command for the
batched data.
.PP
The original batch mode in rsync was based on \[lq]rsync+\[rq], but the
latest version uses a new implementation.
.SS SYMBOLIC LINKS
.PP
Three basic behaviors are possible when rsync encounters a symbolic link
in the source directory.
.PP
By default, symbolic links are not transferred at all.
A message \[lq]skipping non-regular\[rq] file is emitted for any
symlinks that exist.
.PP
If \f[V]--links\f[R] is specified, then symlinks are added to the
transfer (instead of being noisily ignored), and the default handling is
to recreate them with the same target on the destination.
Note that \f[V]--archive\f[R] implies \f[V]--links\f[R].
.PP
If \f[V]--copy-links\f[R] is specified, then symlinks are
\[lq]collapsed\[rq] by copying their referent, rather than the symlink.
.PP
Rsync can also distinguish \[lq]safe\[rq] and \[lq]unsafe\[rq] symbolic
links.
An example where this might be used is a web site mirror that wishes to
ensure that the rsync module that is copied does not include symbolic
links to \f[V]/etc/passwd\f[R] in the public section of the site.
Using \f[V]--copy-unsafe-links\f[R] will cause any links to be copied as
the file they point to on the destination.
Using \f[V]--safe-links\f[R] will cause unsafe links to be omitted by
the receiver.
(Note that you must specify or imply \f[V]--links\f[R] for
\f[V]--safe-links\f[R] to have any effect.)
.PP
Symbolic links are considered unsafe if they are absolute symlinks
(start with \f[V]/\f[R]), empty, or if they contain enough \[lq]..\[rq]
components to ascend from the top of the transfer.
.PP
Here\[cq]s a summary of how the symlink options are interpreted.
The list is in order of precedence, so if your combination of options
isn\[cq]t mentioned, use the first line that is a complete subset of
your options:
.IP "0." 3
\f[V]--copy-links\f[R] Turn all symlinks into normal files and
directories (leaving no symlinks in the transfer for any other options
to affect).
.IP "1." 3
\f[V]--copy-dirlinks\f[R] Turn just symlinks to directories into real
directories, leaving all other symlinks to be handled as described
below.
.IP "2." 3
\f[V]--links --copy-unsafe-links\f[R] Turn all unsafe symlinks into
files and create all safe symlinks.
.IP "3." 3
\f[V]--copy-unsafe-links\f[R] Turn all unsafe symlinks into files,
noisily skip all safe symlinks.
.IP "4." 3
\f[V]--links --safe-links\f[R] The receiver skips creating unsafe
symlinks found in the transfer and creates the safe ones.
.IP "5." 3
\f[V]--links\f[R] Create all symlinks.
.PP
For the effect of \f[V]--munge-links\f[R], see the discussion in that
option\[cq]s section.
.PP
Note that the \f[V]--keep-dirlinks\f[R] option does not effect symlinks
in the transfer but instead affects how rsync treats a symlink to a
directory that already exists on the receiving side.
See that option\[cq]s section for a warning.
.SS DIAGNOSTICS
.PP
Rsync occasionally produces error messages that may seem a little
cryptic.
The one that seems to cause the most confusion is \[lq]protocol version
mismatch \[en] is your shell clean?\[rq].
.PP
This message is usually caused by your startup scripts or remote shell
facility producing unwanted garbage on the stream that rsync is using
for its transport.
The way to diagnose this problem is to run your remote shell like this:
.RS
.IP
.nf
\f[C]
ssh remotehost /bin/true > out.dat
\f[R]
.fi
.RE
.PP
then look at out.dat.
If everything is working correctly then out.dat should be a zero length
file.
If you are getting the above error from rsync then you will probably
find that out.dat contains some text or data.
Look at the contents and try to work out what is producing it.
The most common cause is incorrectly configured shell startup scripts
(such as .cshrc or .profile) that contain output statements for
non-interactive logins.
.PP
If you are having trouble debugging filter patterns, then try specifying
the \f[V]-vv\f[R] option.
At this level of verbosity rsync will show why each individual file is
included or excluded.
.SS EXIT VALUES
.IP \[bu] 2
\f[B]0\f[R] - Success
.IP \[bu] 2
\f[B]1\f[R] - Syntax or usage error
.IP \[bu] 2
\f[B]2\f[R] - Protocol incompatibility
.IP \[bu] 2
\f[B]3\f[R] - Errors selecting input/output files, dirs
.IP \[bu] 2
\f[B]4\f[R] - Requested action not supported.
Either:
.RS 2
.IP \[bu] 2
an attempt was made to manipulate 64-bit files on a platform that cannot
support them
.IP \[bu] 2
an option was specified that is supported by the client and not by the
server
.RE
.IP \[bu] 2
\f[B]5\f[R] - Error starting client-server protocol
.IP \[bu] 2
\f[B]6\f[R] - Daemon unable to append to log-file
.IP \[bu] 2
\f[B]10\f[R] - Error in socket I/O
.IP \[bu] 2
\f[B]11\f[R] - Error in file I/O
.IP \[bu] 2
\f[B]12\f[R] - Error in rsync protocol data stream
.IP \[bu] 2
\f[B]13\f[R] - Errors with program diagnostics
.IP \[bu] 2
\f[B]14\f[R] - Error in IPC code
.IP \[bu] 2
\f[B]20\f[R] - Received SIGUSR1 or SIGINT
.IP \[bu] 2
\f[B]21\f[R] - Some error returned by \f[B]waitpid()\f[R]
.IP \[bu] 2
\f[B]22\f[R] - Error allocating core memory buffers
.IP \[bu] 2
\f[B]23\f[R] - Partial transfer due to error
.IP \[bu] 2
\f[B]24\f[R] - Partial transfer due to vanished source files
.IP \[bu] 2
\f[B]25\f[R] - The \[en]max-delete limit stopped deletions
.IP \[bu] 2
\f[B]30\f[R] - Timeout in data send/receive
.IP \[bu] 2
\f[B]35\f[R] - Timeout waiting for daemon connection
.SS ENVIRONMENT VARIABLES
.IP " 0." 4
\f[V]CVSIGNORE\f[R]
.RS 4
.PP
The CVSIGNORE environment variable supplements any ignore patterns in
\&.cvsignore files.
See the \f[V]--cvs-exclude\f[R] option for more details.
.RE
.IP " 1." 4
\f[V]RSYNC_ICONV\f[R]
.RS 4
.PP
Specify a default \f[V]--iconv\f[R] setting using this environment
variable.
First supported in 3.0.0.
.RE
.IP " 2." 4
\f[V]RSYNC_OLD_ARGS\f[R]
.RS 4
.PP
Specify a \[lq]1\[rq] if you want the \f[V]--old-args\f[R] option to be
enabled by default, a \[lq]2\[rq] (or more) if you want it to be enabled
in the repeated-option state, or a \[lq]0\[rq] to make sure that it is
disabled by default.
When this environment variable is set to a non-zero value, it supersedes
the \f[V]RSYNC_PROTECT_ARGS\f[R] variable.
.PP
This variable is ignored if \f[V]--old-args\f[R],
\f[V]--no-old-args\f[R], or \f[V]--secluded-args\f[R] is specified on
the command line.
.PP
First supported in 3.2.4.
.RE
.IP " 3." 4
\f[V]RSYNC_PROTECT_ARGS\f[R]
.RS 4
.PP
Specify a non-zero numeric value if you want the
\f[V]--secluded-args\f[R] option to be enabled by default, or a zero
value to make sure that it is disabled by default.
.PP
This variable is ignored if \f[V]--secluded-args\f[R],
\f[V]--no-secluded-args\f[R], or \f[V]--old-args\f[R] is specified on
the command line.
.PP
First supported in 3.1.0.
Starting in 3.2.4, this variable is ignored if \f[V]RSYNC_OLD_ARGS\f[R]
is set to a non-zero value.
.RE
.IP " 4." 4
\f[V]RSYNC_RSH\f[R]
.RS 4
.PP
This environment variable allows you to override the default shell used
as the transport for rsync.
Command line options are permitted after the command name, just as in
the \f[V]--rsh\f[R] (\f[V]-e\f[R]) option.
.RE
.IP " 5." 4
\f[V]RSYNC_PROXY\f[R]
.RS 4
.PP
This environment variable allows you to redirect your rsync client to
use a web proxy when connecting to an rsync daemon.
You should set \f[V]RSYNC_PROXY\f[R] to a hostname:port pair.
.RE
.IP " 6." 4
\f[V]RSYNC_PASSWORD\f[R]
.RS 4
.PP
This environment variable allows you to set the password for an rsync
\f[B]daemon\f[R] connection, which avoids the password prompt.
Note that this does \f[B]not\f[R] supply a password to a remote shell
transport such as ssh (consult its documentation for how to do that).
.RE
.IP " 7." 4
\f[V]USER\f[R] or \f[V]LOGNAME\f[R]
.RS 4
.PP
The USER or LOGNAME environment variables are used to determine the
default username sent to an rsync daemon.
If neither is set, the username defaults to \[lq]nobody\[rq].
If both are set, \f[V]USER\f[R] takes precedence.
.RE
.IP " 8." 4
\f[V]RSYNC_PARTIAL_DIR\f[R]
.RS 4
.PP
This environment variable specifies the directory to use for a
\f[V]--partial\f[R] transfer without implying that partial transfers be
enabled.
See the \f[V]--partial-dir\f[R] option for full details.
.RE
.IP " 9." 4
\f[V]RSYNC_COMPRESS_LIST\f[R]
.RS 4
.PP
This environment variable allows you to customize the negotiation of the
compression algorithm by specifying an alternate order or a reduced list
of names.
Use the command \f[V]rsync --version\f[R] to see the available
compression names.
See the \f[V]--compress\f[R] option for full details.
.RE
.IP "10." 4
\f[V]RSYNC_CHECKSUM_LIST\f[R]
.RS 4
.PP
This environment variable allows you to customize the negotiation of the
checksum algorithm by specifying an alternate order or a reduced list of
names.
Use the command \f[V]rsync --version\f[R] to see the available checksum
names.
See the \f[V]--checksum-choice\f[R] option for full details.
.RE
.IP "11." 4
\f[V]RSYNC_MAX_ALLOC\f[R]
.RS 4
.PP
This environment variable sets an allocation maximum as if you had used
the \f[V]--max-alloc\f[R] option.
.RE
.IP "12." 4
\f[V]RSYNC_PORT\f[R]
.RS 4
.PP
This environment variable is not read by rsync, but is instead set in
its sub-environment when rsync is running the remote shell in
combination with a daemon connection.
This allows a script such as \f[V]rsync-ssl\f[R] to be able to know the
port number that the user specified on the command line.
.RE
.IP "13." 4
\f[V]HOME\f[R]
.RS 4
.PP
This environment variable is used to find the user\[cq]s default
\&.cvsignore file.
.RE
.IP "14." 4
\f[V]RSYNC_CONNECT_PROG\f[R]
.RS 4
.PP
This environment variable is mainly used in debug setups to set the
program to use when making a daemon connection.
See CONNECTING TO AN RSYNC DAEMON for full details.
.RE
.IP "15." 4
\f[V]RSYNC_SHELL\f[R]
.RS 4
.PP
This environment variable is mainly used in debug setups to set the
program to use to run the program specified by
\f[V]RSYNC_CONNECT_PROG\f[R].
See CONNECTING TO AN RSYNC DAEMON for full details.
.RE
.SS FILES
.PP
/etc/rsyncd.conf or rsyncd.conf
.SS SEE ALSO
.PP
\f[B]rsync-ssl\f[R](1), \f[B]rsyncd.conf\f[R](5), \f[B]rrsync\f[R](1)
.SS BUGS
.IP \[bu] 2
Times are transferred as *nix time_t values.
.IP \[bu] 2
When transferring to FAT filesystems rsync may re-sync unmodified files.
See the comments on the \f[V]--modify-window\f[R] option.
.IP \[bu] 2
File permissions, devices, etc.
are transferred as native numerical values.
.IP \[bu] 2
See also the comments on the \f[V]--delete\f[R] option.
.PP
Please report bugs!
See the web site at <https://rsync.samba.org/>.
.SS VERSION
.PP
This manpage is current for version \[at]VERSION\[at] of rsync.
.SS INTERNAL OPTIONS
.PP
The options \f[V]--server\f[R] and \f[V]--sender\f[R] are used
internally by rsync, and should never be typed by a user under normal
circumstances.
Some awareness of these options may be needed in certain scenarios, such
as when setting up a login that can only run an rsync command.
For instance, the support directory of the rsync distribution has an
example script named rrsync (for restricted rsync) that can be used with
a restricted ssh login.
.SS CREDITS
.PP
Rsync is distributed under the GNU General Public License.
See the file COPYING for details.
.PP
An rsync web site is available at <https://rsync.samba.org/>.
The site includes an FAQ-O-Matic which may cover questions unanswered by
this manual page.
.PP
The rsync github project is <https://github.com/RsyncProject/rsync>.
.PP
We would be delighted to hear from you if you like this program.
Please contact the mailing-list at <rsync@lists.samba.org>.
.PP
This program uses the excellent zlib compression library written by
Jean-loup Gailly and Mark Adler.
.SS THANKS
.PP
Special thanks go out to: John Van Essen, Matt McCutchen, Wesley W.
Terpstra, David Dykstra, Jos Backus, Sebastian Krahmer, Martin Pool, and
our gone-but-not-forgotten compadre, J.W.
Schultz.
.PP
Thanks also to Richard Brent, Brendan Mackay, Bill Waite, Stephen
Rothwell and David Bell.
I\[cq]ve probably missed some people, my apologies if I have.
.SS AUTHOR
.PP
Rsync was originally written by Andrew Tridgell and Paul Mackerras.
Many people from around the world have helped to maintain and improve
it.
.PP
Mailing lists for support and development are available at
<https://lists.samba.org/>.
